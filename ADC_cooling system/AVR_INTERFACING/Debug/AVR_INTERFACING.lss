
AVR_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002f3a  00002fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800074  00800074  00002fe2  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001954  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000753c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000767c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000077ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__vector_10>
      2c:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 16 	call	0x2d12	; 0x2d12 <main>
      8a:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
#include"MCU_HW.h"
#include"EXTI.h"
void(*ADC_ptr_to_callback_fns[8])(u16) = {NULL};

void ADC_init(ADC_CFG* cfg)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	/*disable ADC*/
	CLEARBIT(ADCSRA,ADEN);
     b54:	a6 e2       	ldi	r26, 0x26	; 38
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e6 e2       	ldi	r30, 0x26	; 38
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8f 77       	andi	r24, 0x7F	; 127
     b60:	8c 93       	st	X, r24

	/*choose VREF & adjustment type*/
	ADMUX = (cfg->v)<<REFS0 | (cfg->adjust)<<ADLAR;
     b62:	a7 e2       	ldi	r26, 0x27	; 39
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e9 81       	ldd	r30, Y+1	; 0x01
     b68:	fa 81       	ldd	r31, Y+2	; 0x02
     b6a:	80 81       	ld	r24, Z
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	00 24       	eor	r0, r0
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	07 94       	ror	r0
     b78:	96 95       	lsr	r25
     b7a:	87 95       	ror	r24
     b7c:	07 94       	ror	r0
     b7e:	98 2f       	mov	r25, r24
     b80:	80 2d       	mov	r24, r0
     b82:	28 2f       	mov	r18, r24
     b84:	e9 81       	ldd	r30, Y+1	; 0x01
     b86:	fa 81       	ldd	r31, Y+2	; 0x02
     b88:	81 81       	ldd	r24, Z+1	; 0x01
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	82 95       	swap	r24
     b94:	92 95       	swap	r25
     b96:	90 7f       	andi	r25, 0xF0	; 240
     b98:	98 27       	eor	r25, r24
     b9a:	80 7f       	andi	r24, 0xF0	; 240
     b9c:	98 27       	eor	r25, r24
     b9e:	82 2b       	or	r24, r18
     ba0:	8c 93       	st	X, r24

	/*Select Prescaler & disable ADC interrupt & choose single conversion mode*/
	ADCSRA = (cfg->pre) | (1<<ADIF);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	80 61       	ori	r24, 0x10	; 16
     bae:	8c 93       	st	X, r24

	/*enable ADC*/
	SETBIT(ADCSRA,ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <ADC_getDigitalValueSynchNonBlocking>:

void ADC_getDigitalValueSynchNonBlocking (CHANNEL_NUMBER ch_num, u16* ptr)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <ADC_getDigitalValueSynchNonBlocking+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <ADC_getDigitalValueSynchNonBlocking+0x8>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	7d 83       	std	Y+5, r23	; 0x05
     bda:	6c 83       	std	Y+4, r22	; 0x04
	/*flag to check if time limit exceeded*/
	static u8 flag=1;

	/*select channel*/
	ADMUX |= ((ADMUX & 0xE0) | (ch_num & 0x07));
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	28 2f       	mov	r18, r24
     be8:	e7 e2       	ldi	r30, 0x27	; 39
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	98 2f       	mov	r25, r24
     bf0:	90 7e       	andi	r25, 0xE0	; 224
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	87 70       	andi	r24, 0x07	; 7
     bf6:	89 2b       	or	r24, r25
     bf8:	82 2b       	or	r24, r18
     bfa:	8c 93       	st	X, r24


	/*start conversion only if the last conversion completed*/
	if(flag==1)
     bfc:	80 91 70 00 	lds	r24, 0x0070
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	39 f4       	brne	.+14     	; 0xc12 <ADC_getDigitalValueSynchNonBlocking+0x4a>
		ADCSRA |= 1<<ADSC;
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	8c 93       	st	X, r24

	u16 counter=0;
     c12:	1a 82       	std	Y+2, r1	; 0x02
     c14:	19 82       	std	Y+1, r1	; 0x01
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <ADC_getDigitalValueSynchNonBlocking+0x5a>
	while(BIT_IS_CLEAR(ADCSRA, ADIF) && counter<= ADC_TIME_LIMIT)
	{
		counter++;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
	/*start conversion only if the last conversion completed*/
	if(flag==1)
		ADCSRA |= 1<<ADSC;

	u16 counter=0;
	while(BIT_IS_CLEAR(ADCSRA, ADIF) && counter<= ADC_TIME_LIMIT)
     c22:	e6 e2       	ldi	r30, 0x26	; 38
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	80 71       	andi	r24, 0x10	; 16
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	31 f4       	brne	.+12     	; 0xc40 <ADC_getDigitalValueSynchNonBlocking+0x78>
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	23 ec       	ldi	r18, 0xC3	; 195
     c3a:	81 35       	cpi	r24, 0x51	; 81
     c3c:	92 07       	cpc	r25, r18
     c3e:	60 f3       	brcs	.-40     	; 0xc18 <ADC_getDigitalValueSynchNonBlocking+0x50>
	{
		counter++;
	}

	if(counter> ADC_TIME_LIMIT)
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	23 ec       	ldi	r18, 0xC3	; 195
     c46:	81 35       	cpi	r24, 0x51	; 81
     c48:	92 07       	cpc	r25, r18
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <ADC_getDigitalValueSynchNonBlocking+0x88>
	{
		flag=0;
     c4c:	10 92 70 00 	sts	0x0070, r1
	}

	/*if conversion is complete clear interrupt flag*/
	if(BIT_IS_CLEAR(ADCSRA, ADIF))
     c50:	e6 e2       	ldi	r30, 0x26	; 38
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	80 71       	andi	r24, 0x10	; 16
     c5c:	90 70       	andi	r25, 0x00	; 0
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	39 f4       	brne	.+14     	; 0xc70 <ADC_getDigitalValueSynchNonBlocking+0xa8>
	{
		/*clear flag*/
		ADCSRA |= (1<<ADIF) ;
     c62:	a6 e2       	ldi	r26, 0x26	; 38
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e6 e2       	ldi	r30, 0x26	; 38
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	80 61       	ori	r24, 0x10	; 16
     c6e:	8c 93       	st	X, r24
	}


	/*read data*/
	*ptr = ADC;
     c70:	e4 e2       	ldi	r30, 0x24	; 36
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	ec 81       	ldd	r30, Y+4	; 0x04
     c7a:	fd 81       	ldd	r31, Y+5	; 0x05
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	80 83       	st	Z, r24
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <ADC_getDigitalValueAsynchCallBack>:
void ADC_getDigitalValueAsynchCallBack(CHANNEL_NUMBER ch_num, void(*ptr_to_fn)(u16))
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <ADC_getDigitalValueAsynchCallBack+0x6>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	7b 83       	std	Y+3, r23	; 0x03
     ca0:	6a 83       	std	Y+2, r22	; 0x02
	/*set call_back*/
	ADC_ptr_to_callback_fns[ch_num] = ptr_to_fn;
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	fc 01       	movw	r30, r24
     cae:	ec 58       	subi	r30, 0x8C	; 140
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24

	/*enable interrupt*/
	ADCSRA |= (INTERRUPT_ENABLE<<3);
     cba:	a6 e2       	ldi	r26, 0x26	; 38
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e6 e2       	ldi	r30, 0x26	; 38
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	8c 93       	st	X, r24

	/*select channel*/
	ADMUX &= ~(1111<<0);
     cc8:	a7 e2       	ldi	r26, 0x27	; 39
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e2       	ldi	r30, 0x27	; 39
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	88 7a       	andi	r24, 0xA8	; 168
     cd4:	8c 93       	st	X, r24
	ADMUX |= (ch_num);
     cd6:	a7 e2       	ldi	r26, 0x27	; 39
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e2       	ldi	r30, 0x27	; 39
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	90 81       	ld	r25, Z
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	89 2b       	or	r24, r25
     ce4:	8c 93       	st	X, r24

	/*start conversion*/
	ADCSRA |= 1<<ADSC;
     ce6:	a6 e2       	ldi	r26, 0x26	; 38
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e2       	ldi	r30, 0x26	; 38
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	8c 93       	st	X, r24
}
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <__vector_16>:

ISR(ADC_vect)
{
     d00:	1f 92       	push	r1
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	0f 92       	push	r0
     d08:	11 24       	eor	r1, r1
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
	if(ADC_ptr_to_callback_fns[CH_2] != NULL)
     d2a:	80 91 78 00 	lds	r24, 0x0078
     d2e:	90 91 79 00 	lds	r25, 0x0079
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	a1 f0       	breq	.+40     	; 0xd5e <__vector_16+0x5e>
	{
		ADC_ptr_to_callback_fns[CH_2]((ADCH << 8) | (ADCL));
     d36:	40 91 78 00 	lds	r20, 0x0078
     d3a:	50 91 79 00 	lds	r21, 0x0079
     d3e:	e5 e2       	ldi	r30, 0x25	; 37
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	38 2f       	mov	r19, r24
     d4a:	22 27       	eor	r18, r18
     d4c:	e4 e2       	ldi	r30, 0x24	; 36
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	82 2b       	or	r24, r18
     d58:	93 2b       	or	r25, r19
     d5a:	fa 01       	movw	r30, r20
     d5c:	09 95       	icall
	}

}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <DcMotor_Init>:
#include"DC_MOTOR.h"
#include"Timer0.h"
#include"GPIO.h"
#include"BIT_MATH.h"
void DcMotor_Init(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	28 97       	sbiw	r28, 0x08	; 8
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
	/*SET IN1 & IN2 OF DC_MOTOR AS OUTPUT PINS FROM MC*/
	DIO_voidSetPinDirection(IN1_PORT_ID, 0, OUTPUT);
     d98:	86 e3       	ldi	r24, 0x36	; 54
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(IN2_PORT_ID, 1, OUTPUT);
     da4:	86 e3       	ldi	r24, 0x36	; 54
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>

	/*SET ENABLE PIN(OC0) AS OUTPUT*/
	DIO_voidSetPinDirection(PERIPHRAL_B, 3, OUTPUT);
     db0:	86 e3       	ldi	r24, 0x36	; 54
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	63 e0       	ldi	r22, 0x03	; 3
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>

	/*STOP DC_MOTOR INITIALY*/
	IN1_PORT_ID->PORT_R.bits.bit0=0;
     dbc:	e6 e3       	ldi	r30, 0x36	; 54
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	8e 7f       	andi	r24, 0xFE	; 254
     dc4:	82 83       	std	Z+2, r24	; 0x02
	IN1_PORT_ID->PORT_R.bits.bit1=0;
     dc6:	e6 e3       	ldi	r30, 0x36	; 54
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	8d 7f       	andi	r24, 0xFD	; 253
     dce:	82 83       	std	Z+2, r24	; 0x02
	/*init timer0*/
	Timer0_cfg cfg = {PWM_fast, PRE8, NON_INVERTING};
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	9d 83       	std	Y+5, r25	; 0x05
     dd6:	8c 83       	std	Y+4, r24	; 0x04
     dd8:	e1 e7       	ldi	r30, 0x71	; 113
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	ff 83       	std	Y+7, r31	; 0x07
     dde:	ee 83       	std	Y+6, r30	; 0x06
     de0:	f3 e0       	ldi	r31, 0x03	; 3
     de2:	f8 87       	std	Y+8, r31	; 0x08
     de4:	ee 81       	ldd	r30, Y+6	; 0x06
     de6:	ff 81       	ldd	r31, Y+7	; 0x07
     de8:	00 80       	ld	r0, Z
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	9f 83       	std	Y+7, r25	; 0x07
     df2:	8e 83       	std	Y+6, r24	; 0x06
     df4:	ec 81       	ldd	r30, Y+4	; 0x04
     df6:	fd 81       	ldd	r31, Y+5	; 0x05
     df8:	00 82       	st	Z, r0
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	9d 81       	ldd	r25, Y+5	; 0x05
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	9d 83       	std	Y+5, r25	; 0x05
     e02:	8c 83       	std	Y+4, r24	; 0x04
     e04:	98 85       	ldd	r25, Y+8	; 0x08
     e06:	91 50       	subi	r25, 0x01	; 1
     e08:	98 87       	std	Y+8, r25	; 0x08
     e0a:	e8 85       	ldd	r30, Y+8	; 0x08
     e0c:	ee 23       	and	r30, r30
     e0e:	51 f7       	brne	.-44     	; 0xde4 <DcMotor_Init+0x60>
	Timer0_Init(& cfg);
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 aa 13 	call	0x2754	; 0x2754 <Timer0_Init>
}
     e18:	28 96       	adiw	r28, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <DC_MOTOR_setSpeed>:
void DC_MOTOR_setSpeed(u8 duty, DcMotor_State state)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DC_MOTOR_setSpeed+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	6a 83       	std	Y+2, r22	; 0x02
	/*adjust the state of the rotation of motor(clkwise/ anti clkwise/ stop)*/
		PERIPHRAL_B->PORT_R.ALL_BITS = (PERIPHRAL_B->PORT_R.ALL_BITS & 0xFC) | state;
     e38:	a6 e3       	ldi	r26, 0x36	; 54
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e6 e3       	ldi	r30, 0x36	; 54
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	98 2f       	mov	r25, r24
     e44:	9c 7f       	andi	r25, 0xFC	; 252
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	89 2b       	or	r24, r25
     e4a:	12 96       	adiw	r26, 0x02	; 2
     e4c:	8c 93       	st	X, r24
	/*send the required speed to pwm to generate the wave on the enable pin of the motor*/
	setFastPWM( duty);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	0e 94 43 15 	call	0x2a86	; 0x2a86 <setFastPWM>

}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <EXTI_enableInterrupt>:

#include "EXTI.h"
void(*ptr_to_callback_fns[3])(void) = {NULL, NULL, NULL};

void EXTI_enableInterrupt(INT_ID INT, triggerType trig)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <EXTI_enableInterrupt+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <EXTI_enableInterrupt+0x8>
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	6a 83       	std	Y+2, r22	; 0x02
	/*enable interrupt*/
	EXTI_R ->GICR.ALL_BITS |= (1<<INT);
     e6e:	a4 e5       	ldi	r26, 0x54	; 84
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e4 e5       	ldi	r30, 0x54	; 84
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	87 81       	ldd	r24, Z+7	; 0x07
     e78:	48 2f       	mov	r20, r24
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <EXTI_enableInterrupt+0x2c>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	2a 95       	dec	r18
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <EXTI_enableInterrupt+0x28>
     e8e:	84 2b       	or	r24, r20
     e90:	17 96       	adiw	r26, 0x07	; 7
     e92:	8c 93       	st	X, r24
     e94:	17 97       	sbiw	r26, 0x07	; 7

	switch(INT)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3c 83       	std	Y+4, r19	; 0x04
     e9e:	2b 83       	std	Y+3, r18	; 0x03
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	86 30       	cpi	r24, 0x06	; 6
     ea6:	91 05       	cpc	r25, r1
     ea8:	59 f0       	breq	.+22     	; 0xec0 <EXTI_enableInterrupt+0x62>
     eaa:	2b 81       	ldd	r18, Y+3	; 0x03
     eac:	3c 81       	ldd	r19, Y+4	; 0x04
     eae:	27 30       	cpi	r18, 0x07	; 7
     eb0:	31 05       	cpc	r19, r1
     eb2:	89 f0       	breq	.+34     	; 0xed6 <EXTI_enableInterrupt+0x78>
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	85 30       	cpi	r24, 0x05	; 5
     eba:	91 05       	cpc	r25, r1
     ebc:	f1 f0       	breq	.+60     	; 0xefa <EXTI_enableInterrupt+0x9c>
     ebe:	2b c0       	rjmp	.+86     	; 0xf16 <EXTI_enableInterrupt+0xb8>
	{
	case INT0:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig;
     ec0:	a4 e5       	ldi	r26, 0x54	; 84
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e4 e5       	ldi	r30, 0x54	; 84
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	89 2b       	or	r24, r25
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	8c 93       	st	X, r24
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	20 c0       	rjmp	.+64     	; 0xf16 <EXTI_enableInterrupt+0xb8>
		break;
	case INT1:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig<<2;
     ed6:	a4 e5       	ldi	r26, 0x54	; 84
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e4 e5       	ldi	r30, 0x54	; 84
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	81 81       	ldd	r24, Z+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 2b       	or	r24, r18
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	8c 93       	st	X, r24
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	0e c0       	rjmp	.+28     	; 0xf16 <EXTI_enableInterrupt+0xb8>
		break;
	case INT2:
		/*choose triggering type*/
		EXTI_R ->MCUCSR.bits.bit6 = trig; /***************/
     efa:	e4 e5       	ldi	r30, 0x54	; 84
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	81 70       	andi	r24, 0x01	; 1
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	98 2f       	mov	r25, r24
     f06:	92 95       	swap	r25
     f08:	99 0f       	add	r25, r25
     f0a:	99 0f       	add	r25, r25
     f0c:	90 7c       	andi	r25, 0xC0	; 192
     f0e:	80 81       	ld	r24, Z
     f10:	8f 7b       	andi	r24, 0xBF	; 191
     f12:	89 2b       	or	r24, r25
     f14:	80 83       	st	Z, r24
		break;
	}


}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <EXTI_disableInterrupt>:

void EXTI_disableInterrupt(INT_ID INT)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01
	EXTI_R ->GICR.ALL_BITS &= ~(1<<INT);
     f30:	a4 e5       	ldi	r26, 0x54	; 84
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e4 e5       	ldi	r30, 0x54	; 84
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	87 81       	ldd	r24, Z+7	; 0x07
     f3a:	48 2f       	mov	r20, r24
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <EXTI_disableInterrupt+0x2a>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <EXTI_disableInterrupt+0x26>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	17 96       	adiw	r26, 0x07	; 7
     f58:	8c 93       	st	X, r24
     f5a:	17 97       	sbiw	r26, 0x07	; 7
}
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <EXTI_setCallBack>:
void EXTI_setCallBack(void(*ptr_to_fn)(void), INT_ID INT)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <EXTI_setCallBack+0x6>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	6b 83       	std	Y+3, r22	; 0x03
	ptr_to_callback_fns[INT-5] = ptr_to_fn;/*********************/
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	05 97       	sbiw	r24, 0x05	; 5
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	fc 01       	movw	r30, r24
     f84:	ec 57       	subi	r30, 0x7C	; 124
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <DIO_voidSetPinDirection>:
 *  Created on: Oct 20, 2023
 *      Author: OMR
 */
#include"GPIO.h"
void DIO_voidSetPinDirection(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_voidSetPinDirection+0x6>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DIO_voidSetPinDirection+0x8>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <DIO_voidSetPinDirection+0xa>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	6b 83       	std	Y+3, r22	; 0x03
     fb0:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3e 83       	std	Y+6, r19	; 0x06
     fba:	2d 83       	std	Y+5, r18	; 0x05
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	91 05       	cpc	r25, r1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <DIO_voidSetPinDirection+0x2c>
     fc6:	51 c0       	rjmp	.+162    	; 0x106a <DIO_voidSetPinDirection+0xce>
     fc8:	2d 81       	ldd	r18, Y+5	; 0x05
     fca:	3e 81       	ldd	r19, Y+6	; 0x06
     fcc:	24 30       	cpi	r18, 0x04	; 4
     fce:	31 05       	cpc	r19, r1
     fd0:	7c f4       	brge	.+30     	; 0xff0 <DIO_voidSetPinDirection+0x54>
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	71 f1       	breq	.+92     	; 0x1038 <DIO_voidSetPinDirection+0x9c>
     fdc:	2d 81       	ldd	r18, Y+5	; 0x05
     fde:	3e 81       	ldd	r19, Y+6	; 0x06
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	ac f5       	brge	.+106    	; 0x1050 <DIO_voidSetPinDirection+0xb4>
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	d1 f0       	breq	.+52     	; 0x1022 <DIO_voidSetPinDirection+0x86>
     fee:	81 c0       	rjmp	.+258    	; 0x10f2 <DIO_voidSetPinDirection+0x156>
     ff0:	2d 81       	ldd	r18, Y+5	; 0x05
     ff2:	3e 81       	ldd	r19, Y+6	; 0x06
     ff4:	25 30       	cpi	r18, 0x05	; 5
     ff6:	31 05       	cpc	r19, r1
     ff8:	09 f4       	brne	.+2      	; 0xffc <DIO_voidSetPinDirection+0x60>
     ffa:	52 c0       	rjmp	.+164    	; 0x10a0 <DIO_voidSetPinDirection+0x104>
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	85 30       	cpi	r24, 0x05	; 5
    1002:	91 05       	cpc	r25, r1
    1004:	0c f4       	brge	.+2      	; 0x1008 <DIO_voidSetPinDirection+0x6c>
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <DIO_voidSetPinDirection+0xea>
    1008:	2d 81       	ldd	r18, Y+5	; 0x05
    100a:	3e 81       	ldd	r19, Y+6	; 0x06
    100c:	26 30       	cpi	r18, 0x06	; 6
    100e:	31 05       	cpc	r19, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <DIO_voidSetPinDirection+0x78>
    1012:	54 c0       	rjmp	.+168    	; 0x10bc <DIO_voidSetPinDirection+0x120>
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	87 30       	cpi	r24, 0x07	; 7
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_voidSetPinDirection+0x84>
    101e:	5d c0       	rjmp	.+186    	; 0x10da <DIO_voidSetPinDirection+0x13e>
    1020:	68 c0       	rjmp	.+208    	; 0x10f2 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr ->direction.bits.bit0 = Copy_u8Direction;
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	e9 81       	ldd	r30, Y+1	; 0x01
    1028:	fa 81       	ldd	r31, Y+2	; 0x02
    102a:	98 2f       	mov	r25, r24
    102c:	91 70       	andi	r25, 0x01	; 1
    102e:	81 81       	ldd	r24, Z+1	; 0x01
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	89 2b       	or	r24, r25
    1034:	81 83       	std	Z+1, r24	; 0x01
    1036:	5d c0       	rjmp	.+186    	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr ->direction.bits.bit1 = Copy_u8Direction;
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	81 70       	andi	r24, 0x01	; 1
    103c:	e9 81       	ldd	r30, Y+1	; 0x01
    103e:	fa 81       	ldd	r31, Y+2	; 0x02
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	98 2f       	mov	r25, r24
    1044:	99 0f       	add	r25, r25
    1046:	81 81       	ldd	r24, Z+1	; 0x01
    1048:	8d 7f       	andi	r24, 0xFD	; 253
    104a:	89 2b       	or	r24, r25
    104c:	81 83       	std	Z+1, r24	; 0x01
    104e:	51 c0       	rjmp	.+162    	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr ->direction.bits.bit2 = Copy_u8Direction;
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	e9 81       	ldd	r30, Y+1	; 0x01
    1056:	fa 81       	ldd	r31, Y+2	; 0x02
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	98 2f       	mov	r25, r24
    105c:	99 0f       	add	r25, r25
    105e:	99 0f       	add	r25, r25
    1060:	81 81       	ldd	r24, Z+1	; 0x01
    1062:	8b 7f       	andi	r24, 0xFB	; 251
    1064:	89 2b       	or	r24, r25
    1066:	81 83       	std	Z+1, r24	; 0x01
    1068:	44 c0       	rjmp	.+136    	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr ->direction.bits.bit3 = Copy_u8Direction;
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	e9 81       	ldd	r30, Y+1	; 0x01
    1070:	fa 81       	ldd	r31, Y+2	; 0x02
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	98 2f       	mov	r25, r24
    1076:	99 0f       	add	r25, r25
    1078:	99 0f       	add	r25, r25
    107a:	99 0f       	add	r25, r25
    107c:	81 81       	ldd	r24, Z+1	; 0x01
    107e:	87 7f       	andi	r24, 0xF7	; 247
    1080:	89 2b       	or	r24, r25
    1082:	81 83       	std	Z+1, r24	; 0x01
    1084:	36 c0       	rjmp	.+108    	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr ->direction.bits.bit4 = Copy_u8Direction;
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	e9 81       	ldd	r30, Y+1	; 0x01
    108c:	fa 81       	ldd	r31, Y+2	; 0x02
    108e:	81 70       	andi	r24, 0x01	; 1
    1090:	98 2f       	mov	r25, r24
    1092:	92 95       	swap	r25
    1094:	90 7f       	andi	r25, 0xF0	; 240
    1096:	81 81       	ldd	r24, Z+1	; 0x01
    1098:	8f 7e       	andi	r24, 0xEF	; 239
    109a:	89 2b       	or	r24, r25
    109c:	81 83       	std	Z+1, r24	; 0x01
    109e:	29 c0       	rjmp	.+82     	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr ->direction.bits.bit5 = Copy_u8Direction;
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	e9 81       	ldd	r30, Y+1	; 0x01
    10a6:	fa 81       	ldd	r31, Y+2	; 0x02
    10a8:	81 70       	andi	r24, 0x01	; 1
    10aa:	98 2f       	mov	r25, r24
    10ac:	92 95       	swap	r25
    10ae:	99 0f       	add	r25, r25
    10b0:	90 7e       	andi	r25, 0xE0	; 224
    10b2:	81 81       	ldd	r24, Z+1	; 0x01
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	89 2b       	or	r24, r25
    10b8:	81 83       	std	Z+1, r24	; 0x01
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr ->direction.bits.bit6 = Copy_u8Direction;
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	e9 81       	ldd	r30, Y+1	; 0x01
    10c2:	fa 81       	ldd	r31, Y+2	; 0x02
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	98 2f       	mov	r25, r24
    10c8:	92 95       	swap	r25
    10ca:	99 0f       	add	r25, r25
    10cc:	99 0f       	add	r25, r25
    10ce:	90 7c       	andi	r25, 0xC0	; 192
    10d0:	81 81       	ldd	r24, Z+1	; 0x01
    10d2:	8f 7b       	andi	r24, 0xBF	; 191
    10d4:	89 2b       	or	r24, r25
    10d6:	81 83       	std	Z+1, r24	; 0x01
    10d8:	0c c0       	rjmp	.+24     	; 0x10f2 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr ->direction.bits.bit7 = Copy_u8Direction;
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	e9 81       	ldd	r30, Y+1	; 0x01
    10e0:	fa 81       	ldd	r31, Y+2	; 0x02
    10e2:	98 2f       	mov	r25, r24
    10e4:	97 95       	ror	r25
    10e6:	99 27       	eor	r25, r25
    10e8:	97 95       	ror	r25
    10ea:	81 81       	ldd	r24, Z+1	; 0x01
    10ec:	8f 77       	andi	r24, 0x7F	; 127
    10ee:	89 2b       	or	r24, r25
    10f0:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
    10f2:	26 96       	adiw	r28, 0x06	; 6
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <DIO_voidSetPinValue+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <DIO_voidSetPinValue+0x8>
    110c:	00 d0       	rcall	.+0      	; 0x110e <DIO_voidSetPinValue+0xa>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	6b 83       	std	Y+3, r22	; 0x03
    1118:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3e 83       	std	Y+6, r19	; 0x06
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <DIO_voidSetPinValue+0x2c>
    112e:	51 c0       	rjmp	.+162    	; 0x11d2 <DIO_voidSetPinValue+0xce>
    1130:	2d 81       	ldd	r18, Y+5	; 0x05
    1132:	3e 81       	ldd	r19, Y+6	; 0x06
    1134:	24 30       	cpi	r18, 0x04	; 4
    1136:	31 05       	cpc	r19, r1
    1138:	7c f4       	brge	.+30     	; 0x1158 <DIO_voidSetPinValue+0x54>
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	71 f1       	breq	.+92     	; 0x11a0 <DIO_voidSetPinValue+0x9c>
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	ac f5       	brge	.+106    	; 0x11b8 <DIO_voidSetPinValue+0xb4>
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	d1 f0       	breq	.+52     	; 0x118a <DIO_voidSetPinValue+0x86>
    1156:	81 c0       	rjmp	.+258    	; 0x125a <DIO_voidSetPinValue+0x156>
    1158:	2d 81       	ldd	r18, Y+5	; 0x05
    115a:	3e 81       	ldd	r19, Y+6	; 0x06
    115c:	25 30       	cpi	r18, 0x05	; 5
    115e:	31 05       	cpc	r19, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_voidSetPinValue+0x60>
    1162:	52 c0       	rjmp	.+164    	; 0x1208 <DIO_voidSetPinValue+0x104>
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	85 30       	cpi	r24, 0x05	; 5
    116a:	91 05       	cpc	r25, r1
    116c:	0c f4       	brge	.+2      	; 0x1170 <DIO_voidSetPinValue+0x6c>
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <DIO_voidSetPinValue+0xea>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	26 30       	cpi	r18, 0x06	; 6
    1176:	31 05       	cpc	r19, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <DIO_voidSetPinValue+0x78>
    117a:	54 c0       	rjmp	.+168    	; 0x1224 <DIO_voidSetPinValue+0x120>
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	87 30       	cpi	r24, 0x07	; 7
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <DIO_voidSetPinValue+0x84>
    1186:	5d c0       	rjmp	.+186    	; 0x1242 <DIO_voidSetPinValue+0x13e>
    1188:	68 c0       	rjmp	.+208    	; 0x125a <DIO_voidSetPinValue+0x156>
		{
		case 0:
			ptr ->PORT_R.bits.bit0 = Copy_u8Value;
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	98 2f       	mov	r25, r24
    1194:	91 70       	andi	r25, 0x01	; 1
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	89 2b       	or	r24, r25
    119c:	82 83       	std	Z+2, r24	; 0x02
    119e:	5d c0       	rjmp	.+186    	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 1:
			ptr ->PORT_R.bits.bit1 = Copy_u8Value;
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	e9 81       	ldd	r30, Y+1	; 0x01
    11a6:	fa 81       	ldd	r31, Y+2	; 0x02
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	98 2f       	mov	r25, r24
    11ac:	99 0f       	add	r25, r25
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	89 2b       	or	r24, r25
    11b4:	82 83       	std	Z+2, r24	; 0x02
    11b6:	51 c0       	rjmp	.+162    	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 2:
			ptr ->PORT_R.bits.bit2 = Copy_u8Value;
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	98 2f       	mov	r25, r24
    11c4:	99 0f       	add	r25, r25
    11c6:	99 0f       	add	r25, r25
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	8b 7f       	andi	r24, 0xFB	; 251
    11cc:	89 2b       	or	r24, r25
    11ce:	82 83       	std	Z+2, r24	; 0x02
    11d0:	44 c0       	rjmp	.+136    	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 3:
			ptr ->PORT_R.bits.bit3 = Copy_u8Value;
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	81 70       	andi	r24, 0x01	; 1
    11dc:	98 2f       	mov	r25, r24
    11de:	99 0f       	add	r25, r25
    11e0:	99 0f       	add	r25, r25
    11e2:	99 0f       	add	r25, r25
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	89 2b       	or	r24, r25
    11ea:	82 83       	std	Z+2, r24	; 0x02
    11ec:	36 c0       	rjmp	.+108    	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 4:
			ptr ->PORT_R.bits.bit4 = Copy_u8Value;
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	98 2f       	mov	r25, r24
    11fa:	92 95       	swap	r25
    11fc:	90 7f       	andi	r25, 0xF0	; 240
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	8f 7e       	andi	r24, 0xEF	; 239
    1202:	89 2b       	or	r24, r25
    1204:	82 83       	std	Z+2, r24	; 0x02
    1206:	29 c0       	rjmp	.+82     	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 5:
			ptr ->PORT_R.bits.bit5 = Copy_u8Value;
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	81 70       	andi	r24, 0x01	; 1
    1212:	98 2f       	mov	r25, r24
    1214:	92 95       	swap	r25
    1216:	99 0f       	add	r25, r25
    1218:	90 7e       	andi	r25, 0xE0	; 224
    121a:	82 81       	ldd	r24, Z+2	; 0x02
    121c:	8f 7d       	andi	r24, 0xDF	; 223
    121e:	89 2b       	or	r24, r25
    1220:	82 83       	std	Z+2, r24	; 0x02
    1222:	1b c0       	rjmp	.+54     	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 6:
			ptr ->PORT_R.bits.bit6 = Copy_u8Value;
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	98 2f       	mov	r25, r24
    1230:	92 95       	swap	r25
    1232:	99 0f       	add	r25, r25
    1234:	99 0f       	add	r25, r25
    1236:	90 7c       	andi	r25, 0xC0	; 192
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	8f 7b       	andi	r24, 0xBF	; 191
    123c:	89 2b       	or	r24, r25
    123e:	82 83       	std	Z+2, r24	; 0x02
    1240:	0c c0       	rjmp	.+24     	; 0x125a <DIO_voidSetPinValue+0x156>
			break;
		case 7:
			ptr ->PORT_R.bits.bit7 = Copy_u8Value;
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	e9 81       	ldd	r30, Y+1	; 0x01
    1248:	fa 81       	ldd	r31, Y+2	; 0x02
    124a:	98 2f       	mov	r25, r24
    124c:	97 95       	ror	r25
    124e:	99 27       	eor	r25, r25
    1250:	97 95       	ror	r25
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	8f 77       	andi	r24, 0x7F	; 127
    1256:	89 2b       	or	r24, r25
    1258:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
}
    125a:	26 96       	adiw	r28, 0x06	; 6
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	27 97       	sbiw	r28, 0x07	; 7
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	9b 83       	std	Y+3, r25	; 0x03
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	6c 83       	std	Y+4, r22	; 0x04
	u8 pinValue;
	switch(Copy_u8PinId)
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3f 83       	std	Y+7, r19	; 0x07
    128e:	2e 83       	std	Y+6, r18	; 0x06
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	9f 81       	ldd	r25, Y+7	; 0x07
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	09 f4       	brne	.+2      	; 0x129c <DIO_voidGetPinValue+0x30>
    129a:	3e c0       	rjmp	.+124    	; 0x1318 <DIO_voidGetPinValue+0xac>
    129c:	2e 81       	ldd	r18, Y+6	; 0x06
    129e:	3f 81       	ldd	r19, Y+7	; 0x07
    12a0:	24 30       	cpi	r18, 0x04	; 4
    12a2:	31 05       	cpc	r19, r1
    12a4:	7c f4       	brge	.+30     	; 0x12c4 <DIO_voidGetPinValue+0x58>
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	9f 81       	ldd	r25, Y+7	; 0x07
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	29 f1       	breq	.+74     	; 0x12fa <DIO_voidGetPinValue+0x8e>
    12b0:	2e 81       	ldd	r18, Y+6	; 0x06
    12b2:	3f 81       	ldd	r19, Y+7	; 0x07
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	3c f5       	brge	.+78     	; 0x1308 <DIO_voidGetPinValue+0x9c>
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	b1 f0       	breq	.+44     	; 0x12ee <DIO_voidGetPinValue+0x82>
    12c2:	55 c0       	rjmp	.+170    	; 0x136e <DIO_voidGetPinValue+0x102>
    12c4:	2e 81       	ldd	r18, Y+6	; 0x06
    12c6:	3f 81       	ldd	r19, Y+7	; 0x07
    12c8:	25 30       	cpi	r18, 0x05	; 5
    12ca:	31 05       	cpc	r19, r1
    12cc:	b1 f1       	breq	.+108    	; 0x133a <DIO_voidGetPinValue+0xce>
    12ce:	8e 81       	ldd	r24, Y+6	; 0x06
    12d0:	9f 81       	ldd	r25, Y+7	; 0x07
    12d2:	85 30       	cpi	r24, 0x05	; 5
    12d4:	91 05       	cpc	r25, r1
    12d6:	4c f1       	brlt	.+82     	; 0x132a <DIO_voidGetPinValue+0xbe>
    12d8:	2e 81       	ldd	r18, Y+6	; 0x06
    12da:	3f 81       	ldd	r19, Y+7	; 0x07
    12dc:	26 30       	cpi	r18, 0x06	; 6
    12de:	31 05       	cpc	r19, r1
    12e0:	a9 f1       	breq	.+106    	; 0x134c <DIO_voidGetPinValue+0xe0>
    12e2:	8e 81       	ldd	r24, Y+6	; 0x06
    12e4:	9f 81       	ldd	r25, Y+7	; 0x07
    12e6:	87 30       	cpi	r24, 0x07	; 7
    12e8:	91 05       	cpc	r25, r1
    12ea:	d1 f1       	breq	.+116    	; 0x1360 <DIO_voidGetPinValue+0xf4>
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <DIO_voidGetPinValue+0x102>
		{
	case 0:
				pinValue =  ptr ->PIN_R.bits.bit0 ;
    12ee:	ea 81       	ldd	r30, Y+2	; 0x02
    12f0:	fb 81       	ldd	r31, Y+3	; 0x03
    12f2:	80 81       	ld	r24, Z
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	3a c0       	rjmp	.+116    	; 0x136e <DIO_voidGetPinValue+0x102>
				break;
			case 1:
				pinValue =  ptr ->PIN_R.bits.bit1;
    12fa:	ea 81       	ldd	r30, Y+2	; 0x02
    12fc:	fb 81       	ldd	r31, Y+3	; 0x03
    12fe:	80 81       	ld	r24, Z
    1300:	86 95       	lsr	r24
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	33 c0       	rjmp	.+102    	; 0x136e <DIO_voidGetPinValue+0x102>
				break;
			case 2:
				return ptr ->PIN_R.bits.bit2;
    1308:	ea 81       	ldd	r30, Y+2	; 0x02
    130a:	fb 81       	ldd	r31, Y+3	; 0x03
    130c:	80 81       	ld	r24, Z
    130e:	86 95       	lsr	r24
    1310:	86 95       	lsr	r24
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	2d c0       	rjmp	.+90     	; 0x1372 <DIO_voidGetPinValue+0x106>
				break;
			case 3:
				return ptr ->PIN_R.bits.bit3;
    1318:	ea 81       	ldd	r30, Y+2	; 0x02
    131a:	fb 81       	ldd	r31, Y+3	; 0x03
    131c:	80 81       	ld	r24, Z
    131e:	86 95       	lsr	r24
    1320:	86 95       	lsr	r24
    1322:	86 95       	lsr	r24
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	24 c0       	rjmp	.+72     	; 0x1372 <DIO_voidGetPinValue+0x106>
				break;
			case 4:
				return ptr ->PIN_R.bits.bit4;
    132a:	ea 81       	ldd	r30, Y+2	; 0x02
    132c:	fb 81       	ldd	r31, Y+3	; 0x03
    132e:	80 81       	ld	r24, Z
    1330:	82 95       	swap	r24
    1332:	8f 70       	andi	r24, 0x0F	; 15
    1334:	81 70       	andi	r24, 0x01	; 1
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	1c c0       	rjmp	.+56     	; 0x1372 <DIO_voidGetPinValue+0x106>
				break;
			case 5:
				pinValue = ptr ->PIN_R.bits.bit5;
    133a:	ea 81       	ldd	r30, Y+2	; 0x02
    133c:	fb 81       	ldd	r31, Y+3	; 0x03
    133e:	80 81       	ld	r24, Z
    1340:	82 95       	swap	r24
    1342:	86 95       	lsr	r24
    1344:	87 70       	andi	r24, 0x07	; 7
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	11 c0       	rjmp	.+34     	; 0x136e <DIO_voidGetPinValue+0x102>
				break;
			case 6:
				pinValue = ptr ->PIN_R.bits.bit6;
    134c:	ea 81       	ldd	r30, Y+2	; 0x02
    134e:	fb 81       	ldd	r31, Y+3	; 0x03
    1350:	80 81       	ld	r24, Z
    1352:	82 95       	swap	r24
    1354:	86 95       	lsr	r24
    1356:	86 95       	lsr	r24
    1358:	83 70       	andi	r24, 0x03	; 3
    135a:	81 70       	andi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	07 c0       	rjmp	.+14     	; 0x136e <DIO_voidGetPinValue+0x102>
				break;
			case 7:
				pinValue = ptr ->PIN_R.bits.bit7;
    1360:	ea 81       	ldd	r30, Y+2	; 0x02
    1362:	fb 81       	ldd	r31, Y+3	; 0x03
    1364:	80 81       	ld	r24, Z
    1366:	88 1f       	adc	r24, r24
    1368:	88 27       	eor	r24, r24
    136a:	88 1f       	adc	r24, r24
    136c:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		return pinValue;
    136e:	99 81       	ldd	r25, Y+1	; 0x01
    1370:	9d 83       	std	Y+5, r25	; 0x05
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1374:	27 96       	adiw	r28, 0x07	; 7
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(GPIO_REGISTERS* ptr, u8 Copy_u8Direction)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <DIO_voidSetPortDirection+0x6>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->direction.ALL_BITS = Copy_u8Direction;
    1398:	e9 81       	ldd	r30, Y+1	; 0x01
    139a:	fa 81       	ldd	r31, Y+2	; 0x02
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 83       	std	Z+1, r24	; 0x01
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(GPIO_REGISTERS* ptr, u8 Copy_u8Value)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_voidSetPortValue+0x6>
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->PORT_R.ALL_BITS = Copy_u8Value;
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	82 83       	std	Z+2, r24	; 0x02
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(GPIO_REGISTERS* ptr)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <DIO_voidGetPortValue+0x6>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
	return ptr -> PORT_R.ALL_BITS;
    13e0:	e9 81       	ldd	r30, Y+1	; 0x01
    13e2:	fa 81       	ldd	r31, Y+2	; 0x02
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <LCD_void_Init>:
#include"util/delay.h"
#include<string.h>
#include"BIT_MATH.h"

void LCD_void_Init(void)
{
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	c4 55       	subi	r28, 0x54	; 84
    13fe:	d0 40       	sbci	r29, 0x00	; 0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
#if(LCD_MODE== _4_BIT_MODE)
	DIO_voidSetPinDirection(LCD_PIN4_PORT, LCD_PIN4_PIN, 1);
    140a:	83 e3       	ldi	r24, 0x33	; 51
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	64 e0       	ldi	r22, 0x04	; 4
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN5_PORT, LCD_PIN5_PIN, 1);
    1416:	83 e3       	ldi	r24, 0x33	; 51
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	65 e0       	ldi	r22, 0x05	; 5
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN6_PORT, LCD_PIN6_PIN, 1);
    1422:	83 e3       	ldi	r24, 0x33	; 51
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	66 e0       	ldi	r22, 0x06	; 6
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN7_PORT, LCD_PIN7_PIN, 1);
    142e:	83 e3       	ldi	r24, 0x33	; 51
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	67 e0       	ldi	r22, 0x07	; 7
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT, EN_PIN, 1);
    143a:	80 e3       	ldi	r24, 0x30	; 48
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RS_PORT, RS_PIN, 1);
    1446:	80 e3       	ldi	r24, 0x30	; 48
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(RS_PORT, RS_PIN, 0);
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
    145e:	fe 01       	movw	r30, r28
    1460:	ef 5a       	subi	r30, 0xAF	; 175
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a8 ec       	ldi	r26, 0xC8	; 200
    146a:	b2 e4       	ldi	r27, 0x42	; 66
    146c:	80 83       	st	Z, r24
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	a2 83       	std	Z+2, r26	; 0x02
    1472:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1474:	8e 01       	movw	r16, r28
    1476:	03 5b       	subi	r16, 0xB3	; 179
    1478:	1f 4f       	sbci	r17, 0xFF	; 255
    147a:	fe 01       	movw	r30, r28
    147c:	ef 5a       	subi	r30, 0xAF	; 175
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a e7       	ldi	r20, 0x7A	; 122
    148e:	53 e4       	ldi	r21, 0x43	; 67
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	f8 01       	movw	r30, r16
    149a:	80 83       	st	Z, r24
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	a2 83       	std	Z+2, r26	; 0x02
    14a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14a2:	fe 01       	movw	r30, r28
    14a4:	e3 5b       	subi	r30, 0xB3	; 179
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	44 f4       	brge	.+16     	; 0x14d0 <LCD_void_Init+0xe0>
		__ticks = 1;
    14c0:	fe 01       	movw	r30, r28
    14c2:	e5 5b       	subi	r30, 0xB5	; 181
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	80 83       	st	Z, r24
    14ce:	64 c0       	rjmp	.+200    	; 0x1598 <LCD_void_Init+0x1a8>
	else if (__tmp > 65535)
    14d0:	fe 01       	movw	r30, r28
    14d2:	e3 5b       	subi	r30, 0xB3	; 179
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	3f ef       	ldi	r19, 0xFF	; 255
    14e2:	4f e7       	ldi	r20, 0x7F	; 127
    14e4:	57 e4       	ldi	r21, 0x47	; 71
    14e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	0c f0       	brlt	.+2      	; 0x14f0 <LCD_void_Init+0x100>
    14ee:	43 c0       	rjmp	.+134    	; 0x1576 <LCD_void_Init+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f0:	fe 01       	movw	r30, r28
    14f2:	ef 5a       	subi	r30, 0xAF	; 175
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	60 81       	ld	r22, Z
    14f8:	71 81       	ldd	r23, Z+1	; 0x01
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 e4       	ldi	r21, 0x41	; 65
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8e 01       	movw	r16, r28
    1510:	05 5b       	subi	r16, 0xB5	; 181
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	bc 01       	movw	r22, r24
    1516:	cd 01       	movw	r24, r26
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	f8 01       	movw	r30, r16
    1522:	91 83       	std	Z+1, r25	; 0x01
    1524:	80 83       	st	Z, r24
    1526:	1f c0       	rjmp	.+62     	; 0x1566 <LCD_void_Init+0x176>
    1528:	fe 01       	movw	r30, r28
    152a:	e7 5b       	subi	r30, 0xB7	; 183
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	89 e1       	ldi	r24, 0x19	; 25
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1536:	fe 01       	movw	r30, r28
    1538:	e7 5b       	subi	r30, 0xB7	; 183
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <LCD_void_Init+0x150>
    1544:	fe 01       	movw	r30, r28
    1546:	e7 5b       	subi	r30, 0xB7	; 183
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154e:	de 01       	movw	r26, r28
    1550:	a5 5b       	subi	r26, 0xB5	; 181
    1552:	bf 4f       	sbci	r27, 0xFF	; 255
    1554:	fe 01       	movw	r30, r28
    1556:	e5 5b       	subi	r30, 0xB5	; 181
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	9c 93       	st	X, r25
    1564:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1566:	fe 01       	movw	r30, r28
    1568:	e5 5b       	subi	r30, 0xB5	; 181
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	d1 f6       	brne	.-76     	; 0x1528 <LCD_void_Init+0x138>
    1574:	27 c0       	rjmp	.+78     	; 0x15c4 <LCD_void_Init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	8e 01       	movw	r16, r28
    1578:	05 5b       	subi	r16, 0xB5	; 181
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	fe 01       	movw	r30, r28
    157e:	e3 5b       	subi	r30, 0xB3	; 179
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	de 01       	movw	r26, r28
    159a:	a9 5b       	subi	r26, 0xB9	; 185
    159c:	bf 4f       	sbci	r27, 0xFF	; 255
    159e:	fe 01       	movw	r30, r28
    15a0:	e5 5b       	subi	r30, 0xB5	; 181
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	8d 93       	st	X+, r24
    15aa:	9c 93       	st	X, r25
    15ac:	fe 01       	movw	r30, r28
    15ae:	e9 5b       	subi	r30, 0xB9	; 185
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_void_Init+0x1c6>
    15ba:	fe 01       	movw	r30, r28
    15bc:	e9 5b       	subi	r30, 0xB9	; 185
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	80 83       	st	Z, r24


	_delay_ms(100);
	LCD_void_sendCommand(LCD_RETURN_H);
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    15ca:	fe 01       	movw	r30, r28
    15cc:	ed 5b       	subi	r30, 0xBD	; 189
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e2       	ldi	r26, 0x20	; 32
    15d6:	b1 e4       	ldi	r27, 0x41	; 65
    15d8:	80 83       	st	Z, r24
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	a2 83       	std	Z+2, r26	; 0x02
    15de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	8e 01       	movw	r16, r28
    15e2:	01 5c       	subi	r16, 0xC1	; 193
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	fe 01       	movw	r30, r28
    15e8:	ed 5b       	subi	r30, 0xBD	; 189
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4a e7       	ldi	r20, 0x7A	; 122
    15fa:	53 e4       	ldi	r21, 0x43	; 67
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	f8 01       	movw	r30, r16
    1606:	80 83       	st	Z, r24
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	a2 83       	std	Z+2, r26	; 0x02
    160c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    160e:	fe 01       	movw	r30, r28
    1610:	ff 96       	adiw	r30, 0x3f	; 63
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	2c f4       	brge	.+10     	; 0x1634 <LCD_void_Init+0x244>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9e af       	std	Y+62, r25	; 0x3e
    1630:	8d af       	std	Y+61, r24	; 0x3d
    1632:	46 c0       	rjmp	.+140    	; 0x16c0 <LCD_void_Init+0x2d0>
	else if (__tmp > 65535)
    1634:	fe 01       	movw	r30, r28
    1636:	ff 96       	adiw	r30, 0x3f	; 63
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	64 f5       	brge	.+88     	; 0x16a8 <LCD_void_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	fe 01       	movw	r30, r28
    1652:	ed 5b       	subi	r30, 0xBD	; 189
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e2       	ldi	r20, 0x20	; 32
    1664:	51 e4       	ldi	r21, 0x41	; 65
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9e af       	std	Y+62, r25	; 0x3e
    167c:	8d af       	std	Y+61, r24	; 0x3d
    167e:	0f c0       	rjmp	.+30     	; 0x169e <LCD_void_Init+0x2ae>
    1680:	89 e1       	ldi	r24, 0x19	; 25
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9c af       	std	Y+60, r25	; 0x3c
    1686:	8b af       	std	Y+59, r24	; 0x3b
    1688:	8b ad       	ldd	r24, Y+59	; 0x3b
    168a:	9c ad       	ldd	r25, Y+60	; 0x3c
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_void_Init+0x29c>
    1690:	9c af       	std	Y+60, r25	; 0x3c
    1692:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1694:	8d ad       	ldd	r24, Y+61	; 0x3d
    1696:	9e ad       	ldd	r25, Y+62	; 0x3e
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	9e af       	std	Y+62, r25	; 0x3e
    169c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169e:	8d ad       	ldd	r24, Y+61	; 0x3d
    16a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	69 f7       	brne	.-38     	; 0x1680 <LCD_void_Init+0x290>
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <LCD_void_Init+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a8:	fe 01       	movw	r30, r28
    16aa:	ff 96       	adiw	r30, 0x3f	; 63
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e af       	std	Y+62, r25	; 0x3e
    16be:	8d af       	std	Y+61, r24	; 0x3d
    16c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16c4:	9a af       	std	Y+58, r25	; 0x3a
    16c6:	89 af       	std	Y+57, r24	; 0x39
    16c8:	89 ad       	ldd	r24, Y+57	; 0x39
    16ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_void_Init+0x2dc>
    16d0:	9a af       	std	Y+58, r25	; 0x3a
    16d2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_void_sendCommand(FNC_SET_FOUR_BIT_MODE);
    16d4:	88 e2       	ldi	r24, 0x28	; 40
    16d6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e8       	ldi	r26, 0x80	; 128
    16e0:	bf e3       	ldi	r27, 0x3F	; 63
    16e2:	8d ab       	std	Y+53, r24	; 0x35
    16e4:	9e ab       	std	Y+54, r25	; 0x36
    16e6:	af ab       	std	Y+55, r26	; 0x37
    16e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6d a9       	ldd	r22, Y+53	; 0x35
    16ec:	7e a9       	ldd	r23, Y+54	; 0x36
    16ee:	8f a9       	ldd	r24, Y+55	; 0x37
    16f0:	98 ad       	ldd	r25, Y+56	; 0x38
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a e7       	ldi	r20, 0x7A	; 122
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	89 ab       	std	Y+49, r24	; 0x31
    1704:	9a ab       	std	Y+50, r25	; 0x32
    1706:	ab ab       	std	Y+51, r26	; 0x33
    1708:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    170a:	69 a9       	ldd	r22, Y+49	; 0x31
    170c:	7a a9       	ldd	r23, Y+50	; 0x32
    170e:	8b a9       	ldd	r24, Y+51	; 0x33
    1710:	9c a9       	ldd	r25, Y+52	; 0x34
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <LCD_void_Init+0x33c>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	98 ab       	std	Y+48, r25	; 0x30
    1728:	8f a7       	std	Y+47, r24	; 0x2f
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <LCD_void_Init+0x3ba>
	else if (__tmp > 65535)
    172c:	69 a9       	ldd	r22, Y+49	; 0x31
    172e:	7a a9       	ldd	r23, Y+50	; 0x32
    1730:	8b a9       	ldd	r24, Y+51	; 0x33
    1732:	9c a9       	ldd	r25, Y+52	; 0x34
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <LCD_void_Init+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6d a9       	ldd	r22, Y+53	; 0x35
    1746:	7e a9       	ldd	r23, Y+54	; 0x36
    1748:	8f a9       	ldd	r24, Y+55	; 0x37
    174a:	98 ad       	ldd	r25, Y+56	; 0x38
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
    176c:	0f c0       	rjmp	.+30     	; 0x178c <LCD_void_Init+0x39c>
    176e:	89 e1       	ldi	r24, 0x19	; 25
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9e a7       	std	Y+46, r25	; 0x2e
    1774:	8d a7       	std	Y+45, r24	; 0x2d
    1776:	8d a5       	ldd	r24, Y+45	; 0x2d
    1778:	9e a5       	ldd	r25, Y+46	; 0x2e
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <LCD_void_Init+0x38a>
    177e:	9e a7       	std	Y+46, r25	; 0x2e
    1780:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8f a5       	ldd	r24, Y+47	; 0x2f
    1784:	98 a9       	ldd	r25, Y+48	; 0x30
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	98 ab       	std	Y+48, r25	; 0x30
    178a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8f a5       	ldd	r24, Y+47	; 0x2f
    178e:	98 a9       	ldd	r25, Y+48	; 0x30
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <LCD_void_Init+0x37e>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <LCD_void_Init+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	69 a9       	ldd	r22, Y+49	; 0x31
    1798:	7a a9       	ldd	r23, Y+50	; 0x32
    179a:	8b a9       	ldd	r24, Y+51	; 0x33
    179c:	9c a9       	ldd	r25, Y+52	; 0x34
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ac:	98 a9       	ldd	r25, Y+48	; 0x30
    17ae:	9c a7       	std	Y+44, r25	; 0x2c
    17b0:	8b a7       	std	Y+43, r24	; 0x2b
    17b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_void_Init+0x3c6>
    17ba:	9c a7       	std	Y+44, r25	; 0x2c
    17bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_void_sendCommand(CURSOR_ON_DISPLAY_ON);
    17be:	8e e0       	ldi	r24, 0x0E	; 14
    17c0:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e8       	ldi	r26, 0x80	; 128
    17ca:	bf e3       	ldi	r27, 0x3F	; 63
    17cc:	8f a3       	std	Y+39, r24	; 0x27
    17ce:	98 a7       	std	Y+40, r25	; 0x28
    17d0:	a9 a7       	std	Y+41, r26	; 0x29
    17d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	6f a1       	ldd	r22, Y+39	; 0x27
    17d6:	78 a5       	ldd	r23, Y+40	; 0x28
    17d8:	89 a5       	ldd	r24, Y+41	; 0x29
    17da:	9a a5       	ldd	r25, Y+42	; 0x2a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a e7       	ldi	r20, 0x7A	; 122
    17e2:	53 e4       	ldi	r21, 0x43	; 67
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8b a3       	std	Y+35, r24	; 0x23
    17ee:	9c a3       	std	Y+36, r25	; 0x24
    17f0:	ad a3       	std	Y+37, r26	; 0x25
    17f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17f4:	6b a1       	ldd	r22, Y+35	; 0x23
    17f6:	7c a1       	ldd	r23, Y+36	; 0x24
    17f8:	8d a1       	ldd	r24, Y+37	; 0x25
    17fa:	9e a1       	ldd	r25, Y+38	; 0x26
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <LCD_void_Init+0x426>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9a a3       	std	Y+34, r25	; 0x22
    1812:	89 a3       	std	Y+33, r24	; 0x21
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <LCD_void_Init+0x4a4>
	else if (__tmp > 65535)
    1816:	6b a1       	ldd	r22, Y+35	; 0x23
    1818:	7c a1       	ldd	r23, Y+36	; 0x24
    181a:	8d a1       	ldd	r24, Y+37	; 0x25
    181c:	9e a1       	ldd	r25, Y+38	; 0x26
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <LCD_void_Init+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	6f a1       	ldd	r22, Y+39	; 0x27
    1830:	78 a5       	ldd	r23, Y+40	; 0x28
    1832:	89 a5       	ldd	r24, Y+41	; 0x29
    1834:	9a a5       	ldd	r25, Y+42	; 0x2a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9a a3       	std	Y+34, r25	; 0x22
    1854:	89 a3       	std	Y+33, r24	; 0x21
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <LCD_void_Init+0x486>
    1858:	89 e1       	ldi	r24, 0x19	; 25
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	98 a3       	std	Y+32, r25	; 0x20
    185e:	8f 8f       	std	Y+31, r24	; 0x1f
    1860:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1862:	98 a1       	ldd	r25, Y+32	; 0x20
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <LCD_void_Init+0x474>
    1868:	98 a3       	std	Y+32, r25	; 0x20
    186a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	89 a1       	ldd	r24, Y+33	; 0x21
    186e:	9a a1       	ldd	r25, Y+34	; 0x22
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9a a3       	std	Y+34, r25	; 0x22
    1874:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	89 a1       	ldd	r24, Y+33	; 0x21
    1878:	9a a1       	ldd	r25, Y+34	; 0x22
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <LCD_void_Init+0x468>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <LCD_void_Init+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6b a1       	ldd	r22, Y+35	; 0x23
    1882:	7c a1       	ldd	r23, Y+36	; 0x24
    1884:	8d a1       	ldd	r24, Y+37	; 0x25
    1886:	9e a1       	ldd	r25, Y+38	; 0x26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9a a3       	std	Y+34, r25	; 0x22
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	89 a1       	ldd	r24, Y+33	; 0x21
    1896:	9a a1       	ldd	r25, Y+34	; 0x22
    1898:	9e 8f       	std	Y+30, r25	; 0x1e
    189a:	8d 8f       	std	Y+29, r24	; 0x1d
    189c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    189e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_void_Init+0x4b0>
    18a4:	9e 8f       	std	Y+30, r25	; 0x1e
    18a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_void_sendCommand(LCD_CLEAR);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e2       	ldi	r26, 0x20	; 32
    18b4:	b1 e4       	ldi	r27, 0x41	; 65
    18b6:	89 8f       	std	Y+25, r24	; 0x19
    18b8:	9a 8f       	std	Y+26, r25	; 0x1a
    18ba:	ab 8f       	std	Y+27, r26	; 0x1b
    18bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	69 8d       	ldd	r22, Y+25	; 0x19
    18c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a e7       	ldi	r20, 0x7A	; 122
    18cc:	53 e4       	ldi	r21, 0x43	; 67
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8d 8b       	std	Y+21, r24	; 0x15
    18d8:	9e 8b       	std	Y+22, r25	; 0x16
    18da:	af 8b       	std	Y+23, r26	; 0x17
    18dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <LCD_void_Init+0x510>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9c 8b       	std	Y+20, r25	; 0x14
    18fc:	8b 8b       	std	Y+19, r24	; 0x13
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <LCD_void_Init+0x58e>
	else if (__tmp > 65535)
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <LCD_void_Init+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	69 8d       	ldd	r22, Y+25	; 0x19
    191a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <LCD_void_Init+0x570>
    1942:	89 e1       	ldi	r24, 0x19	; 25
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9a 8b       	std	Y+18, r25	; 0x12
    1948:	89 8b       	std	Y+17, r24	; 0x11
    194a:	89 89       	ldd	r24, Y+17	; 0x11
    194c:	9a 89       	ldd	r25, Y+18	; 0x12
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_void_Init+0x55e>
    1952:	9a 8b       	std	Y+18, r25	; 0x12
    1954:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9c 8b       	std	Y+20, r25	; 0x14
    195e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <LCD_void_Init+0x552>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <LCD_void_Init+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6d 89       	ldd	r22, Y+21	; 0x15
    196c:	7e 89       	ldd	r23, Y+22	; 0x16
    196e:	8f 89       	ldd	r24, Y+23	; 0x17
    1970:	98 8d       	ldd	r25, Y+24	; 0x18
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	98 8b       	std	Y+16, r25	; 0x10
    1984:	8f 87       	std	Y+15, r24	; 0x0f
    1986:	8f 85       	ldd	r24, Y+15	; 0x0f
    1988:	98 89       	ldd	r25, Y+16	; 0x10
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <LCD_void_Init+0x59a>
    198e:	98 8b       	std	Y+16, r25	; 0x10
    1990:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_void_sendCommand(ENTRY_MODE);
    1992:	86 e0       	ldi	r24, 0x06	; 6
    1994:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e8       	ldi	r26, 0x80	; 128
    199e:	bf e3       	ldi	r27, 0x3F	; 63
    19a0:	8b 87       	std	Y+11, r24	; 0x0b
    19a2:	9c 87       	std	Y+12, r25	; 0x0c
    19a4:	ad 87       	std	Y+13, r26	; 0x0d
    19a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a e7       	ldi	r20, 0x7A	; 122
    19b6:	53 e4       	ldi	r21, 0x43	; 67
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	8f 83       	std	Y+7, r24	; 0x07
    19c2:	98 87       	std	Y+8, r25	; 0x08
    19c4:	a9 87       	std	Y+9, r26	; 0x09
    19c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e8       	ldi	r20, 0x80	; 128
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19dc:	88 23       	and	r24, r24
    19de:	2c f4       	brge	.+10     	; 0x19ea <LCD_void_Init+0x5fa>
		__ticks = 1;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	3f c0       	rjmp	.+126    	; 0x1a68 <LCD_void_Init+0x678>
	else if (__tmp > 65535)
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	3f ef       	ldi	r19, 0xFF	; 255
    19f6:	4f e7       	ldi	r20, 0x7F	; 127
    19f8:	57 e4       	ldi	r21, 0x47	; 71
    19fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	4c f5       	brge	.+82     	; 0x1a54 <LCD_void_Init+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e2       	ldi	r20, 0x20	; 32
    1a10:	51 e4       	ldi	r21, 0x41	; 65
    1a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <LCD_void_Init+0x65a>
    1a2c:	89 e1       	ldi	r24, 0x19	; 25
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9c 83       	std	Y+4, r25	; 0x04
    1a32:	8b 83       	std	Y+3, r24	; 0x03
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_void_Init+0x648>
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	69 f7       	brne	.-38     	; 0x1a2c <LCD_void_Init+0x63c>
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <LCD_void_Init+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_void_Init+0x684>
    1a78:	9a 83       	std	Y+2, r25	; 0x02
    1a7a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LCD_void_sendCommand(ENTRY_MODE);
		_delay_ms(1);
	}
#endif
}
    1a7c:	cc 5a       	subi	r28, 0xAC	; 172
    1a7e:	df 4f       	sbci	r29, 0xFF	; 255
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <LCD_void_sendData>:



void LCD_void_sendData(u8 copy_u8data )
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	2f 97       	sbiw	r28, 0x0f	; 15
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT, RS_PIN, 1);
    1aaa:	80 e3       	ldi	r24, 0x30	; 48
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
    1ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab8:	0e 94 12 11 	call	0x2224	; 0x2224 <H_LCD_void_latchByte>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a0 e8       	ldi	r26, 0x80	; 128
    1ac2:	bf e3       	ldi	r27, 0x3F	; 63
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a e7       	ldi	r20, 0x7A	; 122
    1ada:	53 e4       	ldi	r21, 0x43	; 67
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <LCD_void_sendData+0x7a>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <LCD_void_sendData+0xf8>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <LCD_void_sendData+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <LCD_void_sendData+0xda>
    1b50:	89 e1       	ldi	r24, 0x19	; 25
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_void_sendData+0xc8>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <LCD_void_sendData+0xbc>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <LCD_void_sendData+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_void_sendData+0x104>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1ba0:	2f 96       	adiw	r28, 0x0f	; 15
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <LCD_void_sendCommand>:
void LCD_void_sendCommand(u8 copy_u8command)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	2f 97       	sbiw	r28, 0x0f	; 15
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT, RS_PIN, 0);
    1bc8:	80 e3       	ldi	r24, 0x30	; 48
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	0e 94 12 11 	call	0x2224	; 0x2224 <H_LCD_void_latchByte>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_void_sendCommand+0x7a>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_void_sendCommand+0xf8>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_void_sendCommand+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_void_sendCommand+0xda>
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_void_sendCommand+0xc8>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_void_sendCommand+0xbc>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_void_sendCommand+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_void_sendCommand+0x104>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/**********************/
}
    1cbe:	2f 96       	adiw	r28, 0x0f	; 15
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_void_sendString>:
void LCD_void_sendString(const s8 * pstr)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <LCD_void_sendString+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <LCD_void_sendString+0x8>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03

	int i=0;
    1ce0:	1a 82       	std	Y+2, r1	; 0x02
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_void_sendString+0x34>
	while(pstr[i] != '\0')
	{
		LCD_void_sendData(pstr[i]);
    1ce6:	29 81       	ldd	r18, Y+1	; 0x01
    1ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e2 0f       	add	r30, r18
    1cf2:	f3 1f       	adc	r31, r19
    1cf4:	80 81       	ld	r24, Z
    1cf6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
		i++;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_void_sendString(const s8 * pstr)
{

	int i=0;
	while(pstr[i] != '\0')
    1d04:	29 81       	ldd	r18, Y+1	; 0x01
    1d06:	3a 81       	ldd	r19, Y+2	; 0x02
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	e2 0f       	add	r30, r18
    1d10:	f3 1f       	adc	r31, r19
    1d12:	80 81       	ld	r24, Z
    1d14:	88 23       	and	r24, r24
    1d16:	39 f7       	brne	.-50     	; 0x1ce6 <LCD_void_sendString+0x16>
	{
		LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_void_sendIntNum>:

void LCD_void_sendIntNum(s32 copy_s32Num)
{
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	6f 97       	sbiw	r28, 0x1f	; 31
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	6c 8f       	std	Y+28, r22	; 0x1c
    1d40:	7d 8f       	std	Y+29, r23	; 0x1d
    1d42:	8e 8f       	std	Y+30, r24	; 0x1e
    1d44:	9f 8f       	std	Y+31, r25	; 0x1f

	if(copy_s32Num == 0)
    1d46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d48:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d4a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d4c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	a1 05       	cpc	r26, r1
    1d52:	b1 05       	cpc	r27, r1
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <LCD_void_sendIntNum+0x38>
	{
		LCD_void_sendData('0');
    1d56:	80 e3       	ldi	r24, 0x30	; 48
    1d58:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
    1d5c:	e5 c0       	rjmp	.+458    	; 0x1f28 <LCD_void_sendIntNum+0x202>
		return;
	}

	else if(copy_s32Num < 0)
    1d5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d62:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d64:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d66:	bb 23       	and	r27, r27
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <LCD_void_sendIntNum+0x46>
    1d6a:	84 c0       	rjmp	.+264    	; 0x1e74 <LCD_void_sendIntNum+0x14e>
	{
		LCD_void_sendData('-');
    1d6c:	8d e2       	ldi	r24, 0x2D	; 45
    1d6e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
		copy_s32Num *= -1;
    1d72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d76:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1d78:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d7a:	b0 95       	com	r27
    1d7c:	a0 95       	com	r26
    1d7e:	90 95       	com	r25
    1d80:	81 95       	neg	r24
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	af 4f       	sbci	r26, 0xFF	; 255
    1d86:	bf 4f       	sbci	r27, 0xFF	; 255
    1d88:	8c 8f       	std	Y+28, r24	; 0x1c
    1d8a:	9d 8f       	std	Y+29, r25	; 0x1d
    1d8c:	ae 8f       	std	Y+30, r26	; 0x1e
    1d8e:	bf 8f       	std	Y+31, r27	; 0x1f
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	bf e3       	ldi	r27, 0x3F	; 63
    1d98:	8b 87       	std	Y+11, r24	; 0x0b
    1d9a:	9c 87       	std	Y+12, r25	; 0x0c
    1d9c:	ad 87       	std	Y+13, r26	; 0x0d
    1d9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	53 e4       	ldi	r21, 0x43	; 67
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8f 83       	std	Y+7, r24	; 0x07
    1dba:	98 87       	std	Y+8, r25	; 0x08
    1dbc:	a9 87       	std	Y+9, r26	; 0x09
    1dbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <LCD_void_sendIntNum+0xbc>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <LCD_void_sendIntNum+0x13a>
	else if (__tmp > 65535)
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <LCD_void_sendIntNum+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_void_sendIntNum+0x11c>
    1e24:	89 e1       	ldi	r24, 0x19	; 25
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_void_sendIntNum+0x10a>
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <LCD_void_sendIntNum+0xfe>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <LCD_void_sendIntNum+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_void_sendIntNum+0x146>
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(0.5);
	}

	u8 num_digits[10]={0};
    1e74:	8a e0       	ldi	r24, 0x0A	; 10
    1e76:	fe 01       	movw	r30, r28
    1e78:	72 96       	adiw	r30, 0x12	; 18
    1e7a:	df 01       	movw	r26, r30
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	1d 92       	st	X+, r1
    1e80:	9a 95       	dec	r25
    1e82:	e9 f7       	brne	.-6      	; 0x1e7e <LCD_void_sendIntNum+0x158>
	u8 i;

	for( i=0; (copy_s32Num)!=0;i++)
    1e84:	19 8a       	std	Y+17, r1	; 0x11
    1e86:	2d c0       	rjmp	.+90     	; 0x1ee2 <LCD_void_sendIntNum+0x1bc>
	{
		num_digits[i] = (copy_s32Num % 10);
    1e88:	89 89       	ldd	r24, Y+17	; 0x11
    1e8a:	08 2f       	mov	r16, r24
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e90:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e92:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e94:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__divmodsi4>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	28 2f       	mov	r18, r24
    1eac:	ce 01       	movw	r24, r28
    1eae:	42 96       	adiw	r24, 0x12	; 18
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e0 0f       	add	r30, r16
    1eb4:	f1 1f       	adc	r31, r17
    1eb6:	20 83       	st	Z, r18
		copy_s32Num /= 10;
    1eb8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ebc:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1ebe:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__divmodsi4>
    1ed0:	da 01       	movw	r26, r20
    1ed2:	c9 01       	movw	r24, r18
    1ed4:	8c 8f       	std	Y+28, r24	; 0x1c
    1ed6:	9d 8f       	std	Y+29, r25	; 0x1d
    1ed8:	ae 8f       	std	Y+30, r26	; 0x1e
    1eda:	bf 8f       	std	Y+31, r27	; 0x1f
	}

	u8 num_digits[10]={0};
	u8 i;

	for( i=0; (copy_s32Num)!=0;i++)
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	8f 5f       	subi	r24, 0xFF	; 255
    1ee0:	89 8b       	std	Y+17, r24	; 0x11
    1ee2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ee4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ee6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1ee8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	a1 05       	cpc	r26, r1
    1eee:	b1 05       	cpc	r27, r1
    1ef0:	59 f6       	brne	.-106    	; 0x1e88 <LCD_void_sendIntNum+0x162>
	{
		num_digits[i] = (copy_s32Num % 10);
		copy_s32Num /= 10;
	}
	int j;
	for (j=i-1;j>=0;j--)
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	98 8b       	std	Y+16, r25	; 0x10
    1efc:	8f 87       	std	Y+15, r24	; 0x0f
    1efe:	10 c0       	rjmp	.+32     	; 0x1f20 <LCD_void_sendIntNum+0x1fa>
	{
		LCD_void_sendData(num_digits[j]+'0');
    1f00:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f02:	38 89       	ldd	r19, Y+16	; 0x10
    1f04:	ce 01       	movw	r24, r28
    1f06:	42 96       	adiw	r24, 0x12	; 18
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 5d       	subi	r24, 0xD0	; 208
    1f12:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
	{
		num_digits[i] = (copy_s32Num % 10);
		copy_s32Num /= 10;
	}
	int j;
	for (j=i-1;j>=0;j--)
    1f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f18:	98 89       	ldd	r25, Y+16	; 0x10
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	98 8b       	std	Y+16, r25	; 0x10
    1f1e:	8f 87       	std	Y+15, r24	; 0x0f
    1f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f22:	98 89       	ldd	r25, Y+16	; 0x10
    1f24:	99 23       	and	r25, r25
    1f26:	64 f7       	brge	.-40     	; 0x1f00 <LCD_void_sendIntNum+0x1da>
		LCD_void_sendData(num_digits[j]+'0');
	}



}
    1f28:	6f 96       	adiw	r28, 0x1f	; 31
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <LCD_void_gotoXY>:

void LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	61 97       	sbiw	r28, 0x11	; 17
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	88 8b       	std	Y+16, r24	; 0x10
    1f54:	69 8b       	std	Y+17, r22	; 0x11
	u8 copy_u8command;

	if(copy_u8Row>4||copy_u8Row<1||copy_u8Col>20||copy_u8Col<1)
    1f56:	88 89       	ldd	r24, Y+16	; 0x10
    1f58:	85 30       	cpi	r24, 0x05	; 5
    1f5a:	48 f4       	brcc	.+18     	; 0x1f6e <LCD_void_gotoXY+0x30>
    1f5c:	88 89       	ldd	r24, Y+16	; 0x10
    1f5e:	88 23       	and	r24, r24
    1f60:	31 f0       	breq	.+12     	; 0x1f6e <LCD_void_gotoXY+0x30>
    1f62:	89 89       	ldd	r24, Y+17	; 0x11
    1f64:	85 31       	cpi	r24, 0x15	; 21
    1f66:	18 f4       	brcc	.+6      	; 0x1f6e <LCD_void_gotoXY+0x30>
    1f68:	89 89       	ldd	r24, Y+17	; 0x11
    1f6a:	88 23       	and	r24, r24
    1f6c:	19 f4       	brne	.+6      	; 0x1f74 <LCD_void_gotoXY+0x36>
	{
		copy_u8command=0x80;
    1f6e:	80 e8       	ldi	r24, 0x80	; 128
    1f70:	8f 87       	std	Y+15, r24	; 0x0f
    1f72:	1b c0       	rjmp	.+54     	; 0x1faa <LCD_void_gotoXY+0x6c>
	}
	else if(copy_u8Row==1)
    1f74:	88 89       	ldd	r24, Y+16	; 0x10
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	21 f4       	brne	.+8      	; 0x1f82 <LCD_void_gotoXY+0x44>
	{
		copy_u8command=ADDRESS_ROW_1+copy_u8Col-1 ;
    1f7a:	89 89       	ldd	r24, Y+17	; 0x11
    1f7c:	81 58       	subi	r24, 0x81	; 129
    1f7e:	8f 87       	std	Y+15, r24	; 0x0f
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==2)
    1f82:	88 89       	ldd	r24, Y+16	; 0x10
    1f84:	82 30       	cpi	r24, 0x02	; 2
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <LCD_void_gotoXY+0x52>
	{
		copy_u8command=ADDRESS_ROW_2+copy_u8Col-1;
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	81 54       	subi	r24, 0x41	; 65
    1f8c:	8f 87       	std	Y+15, r24	; 0x0f
    1f8e:	0d c0       	rjmp	.+26     	; 0x1faa <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==3)
    1f90:	88 89       	ldd	r24, Y+16	; 0x10
    1f92:	83 30       	cpi	r24, 0x03	; 3
    1f94:	21 f4       	brne	.+8      	; 0x1f9e <LCD_void_gotoXY+0x60>
	{
		copy_u8command=ADDRESS_ROW_3+copy_u8Col-1;
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	8d 56       	subi	r24, 0x6D	; 109
    1f9a:	8f 87       	std	Y+15, r24	; 0x0f
    1f9c:	06 c0       	rjmp	.+12     	; 0x1faa <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==4)
    1f9e:	88 89       	ldd	r24, Y+16	; 0x10
    1fa0:	84 30       	cpi	r24, 0x04	; 4
    1fa2:	19 f4       	brne	.+6      	; 0x1faa <LCD_void_gotoXY+0x6c>
	{
		copy_u8command=ADDRESS_ROW_4+copy_u8Col-1;
    1fa4:	89 89       	ldd	r24, Y+17	; 0x11
    1fa6:	8d 52       	subi	r24, 0x2D	; 45
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_void_sendCommand(copy_u8command);
    1faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fac:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e8       	ldi	r26, 0x80	; 128
    1fb6:	bf e3       	ldi	r27, 0x3F	; 63
    1fb8:	8b 87       	std	Y+11, r24	; 0x0b
    1fba:	9c 87       	std	Y+12, r25	; 0x0c
    1fbc:	ad 87       	std	Y+13, r26	; 0x0d
    1fbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a e7       	ldi	r20, 0x7A	; 122
    1fce:	53 e4       	ldi	r21, 0x43	; 67
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8f 83       	std	Y+7, r24	; 0x07
    1fda:	98 87       	std	Y+8, r25	; 0x08
    1fdc:	a9 87       	std	Y+9, r26	; 0x09
    1fde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <LCD_void_gotoXY+0xc4>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <LCD_void_gotoXY+0x142>
	else if (__tmp > 65535)
    2002:	6f 81       	ldd	r22, Y+7	; 0x07
    2004:	78 85       	ldd	r23, Y+8	; 0x08
    2006:	89 85       	ldd	r24, Y+9	; 0x09
    2008:	9a 85       	ldd	r25, Y+10	; 0x0a
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <LCD_void_gotoXY+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	6b 85       	ldd	r22, Y+11	; 0x0b
    201c:	7c 85       	ldd	r23, Y+12	; 0x0c
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	9e 85       	ldd	r25, Y+14	; 0x0e
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9e 83       	std	Y+6, r25	; 0x06
    2040:	8d 83       	std	Y+5, r24	; 0x05
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <LCD_void_gotoXY+0x124>
    2044:	89 e1       	ldi	r24, 0x19	; 25
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_void_gotoXY+0x112>
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	8d 81       	ldd	r24, Y+5	; 0x05
    205a:	9e 81       	ldd	r25, Y+6	; 0x06
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9e 83       	std	Y+6, r25	; 0x06
    2060:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	9e 81       	ldd	r25, Y+6	; 0x06
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <LCD_void_gotoXY+0x106>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <LCD_void_gotoXY+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6f 81       	ldd	r22, Y+7	; 0x07
    206e:	78 85       	ldd	r23, Y+8	; 0x08
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	9a 81       	ldd	r25, Y+2	; 0x02
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_void_gotoXY+0x14e>
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2094:	61 96       	adiw	r28, 0x11	; 17
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <LCD_void_creatCustomChar>:
void LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	64 97       	sbiw	r28, 0x14	; 20
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	9b 8b       	std	Y+19, r25	; 0x13
    20bc:	8a 8b       	std	Y+18, r24	; 0x12
    20be:	6c 8b       	std	Y+20, r22	; 0x14
	/*SET CGRAM ADDRESS BASED ON copy_u8charCode */
	u8 command = (((copy_u8charCode & (TAKE_FIRST_3_BITS))*CHAR_CODES_OFFSET_IN_CGRAM) + LCD_CGRAM_ADDRESS);
    20c0:	8c 89       	ldd	r24, Y+20	; 0x14
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	87 70       	andi	r24, 0x07	; 7
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	08 96       	adiw	r24, 0x08	; 8
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	89 8b       	std	Y+17, r24	; 0x11
	LCD_void_sendCommand(command);
    20da:	89 89       	ldd	r24, Y+17	; 0x11
    20dc:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>

	/*WRITE DATA TO CG OR DD RAM*/
	for(int i=0; i<8; i++)
    20e0:	18 8a       	std	Y+16, r1	; 0x10
    20e2:	1f 86       	std	Y+15, r1	; 0x0f
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_void_creatCustomChar+0x5e>
	{
		LCD_void_sendData(ArrPattern[i]);
    20e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    20e8:	38 89       	ldd	r19, Y+16	; 0x10
    20ea:	8a 89       	ldd	r24, Y+18	; 0x12
    20ec:	9b 89       	ldd	r25, Y+19	; 0x13
    20ee:	fc 01       	movw	r30, r24
    20f0:	e2 0f       	add	r30, r18
    20f2:	f3 1f       	adc	r31, r19
    20f4:	80 81       	ld	r24, Z
    20f6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
	/*SET CGRAM ADDRESS BASED ON copy_u8charCode */
	u8 command = (((copy_u8charCode & (TAKE_FIRST_3_BITS))*CHAR_CODES_OFFSET_IN_CGRAM) + LCD_CGRAM_ADDRESS);
	LCD_void_sendCommand(command);

	/*WRITE DATA TO CG OR DD RAM*/
	for(int i=0; i<8; i++)
    20fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fc:	98 89       	ldd	r25, Y+16	; 0x10
    20fe:	01 96       	adiw	r24, 0x01	; 1
    2100:	98 8b       	std	Y+16, r25	; 0x10
    2102:	8f 87       	std	Y+15, r24	; 0x0f
    2104:	8f 85       	ldd	r24, Y+15	; 0x0f
    2106:	98 89       	ldd	r25, Y+16	; 0x10
    2108:	88 30       	cpi	r24, 0x08	; 8
    210a:	91 05       	cpc	r25, r1
    210c:	64 f3       	brlt	.-40     	; 0x20e6 <LCD_void_creatCustomChar+0x40>
	{
		LCD_void_sendData(ArrPattern[i]);
	}
	LCD_void_sendCommand(LCD_DDRAM_ADDRESS );
    210e:	80 e8       	ldi	r24, 0x80	; 128
    2110:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e8       	ldi	r26, 0x80	; 128
    211a:	bf e3       	ldi	r27, 0x3F	; 63
    211c:	8b 87       	std	Y+11, r24	; 0x0b
    211e:	9c 87       	std	Y+12, r25	; 0x0c
    2120:	ad 87       	std	Y+13, r26	; 0x0d
    2122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a e7       	ldi	r20, 0x7A	; 122
    2132:	53 e4       	ldi	r21, 0x43	; 67
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8f 83       	std	Y+7, r24	; 0x07
    213e:	98 87       	std	Y+8, r25	; 0x08
    2140:	a9 87       	std	Y+9, r26	; 0x09
    2142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_void_creatCustomChar+0xc0>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <LCD_void_creatCustomChar+0x13e>
	else if (__tmp > 65535)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <LCD_void_creatCustomChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2180:	7c 85       	ldd	r23, Y+12	; 0x0c
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <LCD_void_creatCustomChar+0x120>
    21a8:	89 e1       	ldi	r24, 0x19	; 25
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_void_creatCustomChar+0x10e>
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <LCD_void_creatCustomChar+0x102>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <LCD_void_creatCustomChar+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_void_creatCustomChar+0x14a>
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    21f8:	64 96       	adiw	r28, 0x14	; 20
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <LCD_void_displayCustomChar>:
void LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	0f 92       	push	r0
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	89 83       	std	Y+1, r24	; 0x01
	/*EXECUTE COMMAND WRITE DATA TO CG OR DD RAM WITH CHAR CODE*/
	LCD_void_sendData(copy_u8charCode);
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
}
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	e9 97       	sbiw	r28, 0x39	; 57
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	89 af       	std	Y+57, r24	; 0x39
#if(LCD_MODE== _4_BIT_MODE)

	DIO_voidSetPinValue(LCD_PIN7_PORT,LCD_PIN7_PIN,READBIT(copy_u8Byte,7));
    223a:	89 ad       	ldd	r24, Y+57	; 0x39
    223c:	28 2f       	mov	r18, r24
    223e:	22 1f       	adc	r18, r18
    2240:	22 27       	eor	r18, r18
    2242:	22 1f       	adc	r18, r18
    2244:	83 e3       	ldi	r24, 0x33	; 51
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	67 e0       	ldi	r22, 0x07	; 7
    224a:	42 2f       	mov	r20, r18
    224c:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN6_PORT,LCD_PIN6_PIN,READBIT(copy_u8Byte,6));
    2250:	89 ad       	ldd	r24, Y+57	; 0x39
    2252:	82 95       	swap	r24
    2254:	86 95       	lsr	r24
    2256:	86 95       	lsr	r24
    2258:	83 70       	andi	r24, 0x03	; 3
    225a:	28 2f       	mov	r18, r24
    225c:	21 70       	andi	r18, 0x01	; 1
    225e:	83 e3       	ldi	r24, 0x33	; 51
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	66 e0       	ldi	r22, 0x06	; 6
    2264:	42 2f       	mov	r20, r18
    2266:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN5_PORT,LCD_PIN5_PIN,READBIT(copy_u8Byte,5));
    226a:	89 ad       	ldd	r24, Y+57	; 0x39
    226c:	82 95       	swap	r24
    226e:	86 95       	lsr	r24
    2270:	87 70       	andi	r24, 0x07	; 7
    2272:	28 2f       	mov	r18, r24
    2274:	21 70       	andi	r18, 0x01	; 1
    2276:	83 e3       	ldi	r24, 0x33	; 51
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	65 e0       	ldi	r22, 0x05	; 5
    227c:	42 2f       	mov	r20, r18
    227e:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN4_PORT,LCD_PIN4_PIN,READBIT(copy_u8Byte,4));
    2282:	89 ad       	ldd	r24, Y+57	; 0x39
    2284:	82 95       	swap	r24
    2286:	8f 70       	andi	r24, 0x0F	; 15
    2288:	28 2f       	mov	r18, r24
    228a:	21 70       	andi	r18, 0x01	; 1
    228c:	83 e3       	ldi	r24, 0x33	; 51
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	64 e0       	ldi	r22, 0x04	; 4
    2292:	42 2f       	mov	r20, r18
    2294:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,1);
    2298:	80 e3       	ldi	r24, 0x30	; 48
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e8       	ldi	r26, 0x80	; 128
    22aa:	bf e3       	ldi	r27, 0x3F	; 63
    22ac:	8d ab       	std	Y+53, r24	; 0x35
    22ae:	9e ab       	std	Y+54, r25	; 0x36
    22b0:	af ab       	std	Y+55, r26	; 0x37
    22b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6d a9       	ldd	r22, Y+53	; 0x35
    22b6:	7e a9       	ldd	r23, Y+54	; 0x36
    22b8:	8f a9       	ldd	r24, Y+55	; 0x37
    22ba:	98 ad       	ldd	r25, Y+56	; 0x38
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a e7       	ldi	r20, 0x7A	; 122
    22c2:	53 e4       	ldi	r21, 0x43	; 67
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	89 ab       	std	Y+49, r24	; 0x31
    22ce:	9a ab       	std	Y+50, r25	; 0x32
    22d0:	ab ab       	std	Y+51, r26	; 0x33
    22d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22d4:	69 a9       	ldd	r22, Y+49	; 0x31
    22d6:	7a a9       	ldd	r23, Y+50	; 0x32
    22d8:	8b a9       	ldd	r24, Y+51	; 0x33
    22da:	9c a9       	ldd	r25, Y+52	; 0x34
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <H_LCD_void_latchByte+0xd2>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	98 ab       	std	Y+48, r25	; 0x30
    22f2:	8f a7       	std	Y+47, r24	; 0x2f
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <H_LCD_void_latchByte+0x150>
	else if (__tmp > 65535)
    22f6:	69 a9       	ldd	r22, Y+49	; 0x31
    22f8:	7a a9       	ldd	r23, Y+50	; 0x32
    22fa:	8b a9       	ldd	r24, Y+51	; 0x33
    22fc:	9c a9       	ldd	r25, Y+52	; 0x34
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <H_LCD_void_latchByte+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6d a9       	ldd	r22, Y+53	; 0x35
    2310:	7e a9       	ldd	r23, Y+54	; 0x36
    2312:	8f a9       	ldd	r24, Y+55	; 0x37
    2314:	98 ad       	ldd	r25, Y+56	; 0x38
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	98 ab       	std	Y+48, r25	; 0x30
    2334:	8f a7       	std	Y+47, r24	; 0x2f
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <H_LCD_void_latchByte+0x132>
    2338:	89 e1       	ldi	r24, 0x19	; 25
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9e a7       	std	Y+46, r25	; 0x2e
    233e:	8d a7       	std	Y+45, r24	; 0x2d
    2340:	8d a5       	ldd	r24, Y+45	; 0x2d
    2342:	9e a5       	ldd	r25, Y+46	; 0x2e
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <H_LCD_void_latchByte+0x120>
    2348:	9e a7       	std	Y+46, r25	; 0x2e
    234a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8f a5       	ldd	r24, Y+47	; 0x2f
    234e:	98 a9       	ldd	r25, Y+48	; 0x30
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	98 ab       	std	Y+48, r25	; 0x30
    2354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8f a5       	ldd	r24, Y+47	; 0x2f
    2358:	98 a9       	ldd	r25, Y+48	; 0x30
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <H_LCD_void_latchByte+0x114>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <H_LCD_void_latchByte+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	69 a9       	ldd	r22, Y+49	; 0x31
    2362:	7a a9       	ldd	r23, Y+50	; 0x32
    2364:	8b a9       	ldd	r24, Y+51	; 0x33
    2366:	9c a9       	ldd	r25, Y+52	; 0x34
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	98 ab       	std	Y+48, r25	; 0x30
    2372:	8f a7       	std	Y+47, r24	; 0x2f
    2374:	8f a5       	ldd	r24, Y+47	; 0x2f
    2376:	98 a9       	ldd	r25, Y+48	; 0x30
    2378:	9c a7       	std	Y+44, r25	; 0x2c
    237a:	8b a7       	std	Y+43, r24	; 0x2b
    237c:	8b a5       	ldd	r24, Y+43	; 0x2b
    237e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <H_LCD_void_latchByte+0x15c>
    2384:	9c a7       	std	Y+44, r25	; 0x2c
    2386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
    2388:	80 e3       	ldi	r24, 0x30	; 48
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e8       	ldi	r26, 0x80	; 128
    239a:	bf e3       	ldi	r27, 0x3F	; 63
    239c:	8f a3       	std	Y+39, r24	; 0x27
    239e:	98 a7       	std	Y+40, r25	; 0x28
    23a0:	a9 a7       	std	Y+41, r26	; 0x29
    23a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6f a1       	ldd	r22, Y+39	; 0x27
    23a6:	78 a5       	ldd	r23, Y+40	; 0x28
    23a8:	89 a5       	ldd	r24, Y+41	; 0x29
    23aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a e7       	ldi	r20, 0x7A	; 122
    23b2:	53 e4       	ldi	r21, 0x43	; 67
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8b a3       	std	Y+35, r24	; 0x23
    23be:	9c a3       	std	Y+36, r25	; 0x24
    23c0:	ad a3       	std	Y+37, r26	; 0x25
    23c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23c4:	6b a1       	ldd	r22, Y+35	; 0x23
    23c6:	7c a1       	ldd	r23, Y+36	; 0x24
    23c8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ca:	9e a1       	ldd	r25, Y+38	; 0x26
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <H_LCD_void_latchByte+0x1c2>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <H_LCD_void_latchByte+0x240>
	else if (__tmp > 65535)
    23e6:	6b a1       	ldd	r22, Y+35	; 0x23
    23e8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ea:	8d a1       	ldd	r24, Y+37	; 0x25
    23ec:	9e a1       	ldd	r25, Y+38	; 0x26
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <H_LCD_void_latchByte+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2400:	78 a5       	ldd	r23, Y+40	; 0x28
    2402:	89 a5       	ldd	r24, Y+41	; 0x29
    2404:	9a a5       	ldd	r25, Y+42	; 0x2a
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9a a3       	std	Y+34, r25	; 0x22
    2424:	89 a3       	std	Y+33, r24	; 0x21
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <H_LCD_void_latchByte+0x222>
    2428:	89 e1       	ldi	r24, 0x19	; 25
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	98 a3       	std	Y+32, r25	; 0x20
    242e:	8f 8f       	std	Y+31, r24	; 0x1f
    2430:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2432:	98 a1       	ldd	r25, Y+32	; 0x20
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <H_LCD_void_latchByte+0x210>
    2438:	98 a3       	std	Y+32, r25	; 0x20
    243a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	89 a1       	ldd	r24, Y+33	; 0x21
    243e:	9a a1       	ldd	r25, Y+34	; 0x22
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9a a3       	std	Y+34, r25	; 0x22
    2444:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	89 a1       	ldd	r24, Y+33	; 0x21
    2448:	9a a1       	ldd	r25, Y+34	; 0x22
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <H_LCD_void_latchByte+0x204>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <H_LCD_void_latchByte+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6b a1       	ldd	r22, Y+35	; 0x23
    2452:	7c a1       	ldd	r23, Y+36	; 0x24
    2454:	8d a1       	ldd	r24, Y+37	; 0x25
    2456:	9e a1       	ldd	r25, Y+38	; 0x26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	89 a1       	ldd	r24, Y+33	; 0x21
    2466:	9a a1       	ldd	r25, Y+34	; 0x22
    2468:	9e 8f       	std	Y+30, r25	; 0x1e
    246a:	8d 8f       	std	Y+29, r24	; 0x1d
    246c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <H_LCD_void_latchByte+0x24c>
    2474:	9e 8f       	std	Y+30, r25	; 0x1e
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_PIN7_PORT,LCD_PIN7_PIN,READBIT(copy_u8Byte,3));
    2478:	89 ad       	ldd	r24, Y+57	; 0x39
    247a:	86 95       	lsr	r24
    247c:	86 95       	lsr	r24
    247e:	86 95       	lsr	r24
    2480:	28 2f       	mov	r18, r24
    2482:	21 70       	andi	r18, 0x01	; 1
    2484:	83 e3       	ldi	r24, 0x33	; 51
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	67 e0       	ldi	r22, 0x07	; 7
    248a:	42 2f       	mov	r20, r18
    248c:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN6_PORT,LCD_PIN6_PIN,READBIT(copy_u8Byte,2));
    2490:	89 ad       	ldd	r24, Y+57	; 0x39
    2492:	86 95       	lsr	r24
    2494:	86 95       	lsr	r24
    2496:	28 2f       	mov	r18, r24
    2498:	21 70       	andi	r18, 0x01	; 1
    249a:	83 e3       	ldi	r24, 0x33	; 51
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	66 e0       	ldi	r22, 0x06	; 6
    24a0:	42 2f       	mov	r20, r18
    24a2:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN5_PORT,LCD_PIN5_PIN,READBIT(copy_u8Byte,1));
    24a6:	89 ad       	ldd	r24, Y+57	; 0x39
    24a8:	86 95       	lsr	r24
    24aa:	28 2f       	mov	r18, r24
    24ac:	21 70       	andi	r18, 0x01	; 1
    24ae:	83 e3       	ldi	r24, 0x33	; 51
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	65 e0       	ldi	r22, 0x05	; 5
    24b4:	42 2f       	mov	r20, r18
    24b6:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN4_PORT,LCD_PIN4_PIN,READBIT(copy_u8Byte,0));
    24ba:	89 ad       	ldd	r24, Y+57	; 0x39
    24bc:	28 2f       	mov	r18, r24
    24be:	21 70       	andi	r18, 0x01	; 1
    24c0:	83 e3       	ldi	r24, 0x33	; 51
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	64 e0       	ldi	r22, 0x04	; 4
    24c6:	42 2f       	mov	r20, r18
    24c8:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,1);
    24cc:	80 e3       	ldi	r24, 0x30	; 48
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	62 e0       	ldi	r22, 0x02	; 2
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	a0 e8       	ldi	r26, 0x80	; 128
    24de:	bf e3       	ldi	r27, 0x3F	; 63
    24e0:	89 8f       	std	Y+25, r24	; 0x19
    24e2:	9a 8f       	std	Y+26, r25	; 0x1a
    24e4:	ab 8f       	std	Y+27, r26	; 0x1b
    24e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a e7       	ldi	r20, 0x7A	; 122
    24f6:	53 e4       	ldi	r21, 0x43	; 67
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	8d 8b       	std	Y+21, r24	; 0x15
    2502:	9e 8b       	std	Y+22, r25	; 0x16
    2504:	af 8b       	std	Y+23, r26	; 0x17
    2506:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2508:	6d 89       	ldd	r22, Y+21	; 0x15
    250a:	7e 89       	ldd	r23, Y+22	; 0x16
    250c:	8f 89       	ldd	r24, Y+23	; 0x17
    250e:	98 8d       	ldd	r25, Y+24	; 0x18
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	2c f4       	brge	.+10     	; 0x252a <H_LCD_void_latchByte+0x306>
		__ticks = 1;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9c 8b       	std	Y+20, r25	; 0x14
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	3f c0       	rjmp	.+126    	; 0x25a8 <H_LCD_void_latchByte+0x384>
	else if (__tmp > 65535)
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	3f ef       	ldi	r19, 0xFF	; 255
    2536:	4f e7       	ldi	r20, 0x7F	; 127
    2538:	57 e4       	ldi	r21, 0x47	; 71
    253a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    253e:	18 16       	cp	r1, r24
    2540:	4c f5       	brge	.+82     	; 0x2594 <H_LCD_void_latchByte+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2542:	69 8d       	ldd	r22, Y+25	; 0x19
    2544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e2       	ldi	r20, 0x20	; 32
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	8b 8b       	std	Y+19, r24	; 0x13
    256a:	0f c0       	rjmp	.+30     	; 0x258a <H_LCD_void_latchByte+0x366>
    256c:	89 e1       	ldi	r24, 0x19	; 25
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9a 8b       	std	Y+18, r25	; 0x12
    2572:	89 8b       	std	Y+17, r24	; 0x11
    2574:	89 89       	ldd	r24, Y+17	; 0x11
    2576:	9a 89       	ldd	r25, Y+18	; 0x12
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <H_LCD_void_latchByte+0x354>
    257c:	9a 8b       	std	Y+18, r25	; 0x12
    257e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	9c 89       	ldd	r25, Y+20	; 0x14
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	9c 8b       	std	Y+20, r25	; 0x14
    2588:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258a:	8b 89       	ldd	r24, Y+19	; 0x13
    258c:	9c 89       	ldd	r25, Y+20	; 0x14
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	69 f7       	brne	.-38     	; 0x256c <H_LCD_void_latchByte+0x348>
    2592:	14 c0       	rjmp	.+40     	; 0x25bc <H_LCD_void_latchByte+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	98 8b       	std	Y+16, r25	; 0x10
    25ae:	8f 87       	std	Y+15, r24	; 0x0f
    25b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b2:	98 89       	ldd	r25, Y+16	; 0x10
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <H_LCD_void_latchByte+0x390>
    25b8:	98 8b       	std	Y+16, r25	; 0x10
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
    25bc:	80 e3       	ldi	r24, 0x30	; 48
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	62 e0       	ldi	r22, 0x02	; 2
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 82 08 	call	0x1104	; 0x1104 <DIO_voidSetPinValue>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e8       	ldi	r26, 0x80	; 128
    25ce:	bf e3       	ldi	r27, 0x3F	; 63
    25d0:	8b 87       	std	Y+11, r24	; 0x0b
    25d2:	9c 87       	std	Y+12, r25	; 0x0c
    25d4:	ad 87       	std	Y+13, r26	; 0x0d
    25d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	53 e4       	ldi	r21, 0x43	; 67
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8f 83       	std	Y+7, r24	; 0x07
    25f2:	98 87       	std	Y+8, r25	; 0x08
    25f4:	a9 87       	std	Y+9, r26	; 0x09
    25f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <H_LCD_void_latchByte+0x3f6>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <H_LCD_void_latchByte+0x474>
	else if (__tmp > 65535)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <H_LCD_void_latchByte+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6b 85       	ldd	r22, Y+11	; 0x0b
    2634:	7c 85       	ldd	r23, Y+12	; 0x0c
    2636:	8d 85       	ldd	r24, Y+13	; 0x0d
    2638:	9e 85       	ldd	r25, Y+14	; 0x0e
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	0f c0       	rjmp	.+30     	; 0x267a <H_LCD_void_latchByte+0x456>
    265c:	89 e1       	ldi	r24, 0x19	; 25
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <H_LCD_void_latchByte+0x444>
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9e 83       	std	Y+6, r25	; 0x06
    2678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <H_LCD_void_latchByte+0x438>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <H_LCD_void_latchByte+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <H_LCD_void_latchByte+0x480>
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
	_delay_ms(1);
#endif

}
    26ac:	e9 96       	adiw	r28, 0x39	; 57
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <LM35_init>:
#include"GPIO.h"
#include"ADC.h"


void LM35_init()
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <LM35_init+0x6>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <LM35_init+0x8>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
	ADC_CFG cfg = {AVCC, RIGHT_ADJUST, PRE_16, SINGLE_CONVERSION};
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	1a 82       	std	Y+2, r1	; 0x02
    26d0:	84 e0       	ldi	r24, 0x04	; 4
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	1c 82       	std	Y+4, r1	; 0x04
	ADC_init(&cfg);
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_init>
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LM35_getTemperature>:
u8 LM35_getTemperature(void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <LM35_getTemperature+0x6>
    26f2:	0f 92       	push	r0
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	/*set lm35 pin as input*/
	DIO_voidSetPinDirection(PERIPHRAL_A, 2, INPUT);
    26f8:	89 e3       	ldi	r24, 0x39	; 57
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	62 e0       	ldi	r22, 0x02	; 2
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_voidSetPinDirection>

	u16 digital_value;
	ADC_getDigitalValueSynchNonBlocking(CH_2, &digital_value);
    2704:	9e 01       	movw	r18, r28
    2706:	2e 5f       	subi	r18, 0xFE	; 254
    2708:	3f 4f       	sbci	r19, 0xFF	; 255
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <ADC_getDigitalValueSynchNonBlocking>

	u8 temp = (u8)(((digital_value * REF_VOLT_ms)/MAX_DIGITAL_VALUE)/10);
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	cc 01       	movw	r24, r24
    2718:	a0 e0       	ldi	r26, 0x00	; 0
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	28 e8       	ldi	r18, 0x88	; 136
    271e:	33 e1       	ldi	r19, 0x13	; 19
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	26 ef       	ldi	r18, 0xF6	; 246
    2732:	37 e2       	ldi	r19, 0x27	; 39
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    2740:	da 01       	movw	r26, r20
    2742:	c9 01       	movw	r24, r18
    2744:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    2746:	89 81       	ldd	r24, Y+1	; 0x01
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <Timer0_Init>:
static u16 ovf_counts_for_delay_fn;
static u16 ovf_count;
static u8 ovf_counts_for_delay_fn_CTC;
void (*Timer0_callback_fns[2]) (void) = {NULL};
void Timer0_Init(Timer0_cfg* cfg)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <Timer0_Init+0x6>
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
	/*CHOOSE MODE*/
	TIMER0_R_BASE->TCCR0.bits.bit6 = READBIT(cfg->mode, 0);
    2762:	a2 e5       	ldi	r26, 0x52	; 82
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e9 81       	ldd	r30, Y+1	; 0x01
    2768:	fa 81       	ldd	r31, Y+2	; 0x02
    276a:	80 81       	ld	r24, Z
    276c:	81 70       	andi	r24, 0x01	; 1
    276e:	81 70       	andi	r24, 0x01	; 1
    2770:	81 70       	andi	r24, 0x01	; 1
    2772:	81 70       	andi	r24, 0x01	; 1
    2774:	98 2f       	mov	r25, r24
    2776:	92 95       	swap	r25
    2778:	99 0f       	add	r25, r25
    277a:	99 0f       	add	r25, r25
    277c:	90 7c       	andi	r25, 0xC0	; 192
    277e:	11 96       	adiw	r26, 0x01	; 1
    2780:	8c 91       	ld	r24, X
    2782:	11 97       	sbiw	r26, 0x01	; 1
    2784:	8f 7b       	andi	r24, 0xBF	; 191
    2786:	89 2b       	or	r24, r25
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	8c 93       	st	X, r24
	TIMER0_R_BASE->TCCR0.bits.bit3 = READBIT(cfg->mode, 1);
    278c:	a2 e5       	ldi	r26, 0x52	; 82
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e9 81       	ldd	r30, Y+1	; 0x01
    2792:	fa 81       	ldd	r31, Y+2	; 0x02
    2794:	80 81       	ld	r24, Z
    2796:	86 95       	lsr	r24
    2798:	81 70       	andi	r24, 0x01	; 1
    279a:	81 70       	andi	r24, 0x01	; 1
    279c:	81 70       	andi	r24, 0x01	; 1
    279e:	81 70       	andi	r24, 0x01	; 1
    27a0:	98 2f       	mov	r25, r24
    27a2:	99 0f       	add	r25, r25
    27a4:	99 0f       	add	r25, r25
    27a6:	99 0f       	add	r25, r25
    27a8:	11 96       	adiw	r26, 0x01	; 1
    27aa:	8c 91       	ld	r24, X
    27ac:	11 97       	sbiw	r26, 0x01	; 1
    27ae:	87 7f       	andi	r24, 0xF7	; 247
    27b0:	89 2b       	or	r24, r25
    27b2:	11 96       	adiw	r26, 0x01	; 1
    27b4:	8c 93       	st	X, r24
    27b6:	11 97       	sbiw	r26, 0x01	; 1

	/*set  Force Output Compare*/
	if(cfg ->mode == T0_CTC || cfg->mode == Normal)
    27b8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ba:	fa 81       	ldd	r31, Y+2	; 0x02
    27bc:	80 81       	ld	r24, Z
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	29 f0       	breq	.+10     	; 0x27cc <Timer0_Init+0x78>
    27c2:	e9 81       	ldd	r30, Y+1	; 0x01
    27c4:	fa 81       	ldd	r31, Y+2	; 0x02
    27c6:	80 81       	ld	r24, Z
    27c8:	88 23       	and	r24, r24
    27ca:	31 f4       	brne	.+12     	; 0x27d8 <Timer0_Init+0x84>
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 1;
    27cc:	e2 e5       	ldi	r30, 0x52	; 82
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	81 81       	ldd	r24, Z+1	; 0x01
    27d2:	80 68       	ori	r24, 0x80	; 128
    27d4:	81 83       	std	Z+1, r24	; 0x01
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <Timer0_Init+0x8e>
	}
	else
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 0;
    27d8:	e2 e5       	ldi	r30, 0x52	; 82
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	81 81       	ldd	r24, Z+1	; 0x01
    27de:	8f 77       	andi	r24, 0x7F	; 127
    27e0:	81 83       	std	Z+1, r24	; 0x01
	}

	/*Compare Match Output Mode*/
	TIMER0_R_BASE ->TCCR0.bits.bit4 = READBIT(cfg ->CMP_MODE, 0);
    27e2:	a2 e5       	ldi	r26, 0x52	; 82
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	81 70       	andi	r24, 0x01	; 1
    27ee:	81 70       	andi	r24, 0x01	; 1
    27f0:	81 70       	andi	r24, 0x01	; 1
    27f2:	81 70       	andi	r24, 0x01	; 1
    27f4:	98 2f       	mov	r25, r24
    27f6:	92 95       	swap	r25
    27f8:	90 7f       	andi	r25, 0xF0	; 240
    27fa:	11 96       	adiw	r26, 0x01	; 1
    27fc:	8c 91       	ld	r24, X
    27fe:	11 97       	sbiw	r26, 0x01	; 1
    2800:	8f 7e       	andi	r24, 0xEF	; 239
    2802:	89 2b       	or	r24, r25
    2804:	11 96       	adiw	r26, 0x01	; 1
    2806:	8c 93       	st	X, r24
	TIMER0_R_BASE ->TCCR0.bits.bit5 = READBIT(cfg ->CMP_MODE, 1);
    2808:	a2 e5       	ldi	r26, 0x52	; 82
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e9 81       	ldd	r30, Y+1	; 0x01
    280e:	fa 81       	ldd	r31, Y+2	; 0x02
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	86 95       	lsr	r24
    2814:	81 70       	andi	r24, 0x01	; 1
    2816:	81 70       	andi	r24, 0x01	; 1
    2818:	81 70       	andi	r24, 0x01	; 1
    281a:	81 70       	andi	r24, 0x01	; 1
    281c:	98 2f       	mov	r25, r24
    281e:	92 95       	swap	r25
    2820:	99 0f       	add	r25, r25
    2822:	90 7e       	andi	r25, 0xE0	; 224
    2824:	11 96       	adiw	r26, 0x01	; 1
    2826:	8c 91       	ld	r24, X
    2828:	11 97       	sbiw	r26, 0x01	; 1
    282a:	8f 7d       	andi	r24, 0xDF	; 223
    282c:	89 2b       	or	r24, r25
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	8c 93       	st	X, r24


	/*select prescaler*/
	TIMER0_R_BASE->TCCR0.ALL_BITS |= (cfg ->pre & (111<<0));
    2832:	a2 e5       	ldi	r26, 0x52	; 82
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e2 e5       	ldi	r30, 0x52	; 82
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	81 81       	ldd	r24, Z+1	; 0x01
    283c:	98 2f       	mov	r25, r24
    283e:	e9 81       	ldd	r30, Y+1	; 0x01
    2840:	fa 81       	ldd	r31, Y+2	; 0x02
    2842:	81 81       	ldd	r24, Z+1	; 0x01
    2844:	8f 76       	andi	r24, 0x6F	; 111
    2846:	89 2b       	or	r24, r25
    2848:	11 96       	adiw	r26, 0x01	; 1
    284a:	8c 93       	st	X, r24
    284c:	11 97       	sbiw	r26, 0x01	; 1

	ovf_count=0;
    284e:	10 92 94 00 	sts	0x0094, r1
    2852:	10 92 93 00 	sts	0x0093, r1
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <Timer_start>:

void Timer_start(TIMER0_PRESCALER pre)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	0f 92       	push	r0
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_R_BASE->TCCR0.ALL_BITS &= (pre & ~(111<<0));
    286c:	a2 e5       	ldi	r26, 0x52	; 82
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e2 e5       	ldi	r30, 0x52	; 82
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	81 81       	ldd	r24, Z+1	; 0x01
    2876:	98 2f       	mov	r25, r24
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	80 79       	andi	r24, 0x90	; 144
    287c:	89 23       	and	r24, r25
    287e:	11 96       	adiw	r26, 0x01	; 1
    2880:	8c 93       	st	X, r24

	TIMER0_R_BASE->TCCR0.ALL_BITS |= (pre & (111<<0));
    2882:	a2 e5       	ldi	r26, 0x52	; 82
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e2 e5       	ldi	r30, 0x52	; 82
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	81 81       	ldd	r24, Z+1	; 0x01
    288c:	98 2f       	mov	r25, r24
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	8f 76       	andi	r24, 0x6F	; 111
    2892:	89 2b       	or	r24, r25
    2894:	11 96       	adiw	r26, 0x01	; 1
    2896:	8c 93       	st	X, r24
    2898:	11 97       	sbiw	r26, 0x01	; 1
	ovf_count=0;
    289a:	10 92 94 00 	sts	0x0094, r1
    289e:	10 92 93 00 	sts	0x0093, r1
}
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <Timer_stop>:

void Timer_stop()
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_R_BASE->TCCR0.ALL_BITS &= ~(111<<0);
    28b2:	a2 e5       	ldi	r26, 0x52	; 82
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e2 e5       	ldi	r30, 0x52	; 82
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	81 81       	ldd	r24, Z+1	; 0x01
    28bc:	80 79       	andi	r24, 0x90	; 144
    28be:	11 96       	adiw	r26, 0x01	; 1
    28c0:	8c 93       	st	X, r24
    28c2:	11 97       	sbiw	r26, 0x01	; 1
}
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <Timer_GetCounts>:

u16 Timer_GetCounts()
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	return ovf_count;
    28d2:	80 91 93 00 	lds	r24, 0x0093
    28d6:	90 91 94 00 	lds	r25, 0x0094
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <Timer0_delay>:

u8 ov_flag=0;
void Timer0_delay(void)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
	static u16 c=0;
	c++;
    28e8:	80 91 8f 00 	lds	r24, 0x008F
    28ec:	90 91 90 00 	lds	r25, 0x0090
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	90 93 90 00 	sts	0x0090, r25
    28f6:	80 93 8f 00 	sts	0x008F, r24
	if (c==ovf_counts_for_delay_fn)
    28fa:	20 91 8f 00 	lds	r18, 0x008F
    28fe:	30 91 90 00 	lds	r19, 0x0090
    2902:	80 91 91 00 	lds	r24, 0x0091
    2906:	90 91 92 00 	lds	r25, 0x0092
    290a:	28 17       	cp	r18, r24
    290c:	39 07       	cpc	r19, r25
    290e:	39 f4       	brne	.+14     	; 0x291e <Timer0_delay+0x3e>
	{
		ov_flag=1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	80 93 8e 00 	sts	0x008E, r24
		c=0;
    2916:	10 92 90 00 	sts	0x0090, r1
    291a:	10 92 8f 00 	sts	0x008F, r1
	}
}
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <Timer_setDelayTimeMilliSec>:
void Timer_setDelayTimeMilliSec(u32 delay_in_ms, Timer0_Mode mode)
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	63 97       	sbiw	r28, 0x13	; 19
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	6d 87       	std	Y+13, r22	; 0x0d
    293a:	7e 87       	std	Y+14, r23	; 0x0e
    293c:	8f 87       	std	Y+15, r24	; 0x0f
    293e:	98 8b       	std	Y+16, r25	; 0x10
    2940:	49 8b       	std	Y+17, r20	; 0x11
	/*too-much-delay*/
	Timer_start(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0));
    2942:	e2 e5       	ldi	r30, 0x52	; 82
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	81 81       	ldd	r24, Z+1	; 0x01
    2948:	8f 76       	andi	r24, 0x6F	; 111
    294a:	0e 94 30 14 	call	0x2860	; 0x2860 <Timer_start>
	u32 tick=(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0))/FCPU;
    294e:	e2 e5       	ldi	r30, 0x52	; 82
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	81 81       	ldd	r24, Z+1	; 0x01
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	8f 76       	andi	r24, 0x6F	; 111
    295a:	90 70       	andi	r25, 0x00	; 0
    295c:	9b 8b       	std	Y+19, r25	; 0x13
    295e:	8a 8b       	std	Y+18, r24	; 0x12
    2960:	8a 89       	ldd	r24, Y+18	; 0x12
    2962:	9b 89       	ldd	r25, Y+19	; 0x13
    2964:	99 23       	and	r25, r25
    2966:	2c f4       	brge	.+10     	; 0x2972 <Timer_setDelayTimeMilliSec+0x4e>
    2968:	8a 89       	ldd	r24, Y+18	; 0x12
    296a:	9b 89       	ldd	r25, Y+19	; 0x13
    296c:	0f 96       	adiw	r24, 0x0f	; 15
    296e:	9b 8b       	std	Y+19, r25	; 0x13
    2970:	8a 8b       	std	Y+18, r24	; 0x12
    2972:	8a 89       	ldd	r24, Y+18	; 0x12
    2974:	9b 89       	ldd	r25, Y+19	; 0x13
    2976:	95 95       	asr	r25
    2978:	87 95       	ror	r24
    297a:	95 95       	asr	r25
    297c:	87 95       	ror	r24
    297e:	95 95       	asr	r25
    2980:	87 95       	ror	r24
    2982:	95 95       	asr	r25
    2984:	87 95       	ror	r24
    2986:	aa 27       	eor	r26, r26
    2988:	97 fd       	sbrc	r25, 7
    298a:	a0 95       	com	r26
    298c:	ba 2f       	mov	r27, r26
    298e:	89 87       	std	Y+9, r24	; 0x09
    2990:	9a 87       	std	Y+10, r25	; 0x0a
    2992:	ab 87       	std	Y+11, r26	; 0x0b
    2994:	bc 87       	std	Y+12, r27	; 0x0c
	u32 needded_ticks=(u32)(delay_in_ms *1000)/tick;
    2996:	8d 85       	ldd	r24, Y+13	; 0x0d
    2998:	9e 85       	ldd	r25, Y+14	; 0x0e
    299a:	af 85       	ldd	r26, Y+15	; 0x0f
    299c:	b8 89       	ldd	r27, Y+16	; 0x10
    299e:	28 ee       	ldi	r18, 0xE8	; 232
    29a0:	33 e0       	ldi	r19, 0x03	; 3
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	29 85       	ldd	r18, Y+9	; 0x09
    29b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    29b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    29b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    29c2:	da 01       	movw	r26, r20
    29c4:	c9 01       	movw	r24, r18
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	af 83       	std	Y+7, r26	; 0x07
    29cc:	b8 87       	std	Y+8, r27	; 0x08

	ovf_counts_for_delay_fn=needded_ticks/256;
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	af 81       	ldd	r26, Y+7	; 0x07
    29d4:	b8 85       	ldd	r27, Y+8	; 0x08
    29d6:	89 2f       	mov	r24, r25
    29d8:	9a 2f       	mov	r25, r26
    29da:	ab 2f       	mov	r26, r27
    29dc:	bb 27       	eor	r27, r27
    29de:	90 93 92 00 	sts	0x0092, r25
    29e2:	80 93 91 00 	sts	0x0091, r24
	u32 OVF_Rem=needded_ticks%256;
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	af 81       	ldd	r26, Y+7	; 0x07
    29ec:	b8 85       	ldd	r27, Y+8	; 0x08
    29ee:	90 70       	andi	r25, 0x00	; 0
    29f0:	a0 70       	andi	r26, 0x00	; 0
    29f2:	b0 70       	andi	r27, 0x00	; 0
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	ab 83       	std	Y+3, r26	; 0x03
    29fa:	bc 83       	std	Y+4, r27	; 0x04
	if (OVF_Rem !=0)
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	ab 81       	ldd	r26, Y+3	; 0x03
    2a02:	bc 81       	ldd	r27, Y+4	; 0x04
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	a1 05       	cpc	r26, r1
    2a08:	b1 05       	cpc	r27, r1
    2a0a:	71 f0       	breq	.+28     	; 0x2a28 <Timer_setDelayTimeMilliSec+0x104>
	{
		ovf_counts_for_delay_fn++;
    2a0c:	80 91 91 00 	lds	r24, 0x0091
    2a10:	90 91 92 00 	lds	r25, 0x0092
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	90 93 92 00 	sts	0x0092, r25
    2a1a:	80 93 91 00 	sts	0x0091, r24
		TIMER0_R_BASE->TCNT0.ALL_BITS =256-OVF_Rem;
    2a1e:	e2 e5       	ldi	r30, 0x52	; 82
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	81 95       	neg	r24
    2a26:	80 83       	st	Z, r24
	}
	setCallBack(Timer0_delay, Normal);
    2a28:	80 e7       	ldi	r24, 0x70	; 112
    2a2a:	94 e1       	ldi	r25, 0x14	; 20
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <setCallBack>
	while(ov_flag==0);
    2a32:	80 91 8e 00 	lds	r24, 0x008E
    2a36:	88 23       	and	r24, r24
    2a38:	e1 f3       	breq	.-8      	; 0x2a32 <Timer_setDelayTimeMilliSec+0x10e>
	ov_flag=0;
    2a3a:	10 92 8e 00 	sts	0x008E, r1
}
    2a3e:	63 96       	adiw	r28, 0x13	; 19
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <setCallBack>:
	else if(mode == T0_CTC)
		TIMER0_R_BASE->TIMSK.ALL_BITS &= ~(1<<1);
}
*/
void setCallBack(void (*ptr_to_callback)(void), modes_IDs mode_id)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <setCallBack+0x6>
    2a56:	0f 92       	push	r0
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	6b 83       	std	Y+3, r22	; 0x03
	Timer0_callback_fns[mode_id] = ptr_to_callback;
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	e6 57       	subi	r30, 0x76	; 118
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <setFastPWM>:

void setFastPWM(u8 Duty)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	0f 92       	push	r0
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	89 83       	std	Y+1, r24	; 0x01
	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == NON_INVERTING)
    2a92:	e2 e5       	ldi	r30, 0x52	; 82
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	81 81       	ldd	r24, Z+1	; 0x01
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	80 7b       	andi	r24, 0xB0	; 176
    2a9e:	90 70       	andi	r25, 0x00	; 0
    2aa0:	95 95       	asr	r25
    2aa2:	87 95       	ror	r24
    2aa4:	95 95       	asr	r25
    2aa6:	87 95       	ror	r24
    2aa8:	95 95       	asr	r25
    2aaa:	87 95       	ror	r24
    2aac:	95 95       	asr	r25
    2aae:	87 95       	ror	r24
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	91 05       	cpc	r25, r1
    2ab4:	e9 f4       	brne	.+58     	; 0x2af0 <setFastPWM+0x6a>
	{
		if (Duty <=100)
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	85 36       	cpi	r24, 0x65	; 101
    2aba:	d0 f4       	brcc	.+52     	; 0x2af0 <setFastPWM+0x6a>
		{
			TIMER0_R_BASE ->OCR0.ALL_BITS = ((Duty * 255)/100);
    2abc:	e2 e5       	ldi	r30, 0x52	; 82
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	ca 01       	movw	r24, r20
    2ac8:	9c 01       	movw	r18, r24
    2aca:	22 0f       	add	r18, r18
    2acc:	33 1f       	adc	r19, r19
    2ace:	c9 01       	movw	r24, r18
    2ad0:	96 95       	lsr	r25
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	88 27       	eor	r24, r24
    2ad6:	97 95       	ror	r25
    2ad8:	87 95       	ror	r24
    2ada:	82 1b       	sub	r24, r18
    2adc:	93 0b       	sbc	r25, r19
    2ade:	84 0f       	add	r24, r20
    2ae0:	95 1f       	adc	r25, r21
    2ae2:	24 e6       	ldi	r18, 0x64	; 100
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	b9 01       	movw	r22, r18
    2ae8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__divmodhi4>
    2aec:	cb 01       	movw	r24, r22
    2aee:	82 87       	std	Z+10, r24	; 0x0a
		}
	}

	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == INVERTING)
    2af0:	e2 e5       	ldi	r30, 0x52	; 82
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	81 81       	ldd	r24, Z+1	; 0x01
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	80 7b       	andi	r24, 0xB0	; 176
    2afc:	90 70       	andi	r25, 0x00	; 0
    2afe:	95 95       	asr	r25
    2b00:	87 95       	ror	r24
    2b02:	95 95       	asr	r25
    2b04:	87 95       	ror	r24
    2b06:	95 95       	asr	r25
    2b08:	87 95       	ror	r24
    2b0a:	95 95       	asr	r25
    2b0c:	87 95       	ror	r24
    2b0e:	83 30       	cpi	r24, 0x03	; 3
    2b10:	91 05       	cpc	r25, r1
    2b12:	f1 f4       	brne	.+60     	; 0x2b50 <setFastPWM+0xca>
	{
		if (Duty <=100){
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	85 36       	cpi	r24, 0x65	; 101
    2b18:	d8 f4       	brcc	.+54     	; 0x2b50 <setFastPWM+0xca>
			TIMER0_R_BASE ->OCR0.ALL_BITS = 255 - (((Duty * 255)/100 ));
    2b1a:	e2 e5       	ldi	r30, 0x52	; 82
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	48 2f       	mov	r20, r24
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	ca 01       	movw	r24, r20
    2b26:	9c 01       	movw	r18, r24
    2b28:	22 0f       	add	r18, r18
    2b2a:	33 1f       	adc	r19, r19
    2b2c:	c9 01       	movw	r24, r18
    2b2e:	96 95       	lsr	r25
    2b30:	98 2f       	mov	r25, r24
    2b32:	88 27       	eor	r24, r24
    2b34:	97 95       	ror	r25
    2b36:	87 95       	ror	r24
    2b38:	82 1b       	sub	r24, r18
    2b3a:	93 0b       	sbc	r25, r19
    2b3c:	84 0f       	add	r24, r20
    2b3e:	95 1f       	adc	r25, r21
    2b40:	24 e6       	ldi	r18, 0x64	; 100
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	b9 01       	movw	r22, r18
    2b46:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__divmodhi4>
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	80 95       	com	r24
    2b4e:	82 87       	std	Z+10, r24	; 0x0a
		}
	}

}
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <setphaseCorrectPWM>:
void setphaseCorrectPWM(u8 duty)
{
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	89 83       	std	Y+1, r24	; 0x01
	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == NON_INVERTING)
    2b68:	e2 e5       	ldi	r30, 0x52	; 82
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	81 81       	ldd	r24, Z+1	; 0x01
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	80 7b       	andi	r24, 0xB0	; 176
    2b74:	90 70       	andi	r25, 0x00	; 0
    2b76:	95 95       	asr	r25
    2b78:	87 95       	ror	r24
    2b7a:	95 95       	asr	r25
    2b7c:	87 95       	ror	r24
    2b7e:	95 95       	asr	r25
    2b80:	87 95       	ror	r24
    2b82:	95 95       	asr	r25
    2b84:	87 95       	ror	r24
    2b86:	82 30       	cpi	r24, 0x02	; 2
    2b88:	91 05       	cpc	r25, r1
    2b8a:	f1 f4       	brne	.+60     	; 0x2bc8 <setphaseCorrectPWM+0x70>
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = (u8)(((u32)duty*MAX_OCR0)/100);
    2b8c:	02 e5       	ldi	r16, 0x52	; 82
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a0 e0       	ldi	r26, 0x00	; 0
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	2f ef       	ldi	r18, 0xFF	; 255
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	24 e6       	ldi	r18, 0x64	; 100
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e0       	ldi	r20, 0x00	; 0
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    2bbe:	da 01       	movw	r26, r20
    2bc0:	c9 01       	movw	r24, r18
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	82 87       	std	Z+10, r24	; 0x0a
    2bc6:	30 c0       	rjmp	.+96     	; 0x2c28 <setphaseCorrectPWM+0xd0>
	}
	else if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == INVERTING)
    2bc8:	e2 e5       	ldi	r30, 0x52	; 82
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	81 81       	ldd	r24, Z+1	; 0x01
    2bce:	88 2f       	mov	r24, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	80 7b       	andi	r24, 0xB0	; 176
    2bd4:	90 70       	andi	r25, 0x00	; 0
    2bd6:	95 95       	asr	r25
    2bd8:	87 95       	ror	r24
    2bda:	95 95       	asr	r25
    2bdc:	87 95       	ror	r24
    2bde:	95 95       	asr	r25
    2be0:	87 95       	ror	r24
    2be2:	95 95       	asr	r25
    2be4:	87 95       	ror	r24
    2be6:	83 30       	cpi	r24, 0x03	; 3
    2be8:	91 05       	cpc	r25, r1
    2bea:	f1 f4       	brne	.+60     	; 0x2c28 <setphaseCorrectPWM+0xd0>
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = (u8)(MAX_OCR0-(((u32)duty*MAX_OCR0)/100));
    2bec:	02 e5       	ldi	r16, 0x52	; 82
    2bee:	10 e0       	ldi	r17, 0x00	; 0
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e0       	ldi	r26, 0x00	; 0
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	2f ef       	ldi	r18, 0xFF	; 255
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__mulsi3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	24 e6       	ldi	r18, 0x64	; 100
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    2c1e:	da 01       	movw	r26, r20
    2c20:	c9 01       	movw	r24, r18
    2c22:	80 95       	com	r24
    2c24:	f8 01       	movw	r30, r16
    2c26:	82 87       	std	Z+10, r24	; 0x0a
	}
}
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    2c34:	1f 92       	push	r1
    2c36:	0f 92       	push	r0
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	0f 92       	push	r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	2f 93       	push	r18
    2c40:	3f 93       	push	r19
    2c42:	4f 93       	push	r20
    2c44:	5f 93       	push	r21
    2c46:	6f 93       	push	r22
    2c48:	7f 93       	push	r23
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
    2c52:	ef 93       	push	r30
    2c54:	ff 93       	push	r31
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62

	ovf_count++; //for get_count fn
    2c5e:	80 91 93 00 	lds	r24, 0x0093
    2c62:	90 91 94 00 	lds	r25, 0x0094
    2c66:	01 96       	adiw	r24, 0x01	; 1
    2c68:	90 93 94 00 	sts	0x0094, r25
    2c6c:	80 93 93 00 	sts	0x0093, r24

	if(Timer0_callback_fns[Normal_ID] != NULL)
    2c70:	80 91 8a 00 	lds	r24, 0x008A
    2c74:	90 91 8b 00 	lds	r25, 0x008B
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	29 f0       	breq	.+10     	; 0x2c86 <__vector_11+0x52>
		Timer0_callback_fns[Normal_ID]();
    2c7c:	e0 91 8a 00 	lds	r30, 0x008A
    2c80:	f0 91 8b 00 	lds	r31, 0x008B
    2c84:	09 95       	icall

}
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	ff 91       	pop	r31
    2c8c:	ef 91       	pop	r30
    2c8e:	bf 91       	pop	r27
    2c90:	af 91       	pop	r26
    2c92:	9f 91       	pop	r25
    2c94:	8f 91       	pop	r24
    2c96:	7f 91       	pop	r23
    2c98:	6f 91       	pop	r22
    2c9a:	5f 91       	pop	r21
    2c9c:	4f 91       	pop	r20
    2c9e:	3f 91       	pop	r19
    2ca0:	2f 91       	pop	r18
    2ca2:	0f 90       	pop	r0
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	0f 90       	pop	r0
    2ca8:	1f 90       	pop	r1
    2caa:	18 95       	reti

00002cac <__vector_10>:

ISR(TIMER0_OC_vect)
{
    2cac:	1f 92       	push	r1
    2cae:	0f 92       	push	r0
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	0f 92       	push	r0
    2cb4:	11 24       	eor	r1, r1
    2cb6:	2f 93       	push	r18
    2cb8:	3f 93       	push	r19
    2cba:	4f 93       	push	r20
    2cbc:	5f 93       	push	r21
    2cbe:	6f 93       	push	r22
    2cc0:	7f 93       	push	r23
    2cc2:	8f 93       	push	r24
    2cc4:	9f 93       	push	r25
    2cc6:	af 93       	push	r26
    2cc8:	bf 93       	push	r27
    2cca:	ef 93       	push	r30
    2ccc:	ff 93       	push	r31
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callback_fns[CTC_ID] != NULL)
    2cd6:	80 91 8c 00 	lds	r24, 0x008C
    2cda:	90 91 8d 00 	lds	r25, 0x008D
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	29 f0       	breq	.+10     	; 0x2cec <__vector_10+0x40>
		Timer0_callback_fns[CTC_ID]();
    2ce2:	e0 91 8c 00 	lds	r30, 0x008C
    2ce6:	f0 91 8d 00 	lds	r31, 0x008D
    2cea:	09 95       	icall


}
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	ff 91       	pop	r31
    2cf2:	ef 91       	pop	r30
    2cf4:	bf 91       	pop	r27
    2cf6:	af 91       	pop	r26
    2cf8:	9f 91       	pop	r25
    2cfa:	8f 91       	pop	r24
    2cfc:	7f 91       	pop	r23
    2cfe:	6f 91       	pop	r22
    2d00:	5f 91       	pop	r21
    2d02:	4f 91       	pop	r20
    2d04:	3f 91       	pop	r19
    2d06:	2f 91       	pop	r18
    2d08:	0f 90       	pop	r0
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	0f 90       	pop	r0
    2d0e:	1f 90       	pop	r1
    2d10:	18 95       	reti

00002d12 <main>:

#include"DC_MOTOR.h"
#include"LCD.h"
#include"LM35.h"
int main()
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	0f 92       	push	r0
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62

	DcMotor_Init();
    2d1c:	0e 94 c2 06 	call	0xd84	; 0xd84 <DcMotor_Init>
	LM35_init();
    2d20:	0e 94 5f 13 	call	0x26be	; 0x26be <LM35_init>
	LCD_void_Init();
    2d24:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <LCD_void_Init>
	LCD_void_sendCommand(CURSOR_OFF_DISPLAY_ON);
    2d28:	8c e0       	ldi	r24, 0x0C	; 12
    2d2a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_void_sendCommand>


	u8 temp;
	while(1)
	{
		LCD_void_gotoXY(0, 0);
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	60 e0       	ldi	r22, 0x00	; 0
    2d32:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_void_gotoXY>
		temp=LM35_getTemperature();
    2d36:	0e 94 76 13 	call	0x26ec	; 0x26ec <LM35_getTemperature>
    2d3a:	89 83       	std	Y+1, r24	; 0x01
		if( temp < 25)
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	89 31       	cpi	r24, 0x19	; 25
    2d40:	88 f4       	brcc	.+34     	; 0x2d64 <main+0x52>
		{
			DC_MOTOR_setSpeed(0, stop);
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	0e 94 15 07 	call	0xe2a	; 0xe2a <DC_MOTOR_setSpeed>
			LCD_void_sendString("temp = ");
    2d4a:	80 e6       	ldi	r24, 0x60	; 96
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_void_sendString>
			LCD_void_sendIntNum((u8)temp);
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a0 e0       	ldi	r26, 0x00	; 0
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_void_sendIntNum>
		}

		if( temp >= 25 && temp <= 35)
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	89 31       	cpi	r24, 0x19	; 25
    2d68:	a0 f0       	brcs	.+40     	; 0x2d92 <main+0x80>
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	84 32       	cpi	r24, 0x24	; 36
    2d6e:	88 f4       	brcc	.+34     	; 0x2d92 <main+0x80>
		{
			DC_MOTOR_setSpeed(50, clkWise);
    2d70:	82 e3       	ldi	r24, 0x32	; 50
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	0e 94 15 07 	call	0xe2a	; 0xe2a <DC_MOTOR_setSpeed>
			LCD_void_sendString("temp = ");
    2d78:	80 e6       	ldi	r24, 0x60	; 96
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_void_sendString>
			LCD_void_sendIntNum((u8)temp);
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a0 e0       	ldi	r26, 0x00	; 0
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_void_sendIntNum>
		}

		if( temp > 35)
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	84 32       	cpi	r24, 0x24	; 36
    2d96:	88 f0       	brcs	.+34     	; 0x2dba <main+0xa8>
		{
			DC_MOTOR_setSpeed(80, clkWise);
    2d98:	80 e5       	ldi	r24, 0x50	; 80
    2d9a:	61 e0       	ldi	r22, 0x01	; 1
    2d9c:	0e 94 15 07 	call	0xe2a	; 0xe2a <DC_MOTOR_setSpeed>
			LCD_void_sendString("temp = ");
    2da0:	80 e6       	ldi	r24, 0x60	; 96
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_void_sendString>
			LCD_void_sendIntNum((u8)temp);
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	a0 e0       	ldi	r26, 0x00	; 0
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_void_sendIntNum>
		}

		LCD_void_sendData('c');
    2dba:	83 e6       	ldi	r24, 0x63	; 99
    2dbc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <LCD_void_sendData>
    2dc0:	b6 cf       	rjmp	.-148    	; 0x2d2e <main+0x1c>

00002dc2 <__mulsi3>:
    2dc2:	62 9f       	mul	r22, r18
    2dc4:	d0 01       	movw	r26, r0
    2dc6:	73 9f       	mul	r23, r19
    2dc8:	f0 01       	movw	r30, r0
    2dca:	82 9f       	mul	r24, r18
    2dcc:	e0 0d       	add	r30, r0
    2dce:	f1 1d       	adc	r31, r1
    2dd0:	64 9f       	mul	r22, r20
    2dd2:	e0 0d       	add	r30, r0
    2dd4:	f1 1d       	adc	r31, r1
    2dd6:	92 9f       	mul	r25, r18
    2dd8:	f0 0d       	add	r31, r0
    2dda:	83 9f       	mul	r24, r19
    2ddc:	f0 0d       	add	r31, r0
    2dde:	74 9f       	mul	r23, r20
    2de0:	f0 0d       	add	r31, r0
    2de2:	65 9f       	mul	r22, r21
    2de4:	f0 0d       	add	r31, r0
    2de6:	99 27       	eor	r25, r25
    2de8:	72 9f       	mul	r23, r18
    2dea:	b0 0d       	add	r27, r0
    2dec:	e1 1d       	adc	r30, r1
    2dee:	f9 1f       	adc	r31, r25
    2df0:	63 9f       	mul	r22, r19
    2df2:	b0 0d       	add	r27, r0
    2df4:	e1 1d       	adc	r30, r1
    2df6:	f9 1f       	adc	r31, r25
    2df8:	bd 01       	movw	r22, r26
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	11 24       	eor	r1, r1
    2dfe:	08 95       	ret

00002e00 <__divmodhi4>:
    2e00:	97 fb       	bst	r25, 7
    2e02:	09 2e       	mov	r0, r25
    2e04:	07 26       	eor	r0, r23
    2e06:	0a d0       	rcall	.+20     	; 0x2e1c <__divmodhi4_neg1>
    2e08:	77 fd       	sbrc	r23, 7
    2e0a:	04 d0       	rcall	.+8      	; 0x2e14 <__divmodhi4_neg2>
    2e0c:	49 d0       	rcall	.+146    	; 0x2ea0 <__udivmodhi4>
    2e0e:	06 d0       	rcall	.+12     	; 0x2e1c <__divmodhi4_neg1>
    2e10:	00 20       	and	r0, r0
    2e12:	1a f4       	brpl	.+6      	; 0x2e1a <__divmodhi4_exit>

00002e14 <__divmodhi4_neg2>:
    2e14:	70 95       	com	r23
    2e16:	61 95       	neg	r22
    2e18:	7f 4f       	sbci	r23, 0xFF	; 255

00002e1a <__divmodhi4_exit>:
    2e1a:	08 95       	ret

00002e1c <__divmodhi4_neg1>:
    2e1c:	f6 f7       	brtc	.-4      	; 0x2e1a <__divmodhi4_exit>
    2e1e:	90 95       	com	r25
    2e20:	81 95       	neg	r24
    2e22:	9f 4f       	sbci	r25, 0xFF	; 255
    2e24:	08 95       	ret

00002e26 <__udivmodsi4>:
    2e26:	a1 e2       	ldi	r26, 0x21	; 33
    2e28:	1a 2e       	mov	r1, r26
    2e2a:	aa 1b       	sub	r26, r26
    2e2c:	bb 1b       	sub	r27, r27
    2e2e:	fd 01       	movw	r30, r26
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <__udivmodsi4_ep>

00002e32 <__udivmodsi4_loop>:
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	ee 1f       	adc	r30, r30
    2e38:	ff 1f       	adc	r31, r31
    2e3a:	a2 17       	cp	r26, r18
    2e3c:	b3 07       	cpc	r27, r19
    2e3e:	e4 07       	cpc	r30, r20
    2e40:	f5 07       	cpc	r31, r21
    2e42:	20 f0       	brcs	.+8      	; 0x2e4c <__udivmodsi4_ep>
    2e44:	a2 1b       	sub	r26, r18
    2e46:	b3 0b       	sbc	r27, r19
    2e48:	e4 0b       	sbc	r30, r20
    2e4a:	f5 0b       	sbc	r31, r21

00002e4c <__udivmodsi4_ep>:
    2e4c:	66 1f       	adc	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	88 1f       	adc	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	1a 94       	dec	r1
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <__udivmodsi4_loop>
    2e58:	60 95       	com	r22
    2e5a:	70 95       	com	r23
    2e5c:	80 95       	com	r24
    2e5e:	90 95       	com	r25
    2e60:	9b 01       	movw	r18, r22
    2e62:	ac 01       	movw	r20, r24
    2e64:	bd 01       	movw	r22, r26
    2e66:	cf 01       	movw	r24, r30
    2e68:	08 95       	ret

00002e6a <__divmodsi4>:
    2e6a:	97 fb       	bst	r25, 7
    2e6c:	09 2e       	mov	r0, r25
    2e6e:	05 26       	eor	r0, r21
    2e70:	0e d0       	rcall	.+28     	; 0x2e8e <__divmodsi4_neg1>
    2e72:	57 fd       	sbrc	r21, 7
    2e74:	04 d0       	rcall	.+8      	; 0x2e7e <__divmodsi4_neg2>
    2e76:	d7 df       	rcall	.-82     	; 0x2e26 <__udivmodsi4>
    2e78:	0a d0       	rcall	.+20     	; 0x2e8e <__divmodsi4_neg1>
    2e7a:	00 1c       	adc	r0, r0
    2e7c:	38 f4       	brcc	.+14     	; 0x2e8c <__divmodsi4_exit>

00002e7e <__divmodsi4_neg2>:
    2e7e:	50 95       	com	r21
    2e80:	40 95       	com	r20
    2e82:	30 95       	com	r19
    2e84:	21 95       	neg	r18
    2e86:	3f 4f       	sbci	r19, 0xFF	; 255
    2e88:	4f 4f       	sbci	r20, 0xFF	; 255
    2e8a:	5f 4f       	sbci	r21, 0xFF	; 255

00002e8c <__divmodsi4_exit>:
    2e8c:	08 95       	ret

00002e8e <__divmodsi4_neg1>:
    2e8e:	f6 f7       	brtc	.-4      	; 0x2e8c <__divmodsi4_exit>
    2e90:	90 95       	com	r25
    2e92:	80 95       	com	r24
    2e94:	70 95       	com	r23
    2e96:	61 95       	neg	r22
    2e98:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9e:	08 95       	ret

00002ea0 <__udivmodhi4>:
    2ea0:	aa 1b       	sub	r26, r26
    2ea2:	bb 1b       	sub	r27, r27
    2ea4:	51 e1       	ldi	r21, 0x11	; 17
    2ea6:	07 c0       	rjmp	.+14     	; 0x2eb6 <__udivmodhi4_ep>

00002ea8 <__udivmodhi4_loop>:
    2ea8:	aa 1f       	adc	r26, r26
    2eaa:	bb 1f       	adc	r27, r27
    2eac:	a6 17       	cp	r26, r22
    2eae:	b7 07       	cpc	r27, r23
    2eb0:	10 f0       	brcs	.+4      	; 0x2eb6 <__udivmodhi4_ep>
    2eb2:	a6 1b       	sub	r26, r22
    2eb4:	b7 0b       	sbc	r27, r23

00002eb6 <__udivmodhi4_ep>:
    2eb6:	88 1f       	adc	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	5a 95       	dec	r21
    2ebc:	a9 f7       	brne	.-22     	; 0x2ea8 <__udivmodhi4_loop>
    2ebe:	80 95       	com	r24
    2ec0:	90 95       	com	r25
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	08 95       	ret

00002ec8 <__prologue_saves__>:
    2ec8:	2f 92       	push	r2
    2eca:	3f 92       	push	r3
    2ecc:	4f 92       	push	r4
    2ece:	5f 92       	push	r5
    2ed0:	6f 92       	push	r6
    2ed2:	7f 92       	push	r7
    2ed4:	8f 92       	push	r8
    2ed6:	9f 92       	push	r9
    2ed8:	af 92       	push	r10
    2eda:	bf 92       	push	r11
    2edc:	cf 92       	push	r12
    2ede:	df 92       	push	r13
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	ca 1b       	sub	r28, r26
    2ef2:	db 0b       	sbc	r29, r27
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	09 94       	ijmp

00002f00 <__epilogue_restores__>:
    2f00:	2a 88       	ldd	r2, Y+18	; 0x12
    2f02:	39 88       	ldd	r3, Y+17	; 0x11
    2f04:	48 88       	ldd	r4, Y+16	; 0x10
    2f06:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f08:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f10:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f12:	b9 84       	ldd	r11, Y+9	; 0x09
    2f14:	c8 84       	ldd	r12, Y+8	; 0x08
    2f16:	df 80       	ldd	r13, Y+7	; 0x07
    2f18:	ee 80       	ldd	r14, Y+6	; 0x06
    2f1a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f1c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f1e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f20:	aa 81       	ldd	r26, Y+2	; 0x02
    2f22:	b9 81       	ldd	r27, Y+1	; 0x01
    2f24:	ce 0f       	add	r28, r30
    2f26:	d1 1d       	adc	r29, r1
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	ed 01       	movw	r28, r26
    2f34:	08 95       	ret

00002f36 <_exit>:
    2f36:	f8 94       	cli

00002f38 <__stop_program>:
    2f38:	ff cf       	rjmp	.-2      	; 0x2f38 <__stop_program>
