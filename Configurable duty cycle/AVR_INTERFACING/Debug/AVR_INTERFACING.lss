
AVR_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00003086  0000311a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000b0  008000b0  0000316a  2**0
                  ALLOC
  3 .stab         00002c4c  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001782  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000753a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000767a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000077ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_10>
      2c:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <main>
      8a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
#include"DC_MOTOR.h"
#include"Timer0.h"
#include"GPIO.h"
#include"BIT_MATH.h"
void DcMotor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*SET ENABLE PIN(OC0) AS OUTPUT*/
	DIO_voidSetPinDirection(PERIPHRAL_B, 3, OUTPUT);
     b5a:	86 e3       	ldi	r24, 0x36	; 54
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	63 e0       	ldi	r22, 0x03	; 3
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>

	/*SET IN1 & IN2 OF DC_MOTOR AS OUTPUT PINS FROM MC*/
	DIO_voidSetPinDirection(IN1_PORT_ID, 0, OUTPUT);
     b66:	86 e3       	ldi	r24, 0x36	; 54
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(IN2_PORT_ID, 1, OUTPUT);
     b72:	86 e3       	ldi	r24, 0x36	; 54
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>

	/*SET ENABLE PIN(OC0) AS OUTPUT*/
	DIO_voidSetPinDirection(PERIPHRAL_B, 3, OUTPUT);
     b7e:	86 e3       	ldi	r24, 0x36	; 54
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	63 e0       	ldi	r22, 0x03	; 3
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>

	/*STOP DC_MOTOR INITIALY*/
	//IN1_PORT_ID->PORT_R.bits.bit0=0;
	//IN1_PORT_ID->PORT_R.bits.bit1=0;
	/*init timer0*/
	Timer0_cfg cfg = {PWM_fast, PRE8, INVERTING};
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	9d 83       	std	Y+5, r25	; 0x05
     b90:	8c 83       	std	Y+4, r24	; 0x04
     b92:	ed ea       	ldi	r30, 0xAD	; 173
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ff 83       	std	Y+7, r31	; 0x07
     b98:	ee 83       	std	Y+6, r30	; 0x06
     b9a:	f3 e0       	ldi	r31, 0x03	; 3
     b9c:	f8 87       	std	Y+8, r31	; 0x08
     b9e:	ee 81       	ldd	r30, Y+6	; 0x06
     ba0:	ff 81       	ldd	r31, Y+7	; 0x07
     ba2:	00 80       	ld	r0, Z
     ba4:	8e 81       	ldd	r24, Y+6	; 0x06
     ba6:	9f 81       	ldd	r25, Y+7	; 0x07
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	9f 83       	std	Y+7, r25	; 0x07
     bac:	8e 83       	std	Y+6, r24	; 0x06
     bae:	ec 81       	ldd	r30, Y+4	; 0x04
     bb0:	fd 81       	ldd	r31, Y+5	; 0x05
     bb2:	00 82       	st	Z, r0
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	9d 81       	ldd	r25, Y+5	; 0x05
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	9d 83       	std	Y+5, r25	; 0x05
     bbc:	8c 83       	std	Y+4, r24	; 0x04
     bbe:	98 85       	ldd	r25, Y+8	; 0x08
     bc0:	91 50       	subi	r25, 0x01	; 1
     bc2:	98 87       	std	Y+8, r25	; 0x08
     bc4:	e8 85       	ldd	r30, Y+8	; 0x08
     bc6:	ee 23       	and	r30, r30
     bc8:	51 f7       	brne	.-44     	; 0xb9e <DcMotor_Init+0x58>
	Timer0_Init(& cfg);
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 ed 13 	call	0x27da	; 0x27da <Timer0_Init>


}
     bd2:	28 96       	adiw	r28, 0x08	; 8
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <DC_MOTOR_setSpeed>:
void DC_MOTOR_setSpeed(u8 duty, DcMotor_State state)
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	00 d0       	rcall	.+0      	; 0xbea <DC_MOTOR_setSpeed+0x6>
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	6a 83       	std	Y+2, r22	; 0x02
	/*adjust the state of the rotation of motor(clkwise/ anti clkwise/ stop)*/
		PERIPHRAL_B->PORT_R.ALL_BITS = (PERIPHRAL_B->PORT_R.ALL_BITS & 0xFC) | state;
     bf2:	a6 e3       	ldi	r26, 0x36	; 54
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e6 e3       	ldi	r30, 0x36	; 54
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	98 2f       	mov	r25, r24
     bfe:	9c 7f       	andi	r25, 0xFC	; 252
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	89 2b       	or	r24, r25
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	8c 93       	st	X, r24
	/*send the required speed to pwm to generate the wave on the enable pin of the motor*/
	setFastPWM( duty);
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <setFastPWM>

}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <EXTI_enableInterrupt>:

#include "EXTI.h"
void(*ptr_to_callback_fns[3])(void) = {NULL, NULL, NULL};

void EXTI_enableInterrupt(INT_ID INT, triggerType trig)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <EXTI_enableInterrupt+0x6>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <EXTI_enableInterrupt+0x8>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	6a 83       	std	Y+2, r22	; 0x02
	/*enable interrupt*/
	EXTI_R ->GICR.ALL_BITS |= (1<<INT);
     c28:	a4 e5       	ldi	r26, 0x54	; 84
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e4 e5       	ldi	r30, 0x54	; 84
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	87 81       	ldd	r24, Z+7	; 0x07
     c32:	48 2f       	mov	r20, r24
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <EXTI_enableInterrupt+0x2c>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	2a 95       	dec	r18
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <EXTI_enableInterrupt+0x28>
     c48:	84 2b       	or	r24, r20
     c4a:	17 96       	adiw	r26, 0x07	; 7
     c4c:	8c 93       	st	X, r24
     c4e:	17 97       	sbiw	r26, 0x07	; 7

	switch(INT)
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3c 83       	std	Y+4, r19	; 0x04
     c58:	2b 83       	std	Y+3, r18	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	86 30       	cpi	r24, 0x06	; 6
     c60:	91 05       	cpc	r25, r1
     c62:	59 f0       	breq	.+22     	; 0xc7a <EXTI_enableInterrupt+0x62>
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	27 30       	cpi	r18, 0x07	; 7
     c6a:	31 05       	cpc	r19, r1
     c6c:	89 f0       	breq	.+34     	; 0xc90 <EXTI_enableInterrupt+0x78>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	85 30       	cpi	r24, 0x05	; 5
     c74:	91 05       	cpc	r25, r1
     c76:	f1 f0       	breq	.+60     	; 0xcb4 <EXTI_enableInterrupt+0x9c>
     c78:	2b c0       	rjmp	.+86     	; 0xcd0 <EXTI_enableInterrupt+0xb8>
	{
	case INT0:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig;
     c7a:	a4 e5       	ldi	r26, 0x54	; 84
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e4 e5       	ldi	r30, 0x54	; 84
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	89 2b       	or	r24, r25
     c88:	11 96       	adiw	r26, 0x01	; 1
     c8a:	8c 93       	st	X, r24
     c8c:	11 97       	sbiw	r26, 0x01	; 1
     c8e:	20 c0       	rjmp	.+64     	; 0xcd0 <EXTI_enableInterrupt+0xb8>
		break;
	case INT1:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig<<2;
     c90:	a4 e5       	ldi	r26, 0x54	; 84
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e4 e5       	ldi	r30, 0x54	; 84
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	28 2f       	mov	r18, r24
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	82 2b       	or	r24, r18
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	8c 93       	st	X, r24
     cb0:	11 97       	sbiw	r26, 0x01	; 1
     cb2:	0e c0       	rjmp	.+28     	; 0xcd0 <EXTI_enableInterrupt+0xb8>
		break;
	case INT2:
		/*choose triggering type*/
		EXTI_R ->MCUCSR.bits.bit6 = trig; /***************/
     cb4:	e4 e5       	ldi	r30, 0x54	; 84
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	81 70       	andi	r24, 0x01	; 1
     cbc:	81 70       	andi	r24, 0x01	; 1
     cbe:	98 2f       	mov	r25, r24
     cc0:	92 95       	swap	r25
     cc2:	99 0f       	add	r25, r25
     cc4:	99 0f       	add	r25, r25
     cc6:	90 7c       	andi	r25, 0xC0	; 192
     cc8:	80 81       	ld	r24, Z
     cca:	8f 7b       	andi	r24, 0xBF	; 191
     ccc:	89 2b       	or	r24, r25
     cce:	80 83       	st	Z, r24
		break;
	}


}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <EXTI_disableInterrupt>:

void EXTI_disableInterrupt(INT_ID INT)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	89 83       	std	Y+1, r24	; 0x01
	EXTI_R ->GICR.ALL_BITS &= ~(1<<INT);
     cea:	a4 e5       	ldi	r26, 0x54	; 84
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e4 e5       	ldi	r30, 0x54	; 84
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	87 81       	ldd	r24, Z+7	; 0x07
     cf4:	48 2f       	mov	r20, r24
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <EXTI_disableInterrupt+0x2a>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <EXTI_disableInterrupt+0x26>
     d0c:	80 95       	com	r24
     d0e:	84 23       	and	r24, r20
     d10:	17 96       	adiw	r26, 0x07	; 7
     d12:	8c 93       	st	X, r24
     d14:	17 97       	sbiw	r26, 0x07	; 7
}
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <EXTI_setCallBack>:
void EXTI_setCallBack(void(*ptr_to_fn)(void), INT_ID INT)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <EXTI_setCallBack+0x6>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	6b 83       	std	Y+3, r22	; 0x03
	ptr_to_callback_fns[INT-5] = ptr_to_fn;/*********************/
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	05 97       	sbiw	r24, 0x05	; 5
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	fc 01       	movw	r30, r24
     d3e:	e0 55       	subi	r30, 0x50	; 80
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <GIE_enableGlobalInterrupt>:
#include"GIE_R.h"
#include"GIE_priv.h"


void GIE_enableGlobalInterrupt()
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
     d5e:	78 94       	sei
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <GIE_disableGlobalInterrupt>:
void GIE_disableGlobalInterrupt()
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     d6e:	f8 94       	cli
}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <DIO_voidSetPinDirection>:
 *  Created on: Oct 20, 2023
 *      Author: OMR
 */
#include"GPIO.h"
void DIO_voidSetPinDirection(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <DIO_voidSetPinDirection+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_voidSetPinDirection+0x8>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_voidSetPinDirection+0xa>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	6b 83       	std	Y+3, r22	; 0x03
     d8a:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3e 83       	std	Y+6, r19	; 0x06
     d94:	2d 83       	std	Y+5, r18	; 0x05
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	83 30       	cpi	r24, 0x03	; 3
     d9c:	91 05       	cpc	r25, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <DIO_voidSetPinDirection+0x2c>
     da0:	51 c0       	rjmp	.+162    	; 0xe44 <DIO_voidSetPinDirection+0xce>
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	24 30       	cpi	r18, 0x04	; 4
     da8:	31 05       	cpc	r19, r1
     daa:	7c f4       	brge	.+30     	; 0xdca <DIO_voidSetPinDirection+0x54>
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	91 05       	cpc	r25, r1
     db4:	71 f1       	breq	.+92     	; 0xe12 <DIO_voidSetPinDirection+0x9c>
     db6:	2d 81       	ldd	r18, Y+5	; 0x05
     db8:	3e 81       	ldd	r19, Y+6	; 0x06
     dba:	22 30       	cpi	r18, 0x02	; 2
     dbc:	31 05       	cpc	r19, r1
     dbe:	ac f5       	brge	.+106    	; 0xe2a <DIO_voidSetPinDirection+0xb4>
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <DIO_voidSetPinDirection+0x86>
     dc8:	81 c0       	rjmp	.+258    	; 0xecc <DIO_voidSetPinDirection+0x156>
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	25 30       	cpi	r18, 0x05	; 5
     dd0:	31 05       	cpc	r19, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <DIO_voidSetPinDirection+0x60>
     dd4:	52 c0       	rjmp	.+164    	; 0xe7a <DIO_voidSetPinDirection+0x104>
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	9e 81       	ldd	r25, Y+6	; 0x06
     dda:	85 30       	cpi	r24, 0x05	; 5
     ddc:	91 05       	cpc	r25, r1
     dde:	0c f4       	brge	.+2      	; 0xde2 <DIO_voidSetPinDirection+0x6c>
     de0:	3f c0       	rjmp	.+126    	; 0xe60 <DIO_voidSetPinDirection+0xea>
     de2:	2d 81       	ldd	r18, Y+5	; 0x05
     de4:	3e 81       	ldd	r19, Y+6	; 0x06
     de6:	26 30       	cpi	r18, 0x06	; 6
     de8:	31 05       	cpc	r19, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <DIO_voidSetPinDirection+0x78>
     dec:	54 c0       	rjmp	.+168    	; 0xe96 <DIO_voidSetPinDirection+0x120>
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	87 30       	cpi	r24, 0x07	; 7
     df4:	91 05       	cpc	r25, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <DIO_voidSetPinDirection+0x84>
     df8:	5d c0       	rjmp	.+186    	; 0xeb4 <DIO_voidSetPinDirection+0x13e>
     dfa:	68 c0       	rjmp	.+208    	; 0xecc <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr ->direction.bits.bit0 = Copy_u8Direction;
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	e9 81       	ldd	r30, Y+1	; 0x01
     e02:	fa 81       	ldd	r31, Y+2	; 0x02
     e04:	98 2f       	mov	r25, r24
     e06:	91 70       	andi	r25, 0x01	; 1
     e08:	81 81       	ldd	r24, Z+1	; 0x01
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	89 2b       	or	r24, r25
     e0e:	81 83       	std	Z+1, r24	; 0x01
     e10:	5d c0       	rjmp	.+186    	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr ->direction.bits.bit1 = Copy_u8Direction;
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	98 2f       	mov	r25, r24
     e1e:	99 0f       	add	r25, r25
     e20:	81 81       	ldd	r24, Z+1	; 0x01
     e22:	8d 7f       	andi	r24, 0xFD	; 253
     e24:	89 2b       	or	r24, r25
     e26:	81 83       	std	Z+1, r24	; 0x01
     e28:	51 c0       	rjmp	.+162    	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr ->direction.bits.bit2 = Copy_u8Direction;
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	81 70       	andi	r24, 0x01	; 1
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	81 70       	andi	r24, 0x01	; 1
     e34:	98 2f       	mov	r25, r24
     e36:	99 0f       	add	r25, r25
     e38:	99 0f       	add	r25, r25
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	8b 7f       	andi	r24, 0xFB	; 251
     e3e:	89 2b       	or	r24, r25
     e40:	81 83       	std	Z+1, r24	; 0x01
     e42:	44 c0       	rjmp	.+136    	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr ->direction.bits.bit3 = Copy_u8Direction;
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	81 70       	andi	r24, 0x01	; 1
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	81 70       	andi	r24, 0x01	; 1
     e4e:	98 2f       	mov	r25, r24
     e50:	99 0f       	add	r25, r25
     e52:	99 0f       	add	r25, r25
     e54:	99 0f       	add	r25, r25
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	87 7f       	andi	r24, 0xF7	; 247
     e5a:	89 2b       	or	r24, r25
     e5c:	81 83       	std	Z+1, r24	; 0x01
     e5e:	36 c0       	rjmp	.+108    	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr ->direction.bits.bit4 = Copy_u8Direction;
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	e9 81       	ldd	r30, Y+1	; 0x01
     e66:	fa 81       	ldd	r31, Y+2	; 0x02
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	98 2f       	mov	r25, r24
     e6c:	92 95       	swap	r25
     e6e:	90 7f       	andi	r25, 0xF0	; 240
     e70:	81 81       	ldd	r24, Z+1	; 0x01
     e72:	8f 7e       	andi	r24, 0xEF	; 239
     e74:	89 2b       	or	r24, r25
     e76:	81 83       	std	Z+1, r24	; 0x01
     e78:	29 c0       	rjmp	.+82     	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr ->direction.bits.bit5 = Copy_u8Direction;
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	81 70       	andi	r24, 0x01	; 1
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	81 70       	andi	r24, 0x01	; 1
     e84:	98 2f       	mov	r25, r24
     e86:	92 95       	swap	r25
     e88:	99 0f       	add	r25, r25
     e8a:	90 7e       	andi	r25, 0xE0	; 224
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	8f 7d       	andi	r24, 0xDF	; 223
     e90:	89 2b       	or	r24, r25
     e92:	81 83       	std	Z+1, r24	; 0x01
     e94:	1b c0       	rjmp	.+54     	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr ->direction.bits.bit6 = Copy_u8Direction;
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	81 70       	andi	r24, 0x01	; 1
     e9a:	e9 81       	ldd	r30, Y+1	; 0x01
     e9c:	fa 81       	ldd	r31, Y+2	; 0x02
     e9e:	81 70       	andi	r24, 0x01	; 1
     ea0:	98 2f       	mov	r25, r24
     ea2:	92 95       	swap	r25
     ea4:	99 0f       	add	r25, r25
     ea6:	99 0f       	add	r25, r25
     ea8:	90 7c       	andi	r25, 0xC0	; 192
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	89 2b       	or	r24, r25
     eb0:	81 83       	std	Z+1, r24	; 0x01
     eb2:	0c c0       	rjmp	.+24     	; 0xecc <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr ->direction.bits.bit7 = Copy_u8Direction;
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	81 70       	andi	r24, 0x01	; 1
     eb8:	e9 81       	ldd	r30, Y+1	; 0x01
     eba:	fa 81       	ldd	r31, Y+2	; 0x02
     ebc:	98 2f       	mov	r25, r24
     ebe:	97 95       	ror	r25
     ec0:	99 27       	eor	r25, r25
     ec2:	97 95       	ror	r25
     ec4:	81 81       	ldd	r24, Z+1	; 0x01
     ec6:	8f 77       	andi	r24, 0x7F	; 127
     ec8:	89 2b       	or	r24, r25
     eca:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     ecc:	26 96       	adiw	r28, 0x06	; 6
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Value)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <DIO_voidSetPinValue+0x6>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <DIO_voidSetPinValue+0x8>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <DIO_voidSetPinValue+0xa>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	6b 83       	std	Y+3, r22	; 0x03
     ef2:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3e 83       	std	Y+6, r19	; 0x06
     efc:	2d 83       	std	Y+5, r18	; 0x05
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <DIO_voidSetPinValue+0x2c>
     f08:	51 c0       	rjmp	.+162    	; 0xfac <DIO_voidSetPinValue+0xce>
     f0a:	2d 81       	ldd	r18, Y+5	; 0x05
     f0c:	3e 81       	ldd	r19, Y+6	; 0x06
     f0e:	24 30       	cpi	r18, 0x04	; 4
     f10:	31 05       	cpc	r19, r1
     f12:	7c f4       	brge	.+30     	; 0xf32 <DIO_voidSetPinValue+0x54>
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	91 05       	cpc	r25, r1
     f1c:	71 f1       	breq	.+92     	; 0xf7a <DIO_voidSetPinValue+0x9c>
     f1e:	2d 81       	ldd	r18, Y+5	; 0x05
     f20:	3e 81       	ldd	r19, Y+6	; 0x06
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	ac f5       	brge	.+106    	; 0xf92 <DIO_voidSetPinValue+0xb4>
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <DIO_voidSetPinValue+0x86>
     f30:	81 c0       	rjmp	.+258    	; 0x1034 <DIO_voidSetPinValue+0x156>
     f32:	2d 81       	ldd	r18, Y+5	; 0x05
     f34:	3e 81       	ldd	r19, Y+6	; 0x06
     f36:	25 30       	cpi	r18, 0x05	; 5
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_voidSetPinValue+0x60>
     f3c:	52 c0       	rjmp	.+164    	; 0xfe2 <DIO_voidSetPinValue+0x104>
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	85 30       	cpi	r24, 0x05	; 5
     f44:	91 05       	cpc	r25, r1
     f46:	0c f4       	brge	.+2      	; 0xf4a <DIO_voidSetPinValue+0x6c>
     f48:	3f c0       	rjmp	.+126    	; 0xfc8 <DIO_voidSetPinValue+0xea>
     f4a:	2d 81       	ldd	r18, Y+5	; 0x05
     f4c:	3e 81       	ldd	r19, Y+6	; 0x06
     f4e:	26 30       	cpi	r18, 0x06	; 6
     f50:	31 05       	cpc	r19, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <DIO_voidSetPinValue+0x78>
     f54:	54 c0       	rjmp	.+168    	; 0xffe <DIO_voidSetPinValue+0x120>
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	87 30       	cpi	r24, 0x07	; 7
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <DIO_voidSetPinValue+0x84>
     f60:	5d c0       	rjmp	.+186    	; 0x101c <DIO_voidSetPinValue+0x13e>
     f62:	68 c0       	rjmp	.+208    	; 0x1034 <DIO_voidSetPinValue+0x156>
		{
		case 0:
			ptr ->PORT_R.bits.bit0 = Copy_u8Value;
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	e9 81       	ldd	r30, Y+1	; 0x01
     f6a:	fa 81       	ldd	r31, Y+2	; 0x02
     f6c:	98 2f       	mov	r25, r24
     f6e:	91 70       	andi	r25, 0x01	; 1
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	89 2b       	or	r24, r25
     f76:	82 83       	std	Z+2, r24	; 0x02
     f78:	5d c0       	rjmp	.+186    	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 1:
			ptr ->PORT_R.bits.bit1 = Copy_u8Value;
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	98 2f       	mov	r25, r24
     f86:	99 0f       	add	r25, r25
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	8d 7f       	andi	r24, 0xFD	; 253
     f8c:	89 2b       	or	r24, r25
     f8e:	82 83       	std	Z+2, r24	; 0x02
     f90:	51 c0       	rjmp	.+162    	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 2:
			ptr ->PORT_R.bits.bit2 = Copy_u8Value;
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	81 70       	andi	r24, 0x01	; 1
     f9c:	98 2f       	mov	r25, r24
     f9e:	99 0f       	add	r25, r25
     fa0:	99 0f       	add	r25, r25
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	8b 7f       	andi	r24, 0xFB	; 251
     fa6:	89 2b       	or	r24, r25
     fa8:	82 83       	std	Z+2, r24	; 0x02
     faa:	44 c0       	rjmp	.+136    	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 3:
			ptr ->PORT_R.bits.bit3 = Copy_u8Value;
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	81 70       	andi	r24, 0x01	; 1
     fb6:	98 2f       	mov	r25, r24
     fb8:	99 0f       	add	r25, r25
     fba:	99 0f       	add	r25, r25
     fbc:	99 0f       	add	r25, r25
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	89 2b       	or	r24, r25
     fc4:	82 83       	std	Z+2, r24	; 0x02
     fc6:	36 c0       	rjmp	.+108    	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 4:
			ptr ->PORT_R.bits.bit4 = Copy_u8Value;
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	e9 81       	ldd	r30, Y+1	; 0x01
     fce:	fa 81       	ldd	r31, Y+2	; 0x02
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	98 2f       	mov	r25, r24
     fd4:	92 95       	swap	r25
     fd6:	90 7f       	andi	r25, 0xF0	; 240
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	8f 7e       	andi	r24, 0xEF	; 239
     fdc:	89 2b       	or	r24, r25
     fde:	82 83       	std	Z+2, r24	; 0x02
     fe0:	29 c0       	rjmp	.+82     	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 5:
			ptr ->PORT_R.bits.bit5 = Copy_u8Value;
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	81 70       	andi	r24, 0x01	; 1
     fe6:	e9 81       	ldd	r30, Y+1	; 0x01
     fe8:	fa 81       	ldd	r31, Y+2	; 0x02
     fea:	81 70       	andi	r24, 0x01	; 1
     fec:	98 2f       	mov	r25, r24
     fee:	92 95       	swap	r25
     ff0:	99 0f       	add	r25, r25
     ff2:	90 7e       	andi	r25, 0xE0	; 224
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	8f 7d       	andi	r24, 0xDF	; 223
     ff8:	89 2b       	or	r24, r25
     ffa:	82 83       	std	Z+2, r24	; 0x02
     ffc:	1b c0       	rjmp	.+54     	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 6:
			ptr ->PORT_R.bits.bit6 = Copy_u8Value;
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	98 2f       	mov	r25, r24
    100a:	92 95       	swap	r25
    100c:	99 0f       	add	r25, r25
    100e:	99 0f       	add	r25, r25
    1010:	90 7c       	andi	r25, 0xC0	; 192
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	8f 7b       	andi	r24, 0xBF	; 191
    1016:	89 2b       	or	r24, r25
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	0c c0       	rjmp	.+24     	; 0x1034 <DIO_voidSetPinValue+0x156>
			break;
		case 7:
			ptr ->PORT_R.bits.bit7 = Copy_u8Value;
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	81 70       	andi	r24, 0x01	; 1
    1020:	e9 81       	ldd	r30, Y+1	; 0x01
    1022:	fa 81       	ldd	r31, Y+2	; 0x02
    1024:	98 2f       	mov	r25, r24
    1026:	97 95       	ror	r25
    1028:	99 27       	eor	r25, r25
    102a:	97 95       	ror	r25
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	8f 77       	andi	r24, 0x7F	; 127
    1030:	89 2b       	or	r24, r25
    1032:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
}
    1034:	26 96       	adiw	r28, 0x06	; 6
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	27 97       	sbiw	r28, 0x07	; 7
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	9b 83       	std	Y+3, r25	; 0x03
    105c:	8a 83       	std	Y+2, r24	; 0x02
    105e:	6c 83       	std	Y+4, r22	; 0x04
	u8 pinValue;
	switch(Copy_u8PinId)
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3f 83       	std	Y+7, r19	; 0x07
    1068:	2e 83       	std	Y+6, r18	; 0x06
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	9f 81       	ldd	r25, Y+7	; 0x07
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	91 05       	cpc	r25, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <DIO_voidGetPinValue+0x30>
    1074:	3e c0       	rjmp	.+124    	; 0x10f2 <DIO_voidGetPinValue+0xac>
    1076:	2e 81       	ldd	r18, Y+6	; 0x06
    1078:	3f 81       	ldd	r19, Y+7	; 0x07
    107a:	24 30       	cpi	r18, 0x04	; 4
    107c:	31 05       	cpc	r19, r1
    107e:	7c f4       	brge	.+30     	; 0x109e <DIO_voidGetPinValue+0x58>
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	9f 81       	ldd	r25, Y+7	; 0x07
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	29 f1       	breq	.+74     	; 0x10d4 <DIO_voidGetPinValue+0x8e>
    108a:	2e 81       	ldd	r18, Y+6	; 0x06
    108c:	3f 81       	ldd	r19, Y+7	; 0x07
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	3c f5       	brge	.+78     	; 0x10e2 <DIO_voidGetPinValue+0x9c>
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	9f 81       	ldd	r25, Y+7	; 0x07
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	b1 f0       	breq	.+44     	; 0x10c8 <DIO_voidGetPinValue+0x82>
    109c:	55 c0       	rjmp	.+170    	; 0x1148 <DIO_voidGetPinValue+0x102>
    109e:	2e 81       	ldd	r18, Y+6	; 0x06
    10a0:	3f 81       	ldd	r19, Y+7	; 0x07
    10a2:	25 30       	cpi	r18, 0x05	; 5
    10a4:	31 05       	cpc	r19, r1
    10a6:	b1 f1       	breq	.+108    	; 0x1114 <DIO_voidGetPinValue+0xce>
    10a8:	8e 81       	ldd	r24, Y+6	; 0x06
    10aa:	9f 81       	ldd	r25, Y+7	; 0x07
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	91 05       	cpc	r25, r1
    10b0:	4c f1       	brlt	.+82     	; 0x1104 <DIO_voidGetPinValue+0xbe>
    10b2:	2e 81       	ldd	r18, Y+6	; 0x06
    10b4:	3f 81       	ldd	r19, Y+7	; 0x07
    10b6:	26 30       	cpi	r18, 0x06	; 6
    10b8:	31 05       	cpc	r19, r1
    10ba:	a9 f1       	breq	.+106    	; 0x1126 <DIO_voidGetPinValue+0xe0>
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	87 30       	cpi	r24, 0x07	; 7
    10c2:	91 05       	cpc	r25, r1
    10c4:	d1 f1       	breq	.+116    	; 0x113a <DIO_voidGetPinValue+0xf4>
    10c6:	40 c0       	rjmp	.+128    	; 0x1148 <DIO_voidGetPinValue+0x102>
		{
	case 0:
				pinValue =  ptr ->PIN_R.bits.bit0 ;
    10c8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ca:	fb 81       	ldd	r31, Y+3	; 0x03
    10cc:	80 81       	ld	r24, Z
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	3a c0       	rjmp	.+116    	; 0x1148 <DIO_voidGetPinValue+0x102>
				break;
			case 1:
				pinValue =  ptr ->PIN_R.bits.bit1;
    10d4:	ea 81       	ldd	r30, Y+2	; 0x02
    10d6:	fb 81       	ldd	r31, Y+3	; 0x03
    10d8:	80 81       	ld	r24, Z
    10da:	86 95       	lsr	r24
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	33 c0       	rjmp	.+102    	; 0x1148 <DIO_voidGetPinValue+0x102>
				break;
			case 2:
				return ptr ->PIN_R.bits.bit2;
    10e2:	ea 81       	ldd	r30, Y+2	; 0x02
    10e4:	fb 81       	ldd	r31, Y+3	; 0x03
    10e6:	80 81       	ld	r24, Z
    10e8:	86 95       	lsr	r24
    10ea:	86 95       	lsr	r24
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	8d 83       	std	Y+5, r24	; 0x05
    10f0:	2d c0       	rjmp	.+90     	; 0x114c <DIO_voidGetPinValue+0x106>
				break;
			case 3:
				return ptr ->PIN_R.bits.bit3;
    10f2:	ea 81       	ldd	r30, Y+2	; 0x02
    10f4:	fb 81       	ldd	r31, Y+3	; 0x03
    10f6:	80 81       	ld	r24, Z
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	8d 83       	std	Y+5, r24	; 0x05
    1102:	24 c0       	rjmp	.+72     	; 0x114c <DIO_voidGetPinValue+0x106>
				break;
			case 4:
				return ptr ->PIN_R.bits.bit4;
    1104:	ea 81       	ldd	r30, Y+2	; 0x02
    1106:	fb 81       	ldd	r31, Y+3	; 0x03
    1108:	80 81       	ld	r24, Z
    110a:	82 95       	swap	r24
    110c:	8f 70       	andi	r24, 0x0F	; 15
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	1c c0       	rjmp	.+56     	; 0x114c <DIO_voidGetPinValue+0x106>
				break;
			case 5:
				pinValue = ptr ->PIN_R.bits.bit5;
    1114:	ea 81       	ldd	r30, Y+2	; 0x02
    1116:	fb 81       	ldd	r31, Y+3	; 0x03
    1118:	80 81       	ld	r24, Z
    111a:	82 95       	swap	r24
    111c:	86 95       	lsr	r24
    111e:	87 70       	andi	r24, 0x07	; 7
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <DIO_voidGetPinValue+0x102>
				break;
			case 6:
				pinValue = ptr ->PIN_R.bits.bit6;
    1126:	ea 81       	ldd	r30, Y+2	; 0x02
    1128:	fb 81       	ldd	r31, Y+3	; 0x03
    112a:	80 81       	ld	r24, Z
    112c:	82 95       	swap	r24
    112e:	86 95       	lsr	r24
    1130:	86 95       	lsr	r24
    1132:	83 70       	andi	r24, 0x03	; 3
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <DIO_voidGetPinValue+0x102>
				break;
			case 7:
				pinValue = ptr ->PIN_R.bits.bit7;
    113a:	ea 81       	ldd	r30, Y+2	; 0x02
    113c:	fb 81       	ldd	r31, Y+3	; 0x03
    113e:	80 81       	ld	r24, Z
    1140:	88 1f       	adc	r24, r24
    1142:	88 27       	eor	r24, r24
    1144:	88 1f       	adc	r24, r24
    1146:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		return pinValue;
    1148:	99 81       	ldd	r25, Y+1	; 0x01
    114a:	9d 83       	std	Y+5, r25	; 0x05
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    114e:	27 96       	adiw	r28, 0x07	; 7
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(GPIO_REGISTERS* ptr, u8 Copy_u8Direction)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <DIO_voidSetPortDirection+0x6>
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->direction.ALL_BITS = Copy_u8Direction;
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	81 83       	std	Z+1, r24	; 0x01
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(GPIO_REGISTERS* ptr, u8 Copy_u8Value)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_voidSetPortValue+0x6>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->PORT_R.ALL_BITS = Copy_u8Value;
    1198:	e9 81       	ldd	r30, Y+1	; 0x01
    119a:	fa 81       	ldd	r31, Y+2	; 0x02
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	82 83       	std	Z+2, r24	; 0x02
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(GPIO_REGISTERS* ptr)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <DIO_voidGetPortValue+0x6>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
	return ptr -> PORT_R.ALL_BITS;
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	82 81       	ldd	r24, Z+2	; 0x02
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <Keybad_init>:
#include<util/delay.h>



void Keybad_init()
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	/*configure rows(PC2 -> PC5) as output*/
	PERIPHRAL_C ->direction.ALL_BITS |= 0b00111100;
    11d2:	a3 e3       	ldi	r26, 0x33	; 51
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e3 e3       	ldi	r30, 0x33	; 51
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	8c 63       	ori	r24, 0x3C	; 60
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	8c 93       	st	X, r24

	/*initialize all rows = 1*/
	PERIPHRAL_C ->PORT_R.ALL_BITS |= 0b00111100;
    11e2:	a3 e3       	ldi	r26, 0x33	; 51
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e3 e3       	ldi	r30, 0x33	; 51
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	8c 63       	ori	r24, 0x3C	; 60
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	8c 93       	st	X, r24

	/*configure cols(PD3, PD5, PD6, PD7) as input*/
	PERIPHRAL_D ->direction.ALL_BITS &= 0b00010111;
    11f2:	a0 e3       	ldi	r26, 0x30	; 48
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e0 e3       	ldi	r30, 0x30	; 48
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	81 81       	ldd	r24, Z+1	; 0x01
    11fc:	87 71       	andi	r24, 0x17	; 23
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	8c 93       	st	X, r24
    1202:	11 97       	sbiw	r26, 0x01	; 1

}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <Keybad_getValue>:
u8 Keybad_getValue()
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	a9 97       	sbiw	r28, 0x29	; 41
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	u8 rows[4] = {2, 3, 4, 5};
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	8a a3       	std	Y+34, r24	; 0x22
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	8b a3       	std	Y+35, r24	; 0x23
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	8c a3       	std	Y+36, r24	; 0x24
    122a:	85 e0       	ldi	r24, 0x05	; 5
    122c:	8d a3       	std	Y+37, r24	; 0x25
	u8 cols[4] = {3, 5, 6, 7};
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	8e a3       	std	Y+38, r24	; 0x26
    1232:	85 e0       	ldi	r24, 0x05	; 5
    1234:	8f a3       	std	Y+39, r24	; 0x27
    1236:	86 e0       	ldi	r24, 0x06	; 6
    1238:	88 a7       	std	Y+40, r24	; 0x28
    123a:	87 e0       	ldi	r24, 0x07	; 7
    123c:	89 a7       	std	Y+41, r24	; 0x29
	while(1)
	{
	/*loop on rows*/
		for(int r=0; r<4; r++)
    123e:	18 a2       	std	Y+32, r1	; 0x20
    1240:	1f 8e       	std	Y+31, r1	; 0x1f
    1242:	5d c1       	rjmp	.+698    	; 0x14fe <Keybad_getValue+0x2f4>
		{
			//DIO_voidSetPinDirection(PERIPHRAL_C, i+2, 1);
			DIO_voidSetPinValue(PERIPHRAL_C, rows[r], 0);
    1244:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1246:	38 a1       	ldd	r19, Y+32	; 0x20
    1248:	ce 01       	movw	r24, r28
    124a:	82 96       	adiw	r24, 0x22	; 34
    124c:	fc 01       	movw	r30, r24
    124e:	e2 0f       	add	r30, r18
    1250:	f3 1f       	adc	r31, r19
    1252:	20 81       	ld	r18, Z
    1254:	83 e3       	ldi	r24, 0x33	; 51
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	62 2f       	mov	r22, r18
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
			/*loop on cols*/
			for(int c=0; c<4; c++)
    1260:	1e 8e       	std	Y+30, r1	; 0x1e
    1262:	1d 8e       	std	Y+29, r1	; 0x1d
    1264:	c1 c0       	rjmp	.+386    	; 0x13e8 <Keybad_getValue+0x1de>
			{
				if(DIO_voidGetPinValue(PERIPHRAL_D, cols[c]) == 0)
    1266:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1268:	3e 8d       	ldd	r19, Y+30	; 0x1e
    126a:	ce 01       	movw	r24, r28
    126c:	86 96       	adiw	r24, 0x26	; 38
    126e:	fc 01       	movw	r30, r24
    1270:	e2 0f       	add	r30, r18
    1272:	f3 1f       	adc	r31, r19
    1274:	20 81       	ld	r18, Z
    1276:	80 e3       	ldi	r24, 0x30	; 48
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	62 2f       	mov	r22, r18
    127c:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
    1280:	88 23       	and	r24, r24
    1282:	09 f0       	breq	.+2      	; 0x1286 <Keybad_getValue+0x7c>
    1284:	ac c0       	rjmp	.+344    	; 0x13de <Keybad_getValue+0x1d4>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 ef       	ldi	r26, 0xF0	; 240
    128c:	b1 e4       	ldi	r27, 0x41	; 65
    128e:	89 8f       	std	Y+25, r24	; 0x19
    1290:	9a 8f       	std	Y+26, r25	; 0x1a
    1292:	ab 8f       	std	Y+27, r26	; 0x1b
    1294:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	69 8d       	ldd	r22, Y+25	; 0x19
    1298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    129a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	53 e4       	ldi	r21, 0x43	; 67
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8d 8b       	std	Y+21, r24	; 0x15
    12b0:	9e 8b       	std	Y+22, r25	; 0x16
    12b2:	af 8b       	std	Y+23, r26	; 0x17
    12b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b6:	6d 89       	ldd	r22, Y+21	; 0x15
    12b8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ba:	8f 89       	ldd	r24, Y+23	; 0x17
    12bc:	98 8d       	ldd	r25, Y+24	; 0x18
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <Keybad_getValue+0xce>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9c 8b       	std	Y+20, r25	; 0x14
    12d4:	8b 8b       	std	Y+19, r24	; 0x13
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <Keybad_getValue+0x14c>
	else if (__tmp > 65535)
    12d8:	6d 89       	ldd	r22, Y+21	; 0x15
    12da:	7e 89       	ldd	r23, Y+22	; 0x16
    12dc:	8f 89       	ldd	r24, Y+23	; 0x17
    12de:	98 8d       	ldd	r25, Y+24	; 0x18
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <Keybad_getValue+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	69 8d       	ldd	r22, Y+25	; 0x19
    12f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9c 8b       	std	Y+20, r25	; 0x14
    1316:	8b 8b       	std	Y+19, r24	; 0x13
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <Keybad_getValue+0x12e>
    131a:	89 e1       	ldi	r24, 0x19	; 25
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9a 8b       	std	Y+18, r25	; 0x12
    1320:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1322:	89 89       	ldd	r24, Y+17	; 0x11
    1324:	9a 89       	ldd	r25, Y+18	; 0x12
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <Keybad_getValue+0x11c>
    132a:	9a 8b       	std	Y+18, r25	; 0x12
    132c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8b 89       	ldd	r24, Y+19	; 0x13
    1330:	9c 89       	ldd	r25, Y+20	; 0x14
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9c 8b       	std	Y+20, r25	; 0x14
    1336:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8b 89       	ldd	r24, Y+19	; 0x13
    133a:	9c 89       	ldd	r25, Y+20	; 0x14
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <Keybad_getValue+0x110>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <Keybad_getValue+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6d 89       	ldd	r22, Y+21	; 0x15
    1344:	7e 89       	ldd	r23, Y+22	; 0x16
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	98 8d       	ldd	r25, Y+24	; 0x18
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9c 8b       	std	Y+20, r25	; 0x14
    1354:	8b 8b       	std	Y+19, r24	; 0x13
    1356:	8b 89       	ldd	r24, Y+19	; 0x13
    1358:	9c 89       	ldd	r25, Y+20	; 0x14
    135a:	98 8b       	std	Y+16, r25	; 0x10
    135c:	8f 87       	std	Y+15, r24	; 0x0f
    135e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1360:	98 89       	ldd	r25, Y+16	; 0x10
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <Keybad_getValue+0x158>
    1366:	98 8b       	std	Y+16, r25	; 0x10
    1368:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(30); /*handel debouncing*/
					if(DIO_voidGetPinValue(PERIPHRAL_D, cols[c]) == 0)
    136a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    136c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    136e:	ce 01       	movw	r24, r28
    1370:	86 96       	adiw	r24, 0x26	; 38
    1372:	fc 01       	movw	r30, r24
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	20 81       	ld	r18, Z
    137a:	80 e3       	ldi	r24, 0x30	; 48
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	62 2f       	mov	r22, r18
    1380:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
    1384:	88 23       	and	r24, r24
    1386:	59 f5       	brne	.+86     	; 0x13de <Keybad_getValue+0x1d4>
					{
						key = keybad_arr1[r][c];
    1388:	8f 8d       	ldd	r24, Y+31	; 0x1f
    138a:	98 a1       	ldd	r25, Y+32	; 0x20
    138c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    138e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	fc 01       	movw	r30, r24
    13a2:	e3 57       	subi	r30, 0x73	; 115
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	91 81       	ldd	r25, Z+1	; 0x01
    13aa:	89 a3       	std	Y+33, r24	; 0x21
						while(DIO_voidGetPinValue(PERIPHRAL_D, cols[c]) == 0);
    13ac:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13ae:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13b0:	ce 01       	movw	r24, r28
    13b2:	86 96       	adiw	r24, 0x26	; 38
    13b4:	fc 01       	movw	r30, r24
    13b6:	e2 0f       	add	r30, r18
    13b8:	f3 1f       	adc	r31, r19
    13ba:	20 81       	ld	r18, Z
    13bc:	80 e3       	ldi	r24, 0x30	; 48
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	62 2f       	mov	r22, r18
    13c2:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
    13c6:	88 23       	and	r24, r24
    13c8:	89 f3       	breq	.-30     	; 0x13ac <Keybad_getValue+0x1a2>
						return key;
    13ca:	89 a1       	ldd	r24, Y+33	; 0x21

			_delay_ms(20);
		}

	}
}
    13cc:	a9 96       	adiw	r28, 0x29	; 41
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret
		for(int r=0; r<4; r++)
		{
			//DIO_voidSetPinDirection(PERIPHRAL_C, i+2, 1);
			DIO_voidSetPinValue(PERIPHRAL_C, rows[r], 0);
			/*loop on cols*/
			for(int c=0; c<4; c++)
    13de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	9e 8f       	std	Y+30, r25	; 0x1e
    13e6:	8d 8f       	std	Y+29, r24	; 0x1d
    13e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ec:	84 30       	cpi	r24, 0x04	; 4
    13ee:	91 05       	cpc	r25, r1
    13f0:	0c f4       	brge	.+2      	; 0x13f4 <Keybad_getValue+0x1ea>
    13f2:	39 cf       	rjmp	.-398    	; 0x1266 <Keybad_getValue+0x5c>
						return key;
					}
				}
			}

			DIO_voidSetPinValue(PERIPHRAL_C, rows[r], 1);
    13f4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13f6:	38 a1       	ldd	r19, Y+32	; 0x20
    13f8:	ce 01       	movw	r24, r28
    13fa:	82 96       	adiw	r24, 0x22	; 34
    13fc:	fc 01       	movw	r30, r24
    13fe:	e2 0f       	add	r30, r18
    1400:	f3 1f       	adc	r31, r19
    1402:	20 81       	ld	r18, Z
    1404:	83 e3       	ldi	r24, 0x33	; 51
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	62 2f       	mov	r22, r18
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 ea       	ldi	r26, 0xA0	; 160
    1416:	b1 e4       	ldi	r27, 0x41	; 65
    1418:	8b 87       	std	Y+11, r24	; 0x0b
    141a:	9c 87       	std	Y+12, r25	; 0x0c
    141c:	ad 87       	std	Y+13, r26	; 0x0d
    141e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6b 85       	ldd	r22, Y+11	; 0x0b
    1422:	7c 85       	ldd	r23, Y+12	; 0x0c
    1424:	8d 85       	ldd	r24, Y+13	; 0x0d
    1426:	9e 85       	ldd	r25, Y+14	; 0x0e
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a e7       	ldi	r20, 0x7A	; 122
    142e:	53 e4       	ldi	r21, 0x43	; 67
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	8f 83       	std	Y+7, r24	; 0x07
    143a:	98 87       	std	Y+8, r25	; 0x08
    143c:	a9 87       	std	Y+9, r26	; 0x09
    143e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <Keybad_getValue+0x258>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <Keybad_getValue+0x2d6>
	else if (__tmp > 65535)
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <Keybad_getValue+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6b 85       	ldd	r22, Y+11	; 0x0b
    147c:	7c 85       	ldd	r23, Y+12	; 0x0c
    147e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1480:	9e 85       	ldd	r25, Y+14	; 0x0e
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <Keybad_getValue+0x2b8>
    14a4:	89 e1       	ldi	r24, 0x19	; 25
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <Keybad_getValue+0x2a6>
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <Keybad_getValue+0x29a>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <Keybad_getValue+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <Keybad_getValue+0x2e2>
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
	u8 rows[4] = {2, 3, 4, 5};
	u8 cols[4] = {3, 5, 6, 7};
	while(1)
	{
	/*loop on rows*/
		for(int r=0; r<4; r++)
    14f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14f6:	98 a1       	ldd	r25, Y+32	; 0x20
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	98 a3       	std	Y+32, r25	; 0x20
    14fc:	8f 8f       	std	Y+31, r24	; 0x1f
    14fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1500:	98 a1       	ldd	r25, Y+32	; 0x20
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	91 05       	cpc	r25, r1
    1506:	0c f4       	brge	.+2      	; 0x150a <Keybad_getValue+0x300>
    1508:	9d ce       	rjmp	.-710    	; 0x1244 <Keybad_getValue+0x3a>
    150a:	99 ce       	rjmp	.-718    	; 0x123e <Keybad_getValue+0x34>

0000150c <LCD_void_Init>:
#include"util/delay.h"
#include<string.h>
#include"BIT_MATH.h"

void LCD_void_Init(void)
{
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	c4 55       	subi	r28, 0x54	; 84
    151a:	d0 40       	sbci	r29, 0x00	; 0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
#if(LCD_MODE== _4_BIT_MODE)
	DIO_voidSetPinDirection(LCD_PIN4_PORT, LCD_PIN4_PIN, 1);
    1526:	89 e3       	ldi	r24, 0x39	; 57
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	63 e0       	ldi	r22, 0x03	; 3
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN5_PORT, LCD_PIN5_PIN, 1);
    1532:	89 e3       	ldi	r24, 0x39	; 57
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN6_PORT, LCD_PIN6_PIN, 1);
    153e:	89 e3       	ldi	r24, 0x39	; 57
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	61 e0       	ldi	r22, 0x01	; 1
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN7_PORT, LCD_PIN7_PIN, 1);
    154a:	89 e3       	ldi	r24, 0x39	; 57
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT, EN_PIN, 1);
    1556:	89 e3       	ldi	r24, 0x39	; 57
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	65 e0       	ldi	r22, 0x05	; 5
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RS_PORT, RS_PIN, 1);
    1562:	89 e3       	ldi	r24, 0x39	; 57
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	66 e0       	ldi	r22, 0x06	; 6
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	0e 94 bb 06 	call	0xd76	; 0xd76 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(RS_PORT, RS_PIN, 0);
    156e:	89 e3       	ldi	r24, 0x39	; 57
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	66 e0       	ldi	r22, 0x06	; 6
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
    157a:	fe 01       	movw	r30, r28
    157c:	ef 5a       	subi	r30, 0xAF	; 175
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a8 ec       	ldi	r26, 0xC8	; 200
    1586:	b2 e4       	ldi	r27, 0x42	; 66
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	8e 01       	movw	r16, r28
    1592:	03 5b       	subi	r16, 0xB3	; 179
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
    1596:	fe 01       	movw	r30, r28
    1598:	ef 5a       	subi	r30, 0xAF	; 175
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e7       	ldi	r20, 0x7A	; 122
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	f8 01       	movw	r30, r16
    15b6:	80 83       	st	Z, r24
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	a2 83       	std	Z+2, r26	; 0x02
    15bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15be:	fe 01       	movw	r30, r28
    15c0:	e3 5b       	subi	r30, 0xB3	; 179
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	44 f4       	brge	.+16     	; 0x15ec <LCD_void_Init+0xe0>
		__ticks = 1;
    15dc:	fe 01       	movw	r30, r28
    15de:	e5 5b       	subi	r30, 0xB5	; 181
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	80 83       	st	Z, r24
    15ea:	64 c0       	rjmp	.+200    	; 0x16b4 <LCD_void_Init+0x1a8>
	else if (__tmp > 65535)
    15ec:	fe 01       	movw	r30, r28
    15ee:	e3 5b       	subi	r30, 0xB3	; 179
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	0c f0       	brlt	.+2      	; 0x160c <LCD_void_Init+0x100>
    160a:	43 c0       	rjmp	.+134    	; 0x1692 <LCD_void_Init+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160c:	fe 01       	movw	r30, r28
    160e:	ef 5a       	subi	r30, 0xAF	; 175
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8e 01       	movw	r16, r28
    162c:	05 5b       	subi	r16, 0xB5	; 181
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	f8 01       	movw	r30, r16
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	1f c0       	rjmp	.+62     	; 0x1682 <LCD_void_Init+0x176>
    1644:	fe 01       	movw	r30, r28
    1646:	e7 5b       	subi	r30, 0xB7	; 183
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	89 e1       	ldi	r24, 0x19	; 25
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	80 83       	st	Z, r24
    1652:	fe 01       	movw	r30, r28
    1654:	e7 5b       	subi	r30, 0xB7	; 183
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_void_Init+0x150>
    1660:	fe 01       	movw	r30, r28
    1662:	e7 5b       	subi	r30, 0xB7	; 183
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	de 01       	movw	r26, r28
    166c:	a5 5b       	subi	r26, 0xB5	; 181
    166e:	bf 4f       	sbci	r27, 0xFF	; 255
    1670:	fe 01       	movw	r30, r28
    1672:	e5 5b       	subi	r30, 0xB5	; 181
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	11 96       	adiw	r26, 0x01	; 1
    167e:	9c 93       	st	X, r25
    1680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	fe 01       	movw	r30, r28
    1684:	e5 5b       	subi	r30, 0xB5	; 181
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	d1 f6       	brne	.-76     	; 0x1644 <LCD_void_Init+0x138>
    1690:	27 c0       	rjmp	.+78     	; 0x16e0 <LCD_void_Init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	8e 01       	movw	r16, r28
    1694:	05 5b       	subi	r16, 0xB5	; 181
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	fe 01       	movw	r30, r28
    169a:	e3 5b       	subi	r30, 0xB3	; 179
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	f8 01       	movw	r30, r16
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	de 01       	movw	r26, r28
    16b6:	a9 5b       	subi	r26, 0xB9	; 185
    16b8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ba:	fe 01       	movw	r30, r28
    16bc:	e5 5b       	subi	r30, 0xB5	; 181
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	8d 93       	st	X+, r24
    16c6:	9c 93       	st	X, r25
    16c8:	fe 01       	movw	r30, r28
    16ca:	e9 5b       	subi	r30, 0xB9	; 185
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_void_Init+0x1c6>
    16d6:	fe 01       	movw	r30, r28
    16d8:	e9 5b       	subi	r30, 0xB9	; 185
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24


	_delay_ms(100);
	LCD_void_sendCommand(LCD_RETURN_H);
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    16e6:	fe 01       	movw	r30, r28
    16e8:	ed 5b       	subi	r30, 0xBD	; 189
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e2       	ldi	r26, 0x20	; 32
    16f2:	b1 e4       	ldi	r27, 0x41	; 65
    16f4:	80 83       	st	Z, r24
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	a2 83       	std	Z+2, r26	; 0x02
    16fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	8e 01       	movw	r16, r28
    16fe:	01 5c       	subi	r16, 0xC1	; 193
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5b       	subi	r30, 0xBD	; 189
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	f8 01       	movw	r30, r16
    1722:	80 83       	st	Z, r24
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	a2 83       	std	Z+2, r26	; 0x02
    1728:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172a:	fe 01       	movw	r30, r28
    172c:	ff 96       	adiw	r30, 0x3f	; 63
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	93 81       	ldd	r25, Z+3	; 0x03
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_void_Init+0x244>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9e af       	std	Y+62, r25	; 0x3e
    174c:	8d af       	std	Y+61, r24	; 0x3d
    174e:	46 c0       	rjmp	.+140    	; 0x17dc <LCD_void_Init+0x2d0>
	else if (__tmp > 65535)
    1750:	fe 01       	movw	r30, r28
    1752:	ff 96       	adiw	r30, 0x3f	; 63
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	64 f5       	brge	.+88     	; 0x17c4 <LCD_void_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	fe 01       	movw	r30, r28
    176e:	ed 5b       	subi	r30, 0xBD	; 189
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e af       	std	Y+62, r25	; 0x3e
    1798:	8d af       	std	Y+61, r24	; 0x3d
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <LCD_void_Init+0x2ae>
    179c:	89 e1       	ldi	r24, 0x19	; 25
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9c af       	std	Y+60, r25	; 0x3c
    17a2:	8b af       	std	Y+59, r24	; 0x3b
    17a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    17a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_void_Init+0x29c>
    17ac:	9c af       	std	Y+60, r25	; 0x3c
    17ae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9e af       	std	Y+62, r25	; 0x3e
    17b8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    17bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <LCD_void_Init+0x290>
    17c2:	16 c0       	rjmp	.+44     	; 0x17f0 <LCD_void_Init+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	fe 01       	movw	r30, r28
    17c6:	ff 96       	adiw	r30, 0x3f	; 63
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e af       	std	Y+62, r25	; 0x3e
    17da:	8d af       	std	Y+61, r24	; 0x3d
    17dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    17de:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e0:	9a af       	std	Y+58, r25	; 0x3a
    17e2:	89 af       	std	Y+57, r24	; 0x39
    17e4:	89 ad       	ldd	r24, Y+57	; 0x39
    17e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_void_Init+0x2dc>
    17ec:	9a af       	std	Y+58, r25	; 0x3a
    17ee:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_void_sendCommand(FNC_SET_FOUR_BIT_MODE);
    17f0:	88 e2       	ldi	r24, 0x28	; 40
    17f2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e8       	ldi	r26, 0x80	; 128
    17fc:	bf e3       	ldi	r27, 0x3F	; 63
    17fe:	8d ab       	std	Y+53, r24	; 0x35
    1800:	9e ab       	std	Y+54, r25	; 0x36
    1802:	af ab       	std	Y+55, r26	; 0x37
    1804:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6d a9       	ldd	r22, Y+53	; 0x35
    1808:	7e a9       	ldd	r23, Y+54	; 0x36
    180a:	8f a9       	ldd	r24, Y+55	; 0x37
    180c:	98 ad       	ldd	r25, Y+56	; 0x38
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	53 e4       	ldi	r21, 0x43	; 67
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	89 ab       	std	Y+49, r24	; 0x31
    1820:	9a ab       	std	Y+50, r25	; 0x32
    1822:	ab ab       	std	Y+51, r26	; 0x33
    1824:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <LCD_void_Init+0x33c>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	98 ab       	std	Y+48, r25	; 0x30
    1844:	8f a7       	std	Y+47, r24	; 0x2f
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <LCD_void_Init+0x3ba>
	else if (__tmp > 65535)
    1848:	69 a9       	ldd	r22, Y+49	; 0x31
    184a:	7a a9       	ldd	r23, Y+50	; 0x32
    184c:	8b a9       	ldd	r24, Y+51	; 0x33
    184e:	9c a9       	ldd	r25, Y+52	; 0x34
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <LCD_void_Init+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6d a9       	ldd	r22, Y+53	; 0x35
    1862:	7e a9       	ldd	r23, Y+54	; 0x36
    1864:	8f a9       	ldd	r24, Y+55	; 0x37
    1866:	98 ad       	ldd	r25, Y+56	; 0x38
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	98 ab       	std	Y+48, r25	; 0x30
    1886:	8f a7       	std	Y+47, r24	; 0x2f
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <LCD_void_Init+0x39c>
    188a:	89 e1       	ldi	r24, 0x19	; 25
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9e a7       	std	Y+46, r25	; 0x2e
    1890:	8d a7       	std	Y+45, r24	; 0x2d
    1892:	8d a5       	ldd	r24, Y+45	; 0x2d
    1894:	9e a5       	ldd	r25, Y+46	; 0x2e
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_void_Init+0x38a>
    189a:	9e a7       	std	Y+46, r25	; 0x2e
    189c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a0:	98 a9       	ldd	r25, Y+48	; 0x30
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	98 ab       	std	Y+48, r25	; 0x30
    18a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18aa:	98 a9       	ldd	r25, Y+48	; 0x30
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <LCD_void_Init+0x37e>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <LCD_void_Init+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	98 ab       	std	Y+48, r25	; 0x30
    18c4:	8f a7       	std	Y+47, r24	; 0x2f
    18c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ca:	9c a7       	std	Y+44, r25	; 0x2c
    18cc:	8b a7       	std	Y+43, r24	; 0x2b
    18ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_void_Init+0x3c6>
    18d6:	9c a7       	std	Y+44, r25	; 0x2c
    18d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_void_sendCommand(CURSOR_ON_DISPLAY_ON);
    18da:	8e e0       	ldi	r24, 0x0E	; 14
    18dc:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 e8       	ldi	r26, 0x80	; 128
    18e6:	bf e3       	ldi	r27, 0x3F	; 63
    18e8:	8f a3       	std	Y+39, r24	; 0x27
    18ea:	98 a7       	std	Y+40, r25	; 0x28
    18ec:	a9 a7       	std	Y+41, r26	; 0x29
    18ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f0:	6f a1       	ldd	r22, Y+39	; 0x27
    18f2:	78 a5       	ldd	r23, Y+40	; 0x28
    18f4:	89 a5       	ldd	r24, Y+41	; 0x29
    18f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a e7       	ldi	r20, 0x7A	; 122
    18fe:	53 e4       	ldi	r21, 0x43	; 67
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8b a3       	std	Y+35, r24	; 0x23
    190a:	9c a3       	std	Y+36, r25	; 0x24
    190c:	ad a3       	std	Y+37, r26	; 0x25
    190e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1910:	6b a1       	ldd	r22, Y+35	; 0x23
    1912:	7c a1       	ldd	r23, Y+36	; 0x24
    1914:	8d a1       	ldd	r24, Y+37	; 0x25
    1916:	9e a1       	ldd	r25, Y+38	; 0x26
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	2c f4       	brge	.+10     	; 0x1932 <LCD_void_Init+0x426>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9a a3       	std	Y+34, r25	; 0x22
    192e:	89 a3       	std	Y+33, r24	; 0x21
    1930:	3f c0       	rjmp	.+126    	; 0x19b0 <LCD_void_Init+0x4a4>
	else if (__tmp > 65535)
    1932:	6b a1       	ldd	r22, Y+35	; 0x23
    1934:	7c a1       	ldd	r23, Y+36	; 0x24
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	4c f5       	brge	.+82     	; 0x199c <LCD_void_Init+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	6f a1       	ldd	r22, Y+39	; 0x27
    194c:	78 a5       	ldd	r23, Y+40	; 0x28
    194e:	89 a5       	ldd	r24, Y+41	; 0x29
    1950:	9a a5       	ldd	r25, Y+42	; 0x2a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9a a3       	std	Y+34, r25	; 0x22
    1970:	89 a3       	std	Y+33, r24	; 0x21
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <LCD_void_Init+0x486>
    1974:	89 e1       	ldi	r24, 0x19	; 25
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	98 a3       	std	Y+32, r25	; 0x20
    197a:	8f 8f       	std	Y+31, r24	; 0x1f
    197c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    197e:	98 a1       	ldd	r25, Y+32	; 0x20
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_void_Init+0x474>
    1984:	98 a3       	std	Y+32, r25	; 0x20
    1986:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	89 a1       	ldd	r24, Y+33	; 0x21
    198a:	9a a1       	ldd	r25, Y+34	; 0x22
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	69 f7       	brne	.-38     	; 0x1974 <LCD_void_Init+0x468>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <LCD_void_Init+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	6b a1       	ldd	r22, Y+35	; 0x23
    199e:	7c a1       	ldd	r23, Y+36	; 0x24
    19a0:	8d a1       	ldd	r24, Y+37	; 0x25
    19a2:	9e a1       	ldd	r25, Y+38	; 0x26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	9a a3       	std	Y+34, r25	; 0x22
    19ae:	89 a3       	std	Y+33, r24	; 0x21
    19b0:	89 a1       	ldd	r24, Y+33	; 0x21
    19b2:	9a a1       	ldd	r25, Y+34	; 0x22
    19b4:	9e 8f       	std	Y+30, r25	; 0x1e
    19b6:	8d 8f       	std	Y+29, r24	; 0x1d
    19b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_void_Init+0x4b0>
    19c0:	9e 8f       	std	Y+30, r25	; 0x1e
    19c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_void_sendCommand(LCD_CLEAR);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e2       	ldi	r26, 0x20	; 32
    19d0:	b1 e4       	ldi	r27, 0x41	; 65
    19d2:	89 8f       	std	Y+25, r24	; 0x19
    19d4:	9a 8f       	std	Y+26, r25	; 0x1a
    19d6:	ab 8f       	std	Y+27, r26	; 0x1b
    19d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19da:	69 8d       	ldd	r22, Y+25	; 0x19
    19dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	4a e7       	ldi	r20, 0x7A	; 122
    19e8:	53 e4       	ldi	r21, 0x43	; 67
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	8d 8b       	std	Y+21, r24	; 0x15
    19f4:	9e 8b       	std	Y+22, r25	; 0x16
    19f6:	af 8b       	std	Y+23, r26	; 0x17
    19f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19fa:	6d 89       	ldd	r22, Y+21	; 0x15
    19fc:	7e 89       	ldd	r23, Y+22	; 0x16
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <LCD_void_Init+0x510>
		__ticks = 1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c 8b       	std	Y+20, r25	; 0x14
    1a18:	8b 8b       	std	Y+19, r24	; 0x13
    1a1a:	3f c0       	rjmp	.+126    	; 0x1a9a <LCD_void_Init+0x58e>
	else if (__tmp > 65535)
    1a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	57 e4       	ldi	r21, 0x47	; 71
    1a2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	4c f5       	brge	.+82     	; 0x1a86 <LCD_void_Init+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a34:	69 8d       	ldd	r22, Y+25	; 0x19
    1a36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e2       	ldi	r20, 0x20	; 32
    1a42:	51 e4       	ldi	r21, 0x41	; 65
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9c 8b       	std	Y+20, r25	; 0x14
    1a5a:	8b 8b       	std	Y+19, r24	; 0x13
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <LCD_void_Init+0x570>
    1a5e:	89 e1       	ldi	r24, 0x19	; 25
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9a 8b       	std	Y+18, r25	; 0x12
    1a64:	89 8b       	std	Y+17, r24	; 0x11
    1a66:	89 89       	ldd	r24, Y+17	; 0x11
    1a68:	9a 89       	ldd	r25, Y+18	; 0x12
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_void_Init+0x55e>
    1a6e:	9a 8b       	std	Y+18, r25	; 0x12
    1a70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	9c 8b       	std	Y+20, r25	; 0x14
    1a7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	69 f7       	brne	.-38     	; 0x1a5e <LCD_void_Init+0x552>
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <LCD_void_Init+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9c 8b       	std	Y+20, r25	; 0x14
    1a98:	8b 8b       	std	Y+19, r24	; 0x13
    1a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9e:	98 8b       	std	Y+16, r25	; 0x10
    1aa0:	8f 87       	std	Y+15, r24	; 0x0f
    1aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa4:	98 89       	ldd	r25, Y+16	; 0x10
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <LCD_void_Init+0x59a>
    1aaa:	98 8b       	std	Y+16, r25	; 0x10
    1aac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_void_sendCommand(ENTRY_MODE);
    1aae:	86 e0       	ldi	r24, 0x06	; 6
    1ab0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e8       	ldi	r26, 0x80	; 128
    1aba:	bf e3       	ldi	r27, 0x3F	; 63
    1abc:	8b 87       	std	Y+11, r24	; 0x0b
    1abe:	9c 87       	std	Y+12, r25	; 0x0c
    1ac0:	ad 87       	std	Y+13, r26	; 0x0d
    1ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a e7       	ldi	r20, 0x7A	; 122
    1ad2:	53 e4       	ldi	r21, 0x43	; 67
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	8f 83       	std	Y+7, r24	; 0x07
    1ade:	98 87       	std	Y+8, r25	; 0x08
    1ae0:	a9 87       	std	Y+9, r26	; 0x09
    1ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <LCD_void_Init+0x5fa>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <LCD_void_Init+0x678>
	else if (__tmp > 65535)
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	4c f5       	brge	.+82     	; 0x1b70 <LCD_void_Init+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <LCD_void_Init+0x65a>
    1b48:	89 e1       	ldi	r24, 0x19	; 25
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9c 83       	std	Y+4, r25	; 0x04
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_void_Init+0x648>
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	69 f7       	brne	.-38     	; 0x1b48 <LCD_void_Init+0x63c>
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <LCD_void_Init+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	6f 81       	ldd	r22, Y+7	; 0x07
    1b72:	78 85       	ldd	r23, Y+8	; 0x08
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_void_Init+0x684>
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LCD_void_sendCommand(ENTRY_MODE);
		_delay_ms(1);
	}
#endif
}
    1b98:	cc 5a       	subi	r28, 0xAC	; 172
    1b9a:	df 4f       	sbci	r29, 0xFF	; 255
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <LCD_void_sendData>:



void LCD_void_sendData(u8 copy_u8data )
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	2f 97       	sbiw	r28, 0x0f	; 15
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT, RS_PIN, 1);
    1bc6:	89 e3       	ldi	r24, 0x39	; 57
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	66 e0       	ldi	r22, 0x06	; 6
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
    1bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd4:	0e 94 a0 11 	call	0x2340	; 0x2340 <H_LCD_void_latchByte>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	8b 87       	std	Y+11, r24	; 0x0b
    1be2:	9c 87       	std	Y+12, r25	; 0x0c
    1be4:	ad 87       	std	Y+13, r26	; 0x0d
    1be6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8f 83       	std	Y+7, r24	; 0x07
    1c02:	98 87       	std	Y+8, r25	; 0x08
    1c04:	a9 87       	std	Y+9, r26	; 0x09
    1c06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <LCD_void_sendData+0x7a>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <LCD_void_sendData+0xf8>
	else if (__tmp > 65535)
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <LCD_void_sendData+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <LCD_void_sendData+0xda>
    1c6c:	89 e1       	ldi	r24, 0x19	; 25
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c 83       	std	Y+4, r25	; 0x04
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_void_sendData+0xc8>
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <LCD_void_sendData+0xbc>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <LCD_void_sendData+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_void_sendData+0x104>
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1cbc:	2f 96       	adiw	r28, 0x0f	; 15
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <LCD_void_sendCommand>:
void LCD_void_sendCommand(u8 copy_u8command)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	2f 97       	sbiw	r28, 0x0f	; 15
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT, RS_PIN, 0);
    1ce4:	89 e3       	ldi	r24, 0x39	; 57
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	66 e0       	ldi	r22, 0x06	; 6
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
    1cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf2:	0e 94 a0 11 	call	0x2340	; 0x2340 <H_LCD_void_latchByte>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e8       	ldi	r26, 0x80	; 128
    1cfc:	bf e3       	ldi	r27, 0x3F	; 63
    1cfe:	8b 87       	std	Y+11, r24	; 0x0b
    1d00:	9c 87       	std	Y+12, r25	; 0x0c
    1d02:	ad 87       	std	Y+13, r26	; 0x0d
    1d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	53 e4       	ldi	r21, 0x43	; 67
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8f 83       	std	Y+7, r24	; 0x07
    1d20:	98 87       	std	Y+8, r25	; 0x08
    1d22:	a9 87       	std	Y+9, r26	; 0x09
    1d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <LCD_void_sendCommand+0x7a>
		__ticks = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	3f c0       	rjmp	.+126    	; 0x1dc6 <LCD_void_sendCommand+0xf8>
	else if (__tmp > 65535)
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	4c f5       	brge	.+82     	; 0x1db2 <LCD_void_sendCommand+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <LCD_void_sendCommand+0xda>
    1d8a:	89 e1       	ldi	r24, 0x19	; 25
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_void_sendCommand+0xc8>
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	69 f7       	brne	.-38     	; 0x1d8a <LCD_void_sendCommand+0xbc>
    1db0:	14 c0       	rjmp	.+40     	; 0x1dda <LCD_void_sendCommand+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_void_sendCommand+0x104>
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/**********************/
}
    1dda:	2f 96       	adiw	r28, 0x0f	; 15
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <LCD_void_sendString>:
void LCD_void_sendString(const s8 * pstr)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <LCD_void_sendString+0x6>
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <LCD_void_sendString+0x8>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03

	int i=0;
    1dfc:	1a 82       	std	Y+2, r1	; 0x02
    1dfe:	19 82       	std	Y+1, r1	; 0x01
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <LCD_void_sendString+0x34>
	while(pstr[i] != '\0')
	{
		LCD_void_sendData(pstr[i]);
    1e02:	29 81       	ldd	r18, Y+1	; 0x01
    1e04:	3a 81       	ldd	r19, Y+2	; 0x02
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	80 81       	ld	r24, Z
    1e12:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_void_sendData>
		i++;
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_void_sendString(const s8 * pstr)
{

	int i=0;
	while(pstr[i] != '\0')
    1e20:	29 81       	ldd	r18, Y+1	; 0x01
    1e22:	3a 81       	ldd	r19, Y+2	; 0x02
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	fc 01       	movw	r30, r24
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 23       	and	r24, r24
    1e32:	39 f7       	brne	.-50     	; 0x1e02 <LCD_void_sendString+0x16>
	{
		LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <LCD_void_sendIntNum>:

void LCD_void_sendIntNum(s32 copy_s32Num)
{
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	6f 97       	sbiw	r28, 0x1f	; 31
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	6c 8f       	std	Y+28, r22	; 0x1c
    1e5c:	7d 8f       	std	Y+29, r23	; 0x1d
    1e5e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e60:	9f 8f       	std	Y+31, r25	; 0x1f

	if(copy_s32Num == 0)
    1e62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e64:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e66:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e68:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	a1 05       	cpc	r26, r1
    1e6e:	b1 05       	cpc	r27, r1
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <LCD_void_sendIntNum+0x38>
	{
		LCD_void_sendData('0');
    1e72:	80 e3       	ldi	r24, 0x30	; 48
    1e74:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_void_sendData>
    1e78:	e5 c0       	rjmp	.+458    	; 0x2044 <LCD_void_sendIntNum+0x202>
		return;
	}

	else if(copy_s32Num < 0)
    1e7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e7c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e7e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e80:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e82:	bb 23       	and	r27, r27
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <LCD_void_sendIntNum+0x46>
    1e86:	84 c0       	rjmp	.+264    	; 0x1f90 <LCD_void_sendIntNum+0x14e>
	{
		LCD_void_sendData('-');
    1e88:	8d e2       	ldi	r24, 0x2D	; 45
    1e8a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_void_sendData>
		copy_s32Num *= -1;
    1e8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e90:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e92:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1e94:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1e96:	b0 95       	com	r27
    1e98:	a0 95       	com	r26
    1e9a:	90 95       	com	r25
    1e9c:	81 95       	neg	r24
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	af 4f       	sbci	r26, 0xFF	; 255
    1ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea4:	8c 8f       	std	Y+28, r24	; 0x1c
    1ea6:	9d 8f       	std	Y+29, r25	; 0x1d
    1ea8:	ae 8f       	std	Y+30, r26	; 0x1e
    1eaa:	bf 8f       	std	Y+31, r27	; 0x1f
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	bf e3       	ldi	r27, 0x3F	; 63
    1eb4:	8b 87       	std	Y+11, r24	; 0x0b
    1eb6:	9c 87       	std	Y+12, r25	; 0x0c
    1eb8:	ad 87       	std	Y+13, r26	; 0x0d
    1eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	53 e4       	ldi	r21, 0x43	; 67
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8f 83       	std	Y+7, r24	; 0x07
    1ed6:	98 87       	std	Y+8, r25	; 0x08
    1ed8:	a9 87       	std	Y+9, r26	; 0x09
    1eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_void_sendIntNum+0xbc>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_void_sendIntNum+0x13a>
	else if (__tmp > 65535)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_void_sendIntNum+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_void_sendIntNum+0x11c>
    1f40:	89 e1       	ldi	r24, 0x19	; 25
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_void_sendIntNum+0x10a>
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_void_sendIntNum+0xfe>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <LCD_void_sendIntNum+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_void_sendIntNum+0x146>
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(0.5);
	}

	u8 num_digits[10]={0};
    1f90:	8a e0       	ldi	r24, 0x0A	; 10
    1f92:	fe 01       	movw	r30, r28
    1f94:	72 96       	adiw	r30, 0x12	; 18
    1f96:	df 01       	movw	r26, r30
    1f98:	98 2f       	mov	r25, r24
    1f9a:	1d 92       	st	X+, r1
    1f9c:	9a 95       	dec	r25
    1f9e:	e9 f7       	brne	.-6      	; 0x1f9a <LCD_void_sendIntNum+0x158>
	u8 i;

	for( i=0; (copy_s32Num)!=0;i++)
    1fa0:	19 8a       	std	Y+17, r1	; 0x11
    1fa2:	2d c0       	rjmp	.+90     	; 0x1ffe <LCD_void_sendIntNum+0x1bc>
	{
		num_digits[i] = (copy_s32Num % 10);
    1fa4:	89 89       	ldd	r24, Y+17	; 0x11
    1fa6:	08 2f       	mov	r16, r24
    1fa8:	10 e0       	ldi	r17, 0x00	; 0
    1faa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fae:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1fb0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <__divmodsi4>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	ce 01       	movw	r24, r28
    1fca:	42 96       	adiw	r24, 0x12	; 18
    1fcc:	fc 01       	movw	r30, r24
    1fce:	e0 0f       	add	r30, r16
    1fd0:	f1 1f       	adc	r31, r17
    1fd2:	20 83       	st	Z, r18
		copy_s32Num /= 10;
    1fd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fd6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fd8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1fda:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1fdc:	2a e0       	ldi	r18, 0x0A	; 10
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <__divmodsi4>
    1fec:	da 01       	movw	r26, r20
    1fee:	c9 01       	movw	r24, r18
    1ff0:	8c 8f       	std	Y+28, r24	; 0x1c
    1ff2:	9d 8f       	std	Y+29, r25	; 0x1d
    1ff4:	ae 8f       	std	Y+30, r26	; 0x1e
    1ff6:	bf 8f       	std	Y+31, r27	; 0x1f
	}

	u8 num_digits[10]={0};
	u8 i;

	for( i=0; (copy_s32Num)!=0;i++)
    1ff8:	89 89       	ldd	r24, Y+17	; 0x11
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	89 8b       	std	Y+17, r24	; 0x11
    1ffe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2000:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2002:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2004:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	a1 05       	cpc	r26, r1
    200a:	b1 05       	cpc	r27, r1
    200c:	59 f6       	brne	.-106    	; 0x1fa4 <LCD_void_sendIntNum+0x162>
	{
		num_digits[i] = (copy_s32Num % 10);
		copy_s32Num /= 10;
	}
	int j;
	for (j=i-1;j>=0;j--)
    200e:	89 89       	ldd	r24, Y+17	; 0x11
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	98 8b       	std	Y+16, r25	; 0x10
    2018:	8f 87       	std	Y+15, r24	; 0x0f
    201a:	10 c0       	rjmp	.+32     	; 0x203c <LCD_void_sendIntNum+0x1fa>
	{
		LCD_void_sendData(num_digits[j]+'0');
    201c:	2f 85       	ldd	r18, Y+15	; 0x0f
    201e:	38 89       	ldd	r19, Y+16	; 0x10
    2020:	ce 01       	movw	r24, r28
    2022:	42 96       	adiw	r24, 0x12	; 18
    2024:	fc 01       	movw	r30, r24
    2026:	e2 0f       	add	r30, r18
    2028:	f3 1f       	adc	r31, r19
    202a:	80 81       	ld	r24, Z
    202c:	80 5d       	subi	r24, 0xD0	; 208
    202e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_void_sendData>
	{
		num_digits[i] = (copy_s32Num % 10);
		copy_s32Num /= 10;
	}
	int j;
	for (j=i-1;j>=0;j--)
    2032:	8f 85       	ldd	r24, Y+15	; 0x0f
    2034:	98 89       	ldd	r25, Y+16	; 0x10
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	98 8b       	std	Y+16, r25	; 0x10
    203a:	8f 87       	std	Y+15, r24	; 0x0f
    203c:	8f 85       	ldd	r24, Y+15	; 0x0f
    203e:	98 89       	ldd	r25, Y+16	; 0x10
    2040:	99 23       	and	r25, r25
    2042:	64 f7       	brge	.-40     	; 0x201c <LCD_void_sendIntNum+0x1da>
		LCD_void_sendData(num_digits[j]+'0');
	}



}
    2044:	6f 96       	adiw	r28, 0x1f	; 31
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <LCD_void_gotoXY>:

void LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	61 97       	sbiw	r28, 0x11	; 17
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	88 8b       	std	Y+16, r24	; 0x10
    2070:	69 8b       	std	Y+17, r22	; 0x11
	u8 copy_u8command;

	if(copy_u8Row>4||copy_u8Row<1||copy_u8Col>20||copy_u8Col<1)
    2072:	88 89       	ldd	r24, Y+16	; 0x10
    2074:	85 30       	cpi	r24, 0x05	; 5
    2076:	48 f4       	brcc	.+18     	; 0x208a <LCD_void_gotoXY+0x30>
    2078:	88 89       	ldd	r24, Y+16	; 0x10
    207a:	88 23       	and	r24, r24
    207c:	31 f0       	breq	.+12     	; 0x208a <LCD_void_gotoXY+0x30>
    207e:	89 89       	ldd	r24, Y+17	; 0x11
    2080:	85 31       	cpi	r24, 0x15	; 21
    2082:	18 f4       	brcc	.+6      	; 0x208a <LCD_void_gotoXY+0x30>
    2084:	89 89       	ldd	r24, Y+17	; 0x11
    2086:	88 23       	and	r24, r24
    2088:	19 f4       	brne	.+6      	; 0x2090 <LCD_void_gotoXY+0x36>
	{
		copy_u8command=0x80;
    208a:	80 e8       	ldi	r24, 0x80	; 128
    208c:	8f 87       	std	Y+15, r24	; 0x0f
    208e:	1b c0       	rjmp	.+54     	; 0x20c6 <LCD_void_gotoXY+0x6c>
	}
	else if(copy_u8Row==1)
    2090:	88 89       	ldd	r24, Y+16	; 0x10
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	21 f4       	brne	.+8      	; 0x209e <LCD_void_gotoXY+0x44>
	{
		copy_u8command=ADDRESS_ROW_1+copy_u8Col-1 ;
    2096:	89 89       	ldd	r24, Y+17	; 0x11
    2098:	81 58       	subi	r24, 0x81	; 129
    209a:	8f 87       	std	Y+15, r24	; 0x0f
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==2)
    209e:	88 89       	ldd	r24, Y+16	; 0x10
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	21 f4       	brne	.+8      	; 0x20ac <LCD_void_gotoXY+0x52>
	{
		copy_u8command=ADDRESS_ROW_2+copy_u8Col-1;
    20a4:	89 89       	ldd	r24, Y+17	; 0x11
    20a6:	81 54       	subi	r24, 0x41	; 65
    20a8:	8f 87       	std	Y+15, r24	; 0x0f
    20aa:	0d c0       	rjmp	.+26     	; 0x20c6 <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==3)
    20ac:	88 89       	ldd	r24, Y+16	; 0x10
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	21 f4       	brne	.+8      	; 0x20ba <LCD_void_gotoXY+0x60>
	{
		copy_u8command=ADDRESS_ROW_3+copy_u8Col-1;
    20b2:	89 89       	ldd	r24, Y+17	; 0x11
    20b4:	8d 56       	subi	r24, 0x6D	; 109
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
    20b8:	06 c0       	rjmp	.+12     	; 0x20c6 <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==4)
    20ba:	88 89       	ldd	r24, Y+16	; 0x10
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	19 f4       	brne	.+6      	; 0x20c6 <LCD_void_gotoXY+0x6c>
	{
		copy_u8command=ADDRESS_ROW_4+copy_u8Col-1;
    20c0:	89 89       	ldd	r24, Y+17	; 0x11
    20c2:	8d 52       	subi	r24, 0x2D	; 45
    20c4:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_void_sendCommand(copy_u8command);
    20c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e8       	ldi	r26, 0x80	; 128
    20d2:	bf e3       	ldi	r27, 0x3F	; 63
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	ad 87       	std	Y+13, r26	; 0x0d
    20da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a e7       	ldi	r20, 0x7A	; 122
    20ea:	53 e4       	ldi	r21, 0x43	; 67
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	a9 87       	std	Y+9, r26	; 0x09
    20fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <LCD_void_gotoXY+0xc4>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	3f c0       	rjmp	.+126    	; 0x219c <LCD_void_gotoXY+0x142>
	else if (__tmp > 65535)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <LCD_void_gotoXY+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_void_gotoXY+0x124>
    2160:	89 e1       	ldi	r24, 0x19	; 25
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_void_gotoXY+0x112>
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <LCD_void_gotoXY+0x106>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <LCD_void_gotoXY+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_void_gotoXY+0x14e>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    21b0:	61 96       	adiw	r28, 0x11	; 17
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <LCD_void_creatCustomChar>:
void LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	64 97       	sbiw	r28, 0x14	; 20
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	9b 8b       	std	Y+19, r25	; 0x13
    21d8:	8a 8b       	std	Y+18, r24	; 0x12
    21da:	6c 8b       	std	Y+20, r22	; 0x14
	/*SET CGRAM ADDRESS BASED ON copy_u8charCode */
	u8 command = (((copy_u8charCode & (TAKE_FIRST_3_BITS))*CHAR_CODES_OFFSET_IN_CGRAM) + LCD_CGRAM_ADDRESS);
    21dc:	8c 89       	ldd	r24, Y+20	; 0x14
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	87 70       	andi	r24, 0x07	; 7
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	08 96       	adiw	r24, 0x08	; 8
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	89 8b       	std	Y+17, r24	; 0x11
	LCD_void_sendCommand(command);
    21f6:	89 89       	ldd	r24, Y+17	; 0x11
    21f8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>

	/*WRITE DATA TO CG OR DD RAM*/
	for(int i=0; i<8; i++)
    21fc:	18 8a       	std	Y+16, r1	; 0x10
    21fe:	1f 86       	std	Y+15, r1	; 0x0f
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_void_creatCustomChar+0x5e>
	{
		LCD_void_sendData(ArrPattern[i]);
    2202:	2f 85       	ldd	r18, Y+15	; 0x0f
    2204:	38 89       	ldd	r19, Y+16	; 0x10
    2206:	8a 89       	ldd	r24, Y+18	; 0x12
    2208:	9b 89       	ldd	r25, Y+19	; 0x13
    220a:	fc 01       	movw	r30, r24
    220c:	e2 0f       	add	r30, r18
    220e:	f3 1f       	adc	r31, r19
    2210:	80 81       	ld	r24, Z
    2212:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_void_sendData>
	/*SET CGRAM ADDRESS BASED ON copy_u8charCode */
	u8 command = (((copy_u8charCode & (TAKE_FIRST_3_BITS))*CHAR_CODES_OFFSET_IN_CGRAM) + LCD_CGRAM_ADDRESS);
	LCD_void_sendCommand(command);

	/*WRITE DATA TO CG OR DD RAM*/
	for(int i=0; i<8; i++)
    2216:	8f 85       	ldd	r24, Y+15	; 0x0f
    2218:	98 89       	ldd	r25, Y+16	; 0x10
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	98 8b       	std	Y+16, r25	; 0x10
    221e:	8f 87       	std	Y+15, r24	; 0x0f
    2220:	8f 85       	ldd	r24, Y+15	; 0x0f
    2222:	98 89       	ldd	r25, Y+16	; 0x10
    2224:	88 30       	cpi	r24, 0x08	; 8
    2226:	91 05       	cpc	r25, r1
    2228:	64 f3       	brlt	.-40     	; 0x2202 <LCD_void_creatCustomChar+0x40>
	{
		LCD_void_sendData(ArrPattern[i]);
	}
	LCD_void_sendCommand(LCD_DDRAM_ADDRESS );
    222a:	80 e8       	ldi	r24, 0x80	; 128
    222c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a0 e8       	ldi	r26, 0x80	; 128
    2236:	bf e3       	ldi	r27, 0x3F	; 63
    2238:	8b 87       	std	Y+11, r24	; 0x0b
    223a:	9c 87       	std	Y+12, r25	; 0x0c
    223c:	ad 87       	std	Y+13, r26	; 0x0d
    223e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	6b 85       	ldd	r22, Y+11	; 0x0b
    2242:	7c 85       	ldd	r23, Y+12	; 0x0c
    2244:	8d 85       	ldd	r24, Y+13	; 0x0d
    2246:	9e 85       	ldd	r25, Y+14	; 0x0e
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	53 e4       	ldi	r21, 0x43	; 67
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8f 83       	std	Y+7, r24	; 0x07
    225a:	98 87       	std	Y+8, r25	; 0x08
    225c:	a9 87       	std	Y+9, r26	; 0x09
    225e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2260:	6f 81       	ldd	r22, Y+7	; 0x07
    2262:	78 85       	ldd	r23, Y+8	; 0x08
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	9a 85       	ldd	r25, Y+10	; 0x0a
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2274:	88 23       	and	r24, r24
    2276:	2c f4       	brge	.+10     	; 0x2282 <LCD_void_creatCustomChar+0xc0>
		__ticks = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	3f c0       	rjmp	.+126    	; 0x2300 <LCD_void_creatCustomChar+0x13e>
	else if (__tmp > 65535)
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	4c f5       	brge	.+82     	; 0x22ec <LCD_void_creatCustomChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e2       	ldi	r20, 0x20	; 32
    22a8:	51 e4       	ldi	r21, 0x41	; 65
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	0f c0       	rjmp	.+30     	; 0x22e2 <LCD_void_creatCustomChar+0x120>
    22c4:	89 e1       	ldi	r24, 0x19	; 25
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_void_creatCustomChar+0x10e>
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	69 f7       	brne	.-38     	; 0x22c4 <LCD_void_creatCustomChar+0x102>
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <LCD_void_creatCustomChar+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ec:	6f 81       	ldd	r22, Y+7	; 0x07
    22ee:	78 85       	ldd	r23, Y+8	; 0x08
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9e 83       	std	Y+6, r25	; 0x06
    22fe:	8d 83       	std	Y+5, r24	; 0x05
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_void_creatCustomChar+0x14a>
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2314:	64 96       	adiw	r28, 0x14	; 20
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <LCD_void_displayCustomChar>:
void LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
	/*EXECUTE COMMAND WRITE DATA TO CG OR DD RAM WITH CHAR CODE*/
	LCD_void_sendData(copy_u8charCode);
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_void_sendData>
}
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	e9 97       	sbiw	r28, 0x39	; 57
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	89 af       	std	Y+57, r24	; 0x39
#if(LCD_MODE== _4_BIT_MODE)

	DIO_voidSetPinValue(LCD_PIN7_PORT,LCD_PIN7_PIN,READBIT(copy_u8Byte,7));
    2356:	89 ad       	ldd	r24, Y+57	; 0x39
    2358:	28 2f       	mov	r18, r24
    235a:	22 1f       	adc	r18, r18
    235c:	22 27       	eor	r18, r18
    235e:	22 1f       	adc	r18, r18
    2360:	89 e3       	ldi	r24, 0x39	; 57
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	42 2f       	mov	r20, r18
    2368:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN6_PORT,LCD_PIN6_PIN,READBIT(copy_u8Byte,6));
    236c:	89 ad       	ldd	r24, Y+57	; 0x39
    236e:	82 95       	swap	r24
    2370:	86 95       	lsr	r24
    2372:	86 95       	lsr	r24
    2374:	83 70       	andi	r24, 0x03	; 3
    2376:	28 2f       	mov	r18, r24
    2378:	21 70       	andi	r18, 0x01	; 1
    237a:	89 e3       	ldi	r24, 0x39	; 57
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	42 2f       	mov	r20, r18
    2382:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN5_PORT,LCD_PIN5_PIN,READBIT(copy_u8Byte,5));
    2386:	89 ad       	ldd	r24, Y+57	; 0x39
    2388:	82 95       	swap	r24
    238a:	86 95       	lsr	r24
    238c:	87 70       	andi	r24, 0x07	; 7
    238e:	28 2f       	mov	r18, r24
    2390:	21 70       	andi	r18, 0x01	; 1
    2392:	89 e3       	ldi	r24, 0x39	; 57
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	42 2f       	mov	r20, r18
    239a:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN4_PORT,LCD_PIN4_PIN,READBIT(copy_u8Byte,4));
    239e:	89 ad       	ldd	r24, Y+57	; 0x39
    23a0:	82 95       	swap	r24
    23a2:	8f 70       	andi	r24, 0x0F	; 15
    23a4:	28 2f       	mov	r18, r24
    23a6:	21 70       	andi	r18, 0x01	; 1
    23a8:	89 e3       	ldi	r24, 0x39	; 57
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	63 e0       	ldi	r22, 0x03	; 3
    23ae:	42 2f       	mov	r20, r18
    23b0:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,1);
    23b4:	89 e3       	ldi	r24, 0x39	; 57
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	65 e0       	ldi	r22, 0x05	; 5
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a0 e8       	ldi	r26, 0x80	; 128
    23c6:	bf e3       	ldi	r27, 0x3F	; 63
    23c8:	8d ab       	std	Y+53, r24	; 0x35
    23ca:	9e ab       	std	Y+54, r25	; 0x36
    23cc:	af ab       	std	Y+55, r26	; 0x37
    23ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d0:	6d a9       	ldd	r22, Y+53	; 0x35
    23d2:	7e a9       	ldd	r23, Y+54	; 0x36
    23d4:	8f a9       	ldd	r24, Y+55	; 0x37
    23d6:	98 ad       	ldd	r25, Y+56	; 0x38
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a e7       	ldi	r20, 0x7A	; 122
    23de:	53 e4       	ldi	r21, 0x43	; 67
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	89 ab       	std	Y+49, r24	; 0x31
    23ea:	9a ab       	std	Y+50, r25	; 0x32
    23ec:	ab ab       	std	Y+51, r26	; 0x33
    23ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23f0:	69 a9       	ldd	r22, Y+49	; 0x31
    23f2:	7a a9       	ldd	r23, Y+50	; 0x32
    23f4:	8b a9       	ldd	r24, Y+51	; 0x33
    23f6:	9c a9       	ldd	r25, Y+52	; 0x34
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <H_LCD_void_latchByte+0xd2>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	98 ab       	std	Y+48, r25	; 0x30
    240e:	8f a7       	std	Y+47, r24	; 0x2f
    2410:	3f c0       	rjmp	.+126    	; 0x2490 <H_LCD_void_latchByte+0x150>
	else if (__tmp > 65535)
    2412:	69 a9       	ldd	r22, Y+49	; 0x31
    2414:	7a a9       	ldd	r23, Y+50	; 0x32
    2416:	8b a9       	ldd	r24, Y+51	; 0x33
    2418:	9c a9       	ldd	r25, Y+52	; 0x34
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	4c f5       	brge	.+82     	; 0x247c <H_LCD_void_latchByte+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242a:	6d a9       	ldd	r22, Y+53	; 0x35
    242c:	7e a9       	ldd	r23, Y+54	; 0x36
    242e:	8f a9       	ldd	r24, Y+55	; 0x37
    2430:	98 ad       	ldd	r25, Y+56	; 0x38
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e2       	ldi	r20, 0x20	; 32
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <H_LCD_void_latchByte+0x132>
    2454:	89 e1       	ldi	r24, 0x19	; 25
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9e a7       	std	Y+46, r25	; 0x2e
    245a:	8d a7       	std	Y+45, r24	; 0x2d
    245c:	8d a5       	ldd	r24, Y+45	; 0x2d
    245e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <H_LCD_void_latchByte+0x120>
    2464:	9e a7       	std	Y+46, r25	; 0x2e
    2466:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2468:	8f a5       	ldd	r24, Y+47	; 0x2f
    246a:	98 a9       	ldd	r25, Y+48	; 0x30
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	98 ab       	std	Y+48, r25	; 0x30
    2470:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	8f a5       	ldd	r24, Y+47	; 0x2f
    2474:	98 a9       	ldd	r25, Y+48	; 0x30
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	69 f7       	brne	.-38     	; 0x2454 <H_LCD_void_latchByte+0x114>
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <H_LCD_void_latchByte+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	69 a9       	ldd	r22, Y+49	; 0x31
    247e:	7a a9       	ldd	r23, Y+50	; 0x32
    2480:	8b a9       	ldd	r24, Y+51	; 0x33
    2482:	9c a9       	ldd	r25, Y+52	; 0x34
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	98 ab       	std	Y+48, r25	; 0x30
    248e:	8f a7       	std	Y+47, r24	; 0x2f
    2490:	8f a5       	ldd	r24, Y+47	; 0x2f
    2492:	98 a9       	ldd	r25, Y+48	; 0x30
    2494:	9c a7       	std	Y+44, r25	; 0x2c
    2496:	8b a7       	std	Y+43, r24	; 0x2b
    2498:	8b a5       	ldd	r24, Y+43	; 0x2b
    249a:	9c a5       	ldd	r25, Y+44	; 0x2c
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <H_LCD_void_latchByte+0x15c>
    24a0:	9c a7       	std	Y+44, r25	; 0x2c
    24a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
    24a4:	89 e3       	ldi	r24, 0x39	; 57
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	65 e0       	ldi	r22, 0x05	; 5
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e8       	ldi	r26, 0x80	; 128
    24b6:	bf e3       	ldi	r27, 0x3F	; 63
    24b8:	8f a3       	std	Y+39, r24	; 0x27
    24ba:	98 a7       	std	Y+40, r25	; 0x28
    24bc:	a9 a7       	std	Y+41, r26	; 0x29
    24be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6f a1       	ldd	r22, Y+39	; 0x27
    24c2:	78 a5       	ldd	r23, Y+40	; 0x28
    24c4:	89 a5       	ldd	r24, Y+41	; 0x29
    24c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a e7       	ldi	r20, 0x7A	; 122
    24ce:	53 e4       	ldi	r21, 0x43	; 67
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8b a3       	std	Y+35, r24	; 0x23
    24da:	9c a3       	std	Y+36, r25	; 0x24
    24dc:	ad a3       	std	Y+37, r26	; 0x25
    24de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24e0:	6b a1       	ldd	r22, Y+35	; 0x23
    24e2:	7c a1       	ldd	r23, Y+36	; 0x24
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	9e a1       	ldd	r25, Y+38	; 0x26
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <H_LCD_void_latchByte+0x1c2>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9a a3       	std	Y+34, r25	; 0x22
    24fe:	89 a3       	std	Y+33, r24	; 0x21
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <H_LCD_void_latchByte+0x240>
	else if (__tmp > 65535)
    2502:	6b a1       	ldd	r22, Y+35	; 0x23
    2504:	7c a1       	ldd	r23, Y+36	; 0x24
    2506:	8d a1       	ldd	r24, Y+37	; 0x25
    2508:	9e a1       	ldd	r25, Y+38	; 0x26
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <H_LCD_void_latchByte+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6f a1       	ldd	r22, Y+39	; 0x27
    251c:	78 a5       	ldd	r23, Y+40	; 0x28
    251e:	89 a5       	ldd	r24, Y+41	; 0x29
    2520:	9a a5       	ldd	r25, Y+42	; 0x2a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9a a3       	std	Y+34, r25	; 0x22
    2540:	89 a3       	std	Y+33, r24	; 0x21
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <H_LCD_void_latchByte+0x222>
    2544:	89 e1       	ldi	r24, 0x19	; 25
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	98 a3       	std	Y+32, r25	; 0x20
    254a:	8f 8f       	std	Y+31, r24	; 0x1f
    254c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    254e:	98 a1       	ldd	r25, Y+32	; 0x20
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <H_LCD_void_latchByte+0x210>
    2554:	98 a3       	std	Y+32, r25	; 0x20
    2556:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	89 a1       	ldd	r24, Y+33	; 0x21
    255a:	9a a1       	ldd	r25, Y+34	; 0x22
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9a a3       	std	Y+34, r25	; 0x22
    2560:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	89 a1       	ldd	r24, Y+33	; 0x21
    2564:	9a a1       	ldd	r25, Y+34	; 0x22
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <H_LCD_void_latchByte+0x204>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <H_LCD_void_latchByte+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9a a3       	std	Y+34, r25	; 0x22
    257e:	89 a3       	std	Y+33, r24	; 0x21
    2580:	89 a1       	ldd	r24, Y+33	; 0x21
    2582:	9a a1       	ldd	r25, Y+34	; 0x22
    2584:	9e 8f       	std	Y+30, r25	; 0x1e
    2586:	8d 8f       	std	Y+29, r24	; 0x1d
    2588:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <H_LCD_void_latchByte+0x24c>
    2590:	9e 8f       	std	Y+30, r25	; 0x1e
    2592:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_PIN7_PORT,LCD_PIN7_PIN,READBIT(copy_u8Byte,3));
    2594:	89 ad       	ldd	r24, Y+57	; 0x39
    2596:	86 95       	lsr	r24
    2598:	86 95       	lsr	r24
    259a:	86 95       	lsr	r24
    259c:	28 2f       	mov	r18, r24
    259e:	21 70       	andi	r18, 0x01	; 1
    25a0:	89 e3       	ldi	r24, 0x39	; 57
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	42 2f       	mov	r20, r18
    25a8:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN6_PORT,LCD_PIN6_PIN,READBIT(copy_u8Byte,2));
    25ac:	89 ad       	ldd	r24, Y+57	; 0x39
    25ae:	86 95       	lsr	r24
    25b0:	86 95       	lsr	r24
    25b2:	28 2f       	mov	r18, r24
    25b4:	21 70       	andi	r18, 0x01	; 1
    25b6:	89 e3       	ldi	r24, 0x39	; 57
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	61 e0       	ldi	r22, 0x01	; 1
    25bc:	42 2f       	mov	r20, r18
    25be:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN5_PORT,LCD_PIN5_PIN,READBIT(copy_u8Byte,1));
    25c2:	89 ad       	ldd	r24, Y+57	; 0x39
    25c4:	86 95       	lsr	r24
    25c6:	28 2f       	mov	r18, r24
    25c8:	21 70       	andi	r18, 0x01	; 1
    25ca:	89 e3       	ldi	r24, 0x39	; 57
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	62 e0       	ldi	r22, 0x02	; 2
    25d0:	42 2f       	mov	r20, r18
    25d2:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN4_PORT,LCD_PIN4_PIN,READBIT(copy_u8Byte,0));
    25d6:	89 ad       	ldd	r24, Y+57	; 0x39
    25d8:	28 2f       	mov	r18, r24
    25da:	21 70       	andi	r18, 0x01	; 1
    25dc:	89 e3       	ldi	r24, 0x39	; 57
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	63 e0       	ldi	r22, 0x03	; 3
    25e2:	42 2f       	mov	r20, r18
    25e4:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,1);
    25e8:	89 e3       	ldi	r24, 0x39	; 57
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	65 e0       	ldi	r22, 0x05	; 5
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e8       	ldi	r26, 0x80	; 128
    25fa:	bf e3       	ldi	r27, 0x3F	; 63
    25fc:	89 8f       	std	Y+25, r24	; 0x19
    25fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2600:	ab 8f       	std	Y+27, r26	; 0x1b
    2602:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	69 8d       	ldd	r22, Y+25	; 0x19
    2606:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2608:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a e7       	ldi	r20, 0x7A	; 122
    2612:	53 e4       	ldi	r21, 0x43	; 67
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8d 8b       	std	Y+21, r24	; 0x15
    261e:	9e 8b       	std	Y+22, r25	; 0x16
    2620:	af 8b       	std	Y+23, r26	; 0x17
    2622:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2624:	6d 89       	ldd	r22, Y+21	; 0x15
    2626:	7e 89       	ldd	r23, Y+22	; 0x16
    2628:	8f 89       	ldd	r24, Y+23	; 0x17
    262a:	98 8d       	ldd	r25, Y+24	; 0x18
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <H_LCD_void_latchByte+0x306>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 8b       	std	Y+20, r25	; 0x14
    2642:	8b 8b       	std	Y+19, r24	; 0x13
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <H_LCD_void_latchByte+0x384>
	else if (__tmp > 65535)
    2646:	6d 89       	ldd	r22, Y+21	; 0x15
    2648:	7e 89       	ldd	r23, Y+22	; 0x16
    264a:	8f 89       	ldd	r24, Y+23	; 0x17
    264c:	98 8d       	ldd	r25, Y+24	; 0x18
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <H_LCD_void_latchByte+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	69 8d       	ldd	r22, Y+25	; 0x19
    2660:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2664:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	8b 8b       	std	Y+19, r24	; 0x13
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <H_LCD_void_latchByte+0x366>
    2688:	89 e1       	ldi	r24, 0x19	; 25
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9a 8b       	std	Y+18, r25	; 0x12
    268e:	89 8b       	std	Y+17, r24	; 0x11
    2690:	89 89       	ldd	r24, Y+17	; 0x11
    2692:	9a 89       	ldd	r25, Y+18	; 0x12
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <H_LCD_void_latchByte+0x354>
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8b 89       	ldd	r24, Y+19	; 0x13
    269e:	9c 89       	ldd	r25, Y+20	; 0x14
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <H_LCD_void_latchByte+0x348>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <H_LCD_void_latchByte+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	6d 89       	ldd	r22, Y+21	; 0x15
    26b2:	7e 89       	ldd	r23, Y+22	; 0x16
    26b4:	8f 89       	ldd	r24, Y+23	; 0x17
    26b6:	98 8d       	ldd	r25, Y+24	; 0x18
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	98 8b       	std	Y+16, r25	; 0x10
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
    26cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ce:	98 89       	ldd	r25, Y+16	; 0x10
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <H_LCD_void_latchByte+0x390>
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
    26d8:	89 e3       	ldi	r24, 0x39	; 57
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	65 e0       	ldi	r22, 0x05	; 5
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 6f 07 	call	0xede	; 0xede <DIO_voidSetPinValue>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	bf e3       	ldi	r27, 0x3F	; 63
    26ec:	8b 87       	std	Y+11, r24	; 0x0b
    26ee:	9c 87       	std	Y+12, r25	; 0x0c
    26f0:	ad 87       	std	Y+13, r26	; 0x0d
    26f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a e7       	ldi	r20, 0x7A	; 122
    2702:	53 e4       	ldi	r21, 0x43	; 67
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8f 83       	std	Y+7, r24	; 0x07
    270e:	98 87       	std	Y+8, r25	; 0x08
    2710:	a9 87       	std	Y+9, r26	; 0x09
    2712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <H_LCD_void_latchByte+0x3f6>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <H_LCD_void_latchByte+0x474>
	else if (__tmp > 65535)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <H_LCD_void_latchByte+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <H_LCD_void_latchByte+0x456>
    2778:	89 e1       	ldi	r24, 0x19	; 25
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <H_LCD_void_latchByte+0x444>
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <H_LCD_void_latchByte+0x438>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <H_LCD_void_latchByte+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <H_LCD_void_latchByte+0x480>
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
	_delay_ms(1);
#endif

}
    27c8:	e9 96       	adiw	r28, 0x39	; 57
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <Timer0_Init>:
static u16 ovf_counts_for_delay_fn;
static u16 ovf_count;
static u8 ovf_counts_for_delay_fn_CTC;
void (*Timer0_callback_fns[2]) (void) = {NULL};
void Timer0_Init(Timer0_cfg* cfg)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <Timer0_Init+0x6>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
	/*CHOOSE MODE*/
	TIMER0_R_BASE->TCCR0.bits.bit6 = READBIT(cfg->mode, 0);
    27e8:	a2 e5       	ldi	r26, 0x52	; 82
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e9 81       	ldd	r30, Y+1	; 0x01
    27ee:	fa 81       	ldd	r31, Y+2	; 0x02
    27f0:	80 81       	ld	r24, Z
    27f2:	81 70       	andi	r24, 0x01	; 1
    27f4:	81 70       	andi	r24, 0x01	; 1
    27f6:	81 70       	andi	r24, 0x01	; 1
    27f8:	81 70       	andi	r24, 0x01	; 1
    27fa:	98 2f       	mov	r25, r24
    27fc:	92 95       	swap	r25
    27fe:	99 0f       	add	r25, r25
    2800:	99 0f       	add	r25, r25
    2802:	90 7c       	andi	r25, 0xC0	; 192
    2804:	11 96       	adiw	r26, 0x01	; 1
    2806:	8c 91       	ld	r24, X
    2808:	11 97       	sbiw	r26, 0x01	; 1
    280a:	8f 7b       	andi	r24, 0xBF	; 191
    280c:	89 2b       	or	r24, r25
    280e:	11 96       	adiw	r26, 0x01	; 1
    2810:	8c 93       	st	X, r24
	TIMER0_R_BASE->TCCR0.bits.bit3 = READBIT(cfg->mode, 1);
    2812:	a2 e5       	ldi	r26, 0x52	; 82
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e9 81       	ldd	r30, Y+1	; 0x01
    2818:	fa 81       	ldd	r31, Y+2	; 0x02
    281a:	80 81       	ld	r24, Z
    281c:	86 95       	lsr	r24
    281e:	81 70       	andi	r24, 0x01	; 1
    2820:	81 70       	andi	r24, 0x01	; 1
    2822:	81 70       	andi	r24, 0x01	; 1
    2824:	81 70       	andi	r24, 0x01	; 1
    2826:	98 2f       	mov	r25, r24
    2828:	99 0f       	add	r25, r25
    282a:	99 0f       	add	r25, r25
    282c:	99 0f       	add	r25, r25
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	8c 91       	ld	r24, X
    2832:	11 97       	sbiw	r26, 0x01	; 1
    2834:	87 7f       	andi	r24, 0xF7	; 247
    2836:	89 2b       	or	r24, r25
    2838:	11 96       	adiw	r26, 0x01	; 1
    283a:	8c 93       	st	X, r24
    283c:	11 97       	sbiw	r26, 0x01	; 1

	/*set  Force Output Compare*/
	if(cfg ->mode == T0_CTC || cfg->mode == Normal)
    283e:	e9 81       	ldd	r30, Y+1	; 0x01
    2840:	fa 81       	ldd	r31, Y+2	; 0x02
    2842:	80 81       	ld	r24, Z
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	29 f0       	breq	.+10     	; 0x2852 <Timer0_Init+0x78>
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	fa 81       	ldd	r31, Y+2	; 0x02
    284c:	80 81       	ld	r24, Z
    284e:	88 23       	and	r24, r24
    2850:	31 f4       	brne	.+12     	; 0x285e <Timer0_Init+0x84>
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 1;
    2852:	e2 e5       	ldi	r30, 0x52	; 82
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	81 81       	ldd	r24, Z+1	; 0x01
    2858:	80 68       	ori	r24, 0x80	; 128
    285a:	81 83       	std	Z+1, r24	; 0x01
    285c:	05 c0       	rjmp	.+10     	; 0x2868 <Timer0_Init+0x8e>
	}
	else
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 0;
    285e:	e2 e5       	ldi	r30, 0x52	; 82
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	81 81       	ldd	r24, Z+1	; 0x01
    2864:	8f 77       	andi	r24, 0x7F	; 127
    2866:	81 83       	std	Z+1, r24	; 0x01
	}

	/*Compare Match Output Mode*/
	TIMER0_R_BASE ->TCCR0.bits.bit4 = READBIT(cfg ->CMP_MODE, 0);
    2868:	a2 e5       	ldi	r26, 0x52	; 82
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e9 81       	ldd	r30, Y+1	; 0x01
    286e:	fa 81       	ldd	r31, Y+2	; 0x02
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	81 70       	andi	r24, 0x01	; 1
    2874:	81 70       	andi	r24, 0x01	; 1
    2876:	81 70       	andi	r24, 0x01	; 1
    2878:	81 70       	andi	r24, 0x01	; 1
    287a:	98 2f       	mov	r25, r24
    287c:	92 95       	swap	r25
    287e:	90 7f       	andi	r25, 0xF0	; 240
    2880:	11 96       	adiw	r26, 0x01	; 1
    2882:	8c 91       	ld	r24, X
    2884:	11 97       	sbiw	r26, 0x01	; 1
    2886:	8f 7e       	andi	r24, 0xEF	; 239
    2888:	89 2b       	or	r24, r25
    288a:	11 96       	adiw	r26, 0x01	; 1
    288c:	8c 93       	st	X, r24
	TIMER0_R_BASE ->TCCR0.bits.bit5 = READBIT(cfg ->CMP_MODE, 1);
    288e:	a2 e5       	ldi	r26, 0x52	; 82
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e9 81       	ldd	r30, Y+1	; 0x01
    2894:	fa 81       	ldd	r31, Y+2	; 0x02
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	86 95       	lsr	r24
    289a:	81 70       	andi	r24, 0x01	; 1
    289c:	81 70       	andi	r24, 0x01	; 1
    289e:	81 70       	andi	r24, 0x01	; 1
    28a0:	81 70       	andi	r24, 0x01	; 1
    28a2:	98 2f       	mov	r25, r24
    28a4:	92 95       	swap	r25
    28a6:	99 0f       	add	r25, r25
    28a8:	90 7e       	andi	r25, 0xE0	; 224
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	8c 91       	ld	r24, X
    28ae:	11 97       	sbiw	r26, 0x01	; 1
    28b0:	8f 7d       	andi	r24, 0xDF	; 223
    28b2:	89 2b       	or	r24, r25
    28b4:	11 96       	adiw	r26, 0x01	; 1
    28b6:	8c 93       	st	X, r24


	/*select prescaler*/
	TIMER0_R_BASE->TCCR0.ALL_BITS |= (cfg ->pre & (111<<0));
    28b8:	a2 e5       	ldi	r26, 0x52	; 82
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e2 e5       	ldi	r30, 0x52	; 82
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	81 81       	ldd	r24, Z+1	; 0x01
    28c2:	98 2f       	mov	r25, r24
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	81 81       	ldd	r24, Z+1	; 0x01
    28ca:	8f 76       	andi	r24, 0x6F	; 111
    28cc:	89 2b       	or	r24, r25
    28ce:	11 96       	adiw	r26, 0x01	; 1
    28d0:	8c 93       	st	X, r24
    28d2:	11 97       	sbiw	r26, 0x01	; 1

	ovf_count=0;
    28d4:	10 92 c0 00 	sts	0x00C0, r1
    28d8:	10 92 bf 00 	sts	0x00BF, r1
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <Timer_start>:

void Timer_start(TIMER0_PRESCALER pre)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_R_BASE->TCCR0.ALL_BITS &= (pre & ~(111<<0));
    28f2:	a2 e5       	ldi	r26, 0x52	; 82
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e2 e5       	ldi	r30, 0x52	; 82
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	81 81       	ldd	r24, Z+1	; 0x01
    28fc:	98 2f       	mov	r25, r24
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	80 79       	andi	r24, 0x90	; 144
    2902:	89 23       	and	r24, r25
    2904:	11 96       	adiw	r26, 0x01	; 1
    2906:	8c 93       	st	X, r24

	TIMER0_R_BASE->TCCR0.ALL_BITS |= (pre & (111<<0));
    2908:	a2 e5       	ldi	r26, 0x52	; 82
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e2 e5       	ldi	r30, 0x52	; 82
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	81 81       	ldd	r24, Z+1	; 0x01
    2912:	98 2f       	mov	r25, r24
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	8f 76       	andi	r24, 0x6F	; 111
    2918:	89 2b       	or	r24, r25
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	8c 93       	st	X, r24
    291e:	11 97       	sbiw	r26, 0x01	; 1
	ovf_count=0;
    2920:	10 92 c0 00 	sts	0x00C0, r1
    2924:	10 92 bf 00 	sts	0x00BF, r1
}
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <Timer_stop>:

void Timer_stop()
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	TIMER0_R_BASE->TCCR0.ALL_BITS &= ~(111<<0);
    2938:	a2 e5       	ldi	r26, 0x52	; 82
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e2 e5       	ldi	r30, 0x52	; 82
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	81 81       	ldd	r24, Z+1	; 0x01
    2942:	80 79       	andi	r24, 0x90	; 144
    2944:	11 96       	adiw	r26, 0x01	; 1
    2946:	8c 93       	st	X, r24
    2948:	11 97       	sbiw	r26, 0x01	; 1
}
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <Timer_GetCounts>:

u16 Timer_GetCounts()
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
	return ovf_count;
    2958:	80 91 bf 00 	lds	r24, 0x00BF
    295c:	90 91 c0 00 	lds	r25, 0x00C0
}
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <Timer0_delay>:

u8 ov_flag=0;
void Timer0_delay(void)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	static u16 c=0;
	c++;
    296e:	80 91 bb 00 	lds	r24, 0x00BB
    2972:	90 91 bc 00 	lds	r25, 0x00BC
    2976:	01 96       	adiw	r24, 0x01	; 1
    2978:	90 93 bc 00 	sts	0x00BC, r25
    297c:	80 93 bb 00 	sts	0x00BB, r24
	if (c==ovf_counts_for_delay_fn)
    2980:	20 91 bb 00 	lds	r18, 0x00BB
    2984:	30 91 bc 00 	lds	r19, 0x00BC
    2988:	80 91 bd 00 	lds	r24, 0x00BD
    298c:	90 91 be 00 	lds	r25, 0x00BE
    2990:	28 17       	cp	r18, r24
    2992:	39 07       	cpc	r19, r25
    2994:	39 f4       	brne	.+14     	; 0x29a4 <Timer0_delay+0x3e>
	{
		ov_flag=1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	80 93 ba 00 	sts	0x00BA, r24
		c=0;
    299c:	10 92 bc 00 	sts	0x00BC, r1
    29a0:	10 92 bb 00 	sts	0x00BB, r1
	}
}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <Timer_setDelayTimeMilliSec>:
void Timer_setDelayTimeMilliSec(u32 delay_in_ms, Timer0_Mode mode)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	63 97       	sbiw	r28, 0x13	; 19
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	6d 87       	std	Y+13, r22	; 0x0d
    29c0:	7e 87       	std	Y+14, r23	; 0x0e
    29c2:	8f 87       	std	Y+15, r24	; 0x0f
    29c4:	98 8b       	std	Y+16, r25	; 0x10
    29c6:	49 8b       	std	Y+17, r20	; 0x11
	/*too-much-delay*/
	Timer_start(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0));
    29c8:	e2 e5       	ldi	r30, 0x52	; 82
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	81 81       	ldd	r24, Z+1	; 0x01
    29ce:	8f 76       	andi	r24, 0x6F	; 111
    29d0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <Timer_start>
	u32 tick=(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0))/FCPU;
    29d4:	e2 e5       	ldi	r30, 0x52	; 82
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	8f 76       	andi	r24, 0x6F	; 111
    29e0:	90 70       	andi	r25, 0x00	; 0
    29e2:	9b 8b       	std	Y+19, r25	; 0x13
    29e4:	8a 8b       	std	Y+18, r24	; 0x12
    29e6:	8a 89       	ldd	r24, Y+18	; 0x12
    29e8:	9b 89       	ldd	r25, Y+19	; 0x13
    29ea:	99 23       	and	r25, r25
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <Timer_setDelayTimeMilliSec+0x4e>
    29ee:	8a 89       	ldd	r24, Y+18	; 0x12
    29f0:	9b 89       	ldd	r25, Y+19	; 0x13
    29f2:	0f 96       	adiw	r24, 0x0f	; 15
    29f4:	9b 8b       	std	Y+19, r25	; 0x13
    29f6:	8a 8b       	std	Y+18, r24	; 0x12
    29f8:	8a 89       	ldd	r24, Y+18	; 0x12
    29fa:	9b 89       	ldd	r25, Y+19	; 0x13
    29fc:	95 95       	asr	r25
    29fe:	87 95       	ror	r24
    2a00:	95 95       	asr	r25
    2a02:	87 95       	ror	r24
    2a04:	95 95       	asr	r25
    2a06:	87 95       	ror	r24
    2a08:	95 95       	asr	r25
    2a0a:	87 95       	ror	r24
    2a0c:	aa 27       	eor	r26, r26
    2a0e:	97 fd       	sbrc	r25, 7
    2a10:	a0 95       	com	r26
    2a12:	ba 2f       	mov	r27, r26
    2a14:	89 87       	std	Y+9, r24	; 0x09
    2a16:	9a 87       	std	Y+10, r25	; 0x0a
    2a18:	ab 87       	std	Y+11, r26	; 0x0b
    2a1a:	bc 87       	std	Y+12, r27	; 0x0c
	u32 needded_ticks=(u32)(delay_in_ms *1000)/tick;
    2a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a20:	af 85       	ldd	r26, Y+15	; 0x0f
    2a22:	b8 89       	ldd	r27, Y+16	; 0x10
    2a24:	28 ee       	ldi	r18, 0xE8	; 232
    2a26:	33 e0       	ldi	r19, 0x03	; 3
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__mulsi3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	29 85       	ldd	r18, Y+9	; 0x09
    2a3a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a3c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a3e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__udivmodsi4>
    2a48:	da 01       	movw	r26, r20
    2a4a:	c9 01       	movw	r24, r18
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	af 83       	std	Y+7, r26	; 0x07
    2a52:	b8 87       	std	Y+8, r27	; 0x08

	ovf_counts_for_delay_fn=needded_ticks/256;
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	af 81       	ldd	r26, Y+7	; 0x07
    2a5a:	b8 85       	ldd	r27, Y+8	; 0x08
    2a5c:	89 2f       	mov	r24, r25
    2a5e:	9a 2f       	mov	r25, r26
    2a60:	ab 2f       	mov	r26, r27
    2a62:	bb 27       	eor	r27, r27
    2a64:	90 93 be 00 	sts	0x00BE, r25
    2a68:	80 93 bd 00 	sts	0x00BD, r24
	u32 OVF_Rem=needded_ticks%256;
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	af 81       	ldd	r26, Y+7	; 0x07
    2a72:	b8 85       	ldd	r27, Y+8	; 0x08
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	a0 70       	andi	r26, 0x00	; 0
    2a78:	b0 70       	andi	r27, 0x00	; 0
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	ab 83       	std	Y+3, r26	; 0x03
    2a80:	bc 83       	std	Y+4, r27	; 0x04
	if (OVF_Rem !=0)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	ab 81       	ldd	r26, Y+3	; 0x03
    2a88:	bc 81       	ldd	r27, Y+4	; 0x04
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	a1 05       	cpc	r26, r1
    2a8e:	b1 05       	cpc	r27, r1
    2a90:	71 f0       	breq	.+28     	; 0x2aae <Timer_setDelayTimeMilliSec+0x104>
	{
		ovf_counts_for_delay_fn++;
    2a92:	80 91 bd 00 	lds	r24, 0x00BD
    2a96:	90 91 be 00 	lds	r25, 0x00BE
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	90 93 be 00 	sts	0x00BE, r25
    2aa0:	80 93 bd 00 	sts	0x00BD, r24
		TIMER0_R_BASE->TCNT0.ALL_BITS =256-OVF_Rem;
    2aa4:	e2 e5       	ldi	r30, 0x52	; 82
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	81 95       	neg	r24
    2aac:	80 83       	st	Z, r24
	}
	setCallBack(Timer0_delay, Normal);
    2aae:	83 eb       	ldi	r24, 0xB3	; 179
    2ab0:	94 e1       	ldi	r25, 0x14	; 20
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <setCallBack>
	while(ov_flag==0);
    2ab8:	80 91 ba 00 	lds	r24, 0x00BA
    2abc:	88 23       	and	r24, r24
    2abe:	e1 f3       	breq	.-8      	; 0x2ab8 <Timer_setDelayTimeMilliSec+0x10e>
	ov_flag=0;
    2ac0:	10 92 ba 00 	sts	0x00BA, r1
}
    2ac4:	63 96       	adiw	r28, 0x13	; 19
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <setCallBack>:
	else if(mode == T0_CTC)
		TIMER0_R_BASE->TIMSK.ALL_BITS &= ~(1<<1);
}
*/
void setCallBack(void (*ptr_to_callback)(void), modes_IDs mode_id)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <setCallBack+0x6>
    2adc:	0f 92       	push	r0
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	6b 83       	std	Y+3, r22	; 0x03
	Timer0_callback_fns[mode_id] = ptr_to_callback;
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	fc 01       	movw	r30, r24
    2af4:	ea 54       	subi	r30, 0x4A	; 74
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
}
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <setFastPWM>:

void setFastPWM(u8 Duty)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	89 83       	std	Y+1, r24	; 0x01
	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == NON_INVERTING)
    2b18:	e2 e5       	ldi	r30, 0x52	; 82
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	81 81       	ldd	r24, Z+1	; 0x01
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	80 7b       	andi	r24, 0xB0	; 176
    2b24:	90 70       	andi	r25, 0x00	; 0
    2b26:	95 95       	asr	r25
    2b28:	87 95       	ror	r24
    2b2a:	95 95       	asr	r25
    2b2c:	87 95       	ror	r24
    2b2e:	95 95       	asr	r25
    2b30:	87 95       	ror	r24
    2b32:	95 95       	asr	r25
    2b34:	87 95       	ror	r24
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	91 05       	cpc	r25, r1
    2b3a:	e9 f4       	brne	.+58     	; 0x2b76 <setFastPWM+0x6a>
	{
		if (Duty <=100)
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	85 36       	cpi	r24, 0x65	; 101
    2b40:	d0 f4       	brcc	.+52     	; 0x2b76 <setFastPWM+0x6a>
		{
			TIMER0_R_BASE ->OCR0.ALL_BITS = ((Duty * 255)/100);
    2b42:	e2 e5       	ldi	r30, 0x52	; 82
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	48 2f       	mov	r20, r24
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	ca 01       	movw	r24, r20
    2b4e:	9c 01       	movw	r18, r24
    2b50:	22 0f       	add	r18, r18
    2b52:	33 1f       	adc	r19, r19
    2b54:	c9 01       	movw	r24, r18
    2b56:	96 95       	lsr	r25
    2b58:	98 2f       	mov	r25, r24
    2b5a:	88 27       	eor	r24, r24
    2b5c:	97 95       	ror	r25
    2b5e:	87 95       	ror	r24
    2b60:	82 1b       	sub	r24, r18
    2b62:	93 0b       	sbc	r25, r19
    2b64:	84 0f       	add	r24, r20
    2b66:	95 1f       	adc	r25, r21
    2b68:	24 e6       	ldi	r18, 0x64	; 100
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divmodhi4>
    2b72:	cb 01       	movw	r24, r22
    2b74:	82 87       	std	Z+10, r24	; 0x0a
		}
	}

	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == INVERTING)
    2b76:	e2 e5       	ldi	r30, 0x52	; 82
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	81 81       	ldd	r24, Z+1	; 0x01
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	80 7b       	andi	r24, 0xB0	; 176
    2b82:	90 70       	andi	r25, 0x00	; 0
    2b84:	95 95       	asr	r25
    2b86:	87 95       	ror	r24
    2b88:	95 95       	asr	r25
    2b8a:	87 95       	ror	r24
    2b8c:	95 95       	asr	r25
    2b8e:	87 95       	ror	r24
    2b90:	95 95       	asr	r25
    2b92:	87 95       	ror	r24
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	91 05       	cpc	r25, r1
    2b98:	f1 f4       	brne	.+60     	; 0x2bd6 <setFastPWM+0xca>
	{
		if (Duty <=100){
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	85 36       	cpi	r24, 0x65	; 101
    2b9e:	d8 f4       	brcc	.+54     	; 0x2bd6 <setFastPWM+0xca>
			TIMER0_R_BASE ->OCR0.ALL_BITS = 255 - (((Duty * 255)/100 ));
    2ba0:	e2 e5       	ldi	r30, 0x52	; 82
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	ca 01       	movw	r24, r20
    2bac:	9c 01       	movw	r18, r24
    2bae:	22 0f       	add	r18, r18
    2bb0:	33 1f       	adc	r19, r19
    2bb2:	c9 01       	movw	r24, r18
    2bb4:	96 95       	lsr	r25
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	88 27       	eor	r24, r24
    2bba:	97 95       	ror	r25
    2bbc:	87 95       	ror	r24
    2bbe:	82 1b       	sub	r24, r18
    2bc0:	93 0b       	sbc	r25, r19
    2bc2:	84 0f       	add	r24, r20
    2bc4:	95 1f       	adc	r25, r21
    2bc6:	24 e6       	ldi	r18, 0x64	; 100
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	b9 01       	movw	r22, r18
    2bcc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divmodhi4>
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	80 95       	com	r24
    2bd4:	82 87       	std	Z+10, r24	; 0x0a
		}
	}

}
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <setphaseCorrectPWM>:
void setphaseCorrectPWM(u8 duty)
{
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01
	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == NON_INVERTING)
    2bee:	e2 e5       	ldi	r30, 0x52	; 82
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	81 81       	ldd	r24, Z+1	; 0x01
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	80 7b       	andi	r24, 0xB0	; 176
    2bfa:	90 70       	andi	r25, 0x00	; 0
    2bfc:	95 95       	asr	r25
    2bfe:	87 95       	ror	r24
    2c00:	95 95       	asr	r25
    2c02:	87 95       	ror	r24
    2c04:	95 95       	asr	r25
    2c06:	87 95       	ror	r24
    2c08:	95 95       	asr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	91 05       	cpc	r25, r1
    2c10:	f1 f4       	brne	.+60     	; 0x2c4e <setphaseCorrectPWM+0x70>
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = (u8)(((u32)duty*MAX_OCR0)/100);
    2c12:	02 e5       	ldi	r16, 0x52	; 82
    2c14:	10 e0       	ldi	r17, 0x00	; 0
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a0 e0       	ldi	r26, 0x00	; 0
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	2f ef       	ldi	r18, 0xFF	; 255
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	bc 01       	movw	r22, r24
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__mulsi3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	24 e6       	ldi	r18, 0x64	; 100
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__udivmodsi4>
    2c44:	da 01       	movw	r26, r20
    2c46:	c9 01       	movw	r24, r18
    2c48:	f8 01       	movw	r30, r16
    2c4a:	82 87       	std	Z+10, r24	; 0x0a
    2c4c:	30 c0       	rjmp	.+96     	; 0x2cae <setphaseCorrectPWM+0xd0>
	}
	else if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == INVERTING)
    2c4e:	e2 e5       	ldi	r30, 0x52	; 82
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	81 81       	ldd	r24, Z+1	; 0x01
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	80 7b       	andi	r24, 0xB0	; 176
    2c5a:	90 70       	andi	r25, 0x00	; 0
    2c5c:	95 95       	asr	r25
    2c5e:	87 95       	ror	r24
    2c60:	95 95       	asr	r25
    2c62:	87 95       	ror	r24
    2c64:	95 95       	asr	r25
    2c66:	87 95       	ror	r24
    2c68:	95 95       	asr	r25
    2c6a:	87 95       	ror	r24
    2c6c:	83 30       	cpi	r24, 0x03	; 3
    2c6e:	91 05       	cpc	r25, r1
    2c70:	f1 f4       	brne	.+60     	; 0x2cae <setphaseCorrectPWM+0xd0>
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = (u8)(MAX_OCR0-(((u32)duty*MAX_OCR0)/100));
    2c72:	02 e5       	ldi	r16, 0x52	; 82
    2c74:	10 e0       	ldi	r17, 0x00	; 0
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e0       	ldi	r26, 0x00	; 0
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	2f ef       	ldi	r18, 0xFF	; 255
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__mulsi3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	24 e6       	ldi	r18, 0x64	; 100
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__udivmodsi4>
    2ca4:	da 01       	movw	r26, r20
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	80 95       	com	r24
    2caa:	f8 01       	movw	r30, r16
    2cac:	82 87       	std	Z+10, r24	; 0x0a
	}
}
    2cae:	0f 90       	pop	r0
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	08 95       	ret

00002cba <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	0f 92       	push	r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62

	ovf_count++; //for get_count fn
    2ce4:	80 91 bf 00 	lds	r24, 0x00BF
    2ce8:	90 91 c0 00 	lds	r25, 0x00C0
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	90 93 c0 00 	sts	0x00C0, r25
    2cf2:	80 93 bf 00 	sts	0x00BF, r24

	if(Timer0_callback_fns[Normal_ID] != NULL)
    2cf6:	80 91 b6 00 	lds	r24, 0x00B6
    2cfa:	90 91 b7 00 	lds	r25, 0x00B7
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	29 f0       	breq	.+10     	; 0x2d0c <__vector_11+0x52>
		Timer0_callback_fns[Normal_ID]();
    2d02:	e0 91 b6 00 	lds	r30, 0x00B6
    2d06:	f0 91 b7 00 	lds	r31, 0x00B7
    2d0a:	09 95       	icall

}
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	ff 91       	pop	r31
    2d12:	ef 91       	pop	r30
    2d14:	bf 91       	pop	r27
    2d16:	af 91       	pop	r26
    2d18:	9f 91       	pop	r25
    2d1a:	8f 91       	pop	r24
    2d1c:	7f 91       	pop	r23
    2d1e:	6f 91       	pop	r22
    2d20:	5f 91       	pop	r21
    2d22:	4f 91       	pop	r20
    2d24:	3f 91       	pop	r19
    2d26:	2f 91       	pop	r18
    2d28:	0f 90       	pop	r0
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	0f 90       	pop	r0
    2d2e:	1f 90       	pop	r1
    2d30:	18 95       	reti

00002d32 <__vector_10>:

ISR(TIMER0_OC_vect)
{
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	2f 93       	push	r18
    2d3e:	3f 93       	push	r19
    2d40:	4f 93       	push	r20
    2d42:	5f 93       	push	r21
    2d44:	6f 93       	push	r22
    2d46:	7f 93       	push	r23
    2d48:	8f 93       	push	r24
    2d4a:	9f 93       	push	r25
    2d4c:	af 93       	push	r26
    2d4e:	bf 93       	push	r27
    2d50:	ef 93       	push	r30
    2d52:	ff 93       	push	r31
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callback_fns[CTC_ID] != NULL)
    2d5c:	80 91 b8 00 	lds	r24, 0x00B8
    2d60:	90 91 b9 00 	lds	r25, 0x00B9
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	29 f0       	breq	.+10     	; 0x2d72 <__vector_10+0x40>
		Timer0_callback_fns[CTC_ID]();
    2d68:	e0 91 b8 00 	lds	r30, 0x00B8
    2d6c:	f0 91 b9 00 	lds	r31, 0x00B9
    2d70:	09 95       	icall


}
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	ff 91       	pop	r31
    2d78:	ef 91       	pop	r30
    2d7a:	bf 91       	pop	r27
    2d7c:	af 91       	pop	r26
    2d7e:	9f 91       	pop	r25
    2d80:	8f 91       	pop	r24
    2d82:	7f 91       	pop	r23
    2d84:	6f 91       	pop	r22
    2d86:	5f 91       	pop	r21
    2d88:	4f 91       	pop	r20
    2d8a:	3f 91       	pop	r19
    2d8c:	2f 91       	pop	r18
    2d8e:	0f 90       	pop	r0
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	0f 90       	pop	r0
    2d94:	1f 90       	pop	r1
    2d96:	18 95       	reti

00002d98 <main>:
#include"KEYBAD.h"
#include"DC_MOTOR.h"
#include <util/delay.h>

int main()
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	61 97       	sbiw	r28, 0x11	; 17
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Init();
    2dac:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_void_Init>
	Keybad_init();
    2db0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Keybad_init>
	DcMotor_Init();
    2db4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>

	u8 pressed_key, duty_cycle, i ;

	while(1)
	{
		LCD_void_sendString("enter duty cycle     ended with = : ");
    2db8:	80 e6       	ldi	r24, 0x60	; 96
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_void_sendString>
		duty_cycle=0, i=0;
    2dc0:	18 8a       	std	Y+16, r1	; 0x10
    2dc2:	1f 86       	std	Y+15, r1	; 0x0f
    2dc4:	1a c0       	rjmp	.+52     	; 0x2dfa <main+0x62>

		while(i<3)
		{
			i++;
    2dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	8f 87       	std	Y+15, r24	; 0x0f
			pressed_key = Keybad_getValue();
    2dcc:	0e 94 05 09 	call	0x120a	; 0x120a <Keybad_getValue>
    2dd0:	89 8b       	std	Y+17, r24	; 0x11
			if(pressed_key == '=')
    2dd2:	89 89       	ldd	r24, Y+17	; 0x11
    2dd4:	8d 33       	cpi	r24, 0x3D	; 61
    2dd6:	a1 f0       	breq	.+40     	; 0x2e00 <main+0x68>
				break;
			duty_cycle = (duty_cycle*10) + (pressed_key);
    2dd8:	88 89       	ldd	r24, Y+16	; 0x10
    2dda:	88 2f       	mov	r24, r24
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9c 01       	movw	r18, r24
    2de0:	22 0f       	add	r18, r18
    2de2:	33 1f       	adc	r19, r19
    2de4:	c9 01       	movw	r24, r18
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	82 0f       	add	r24, r18
    2df0:	93 1f       	adc	r25, r19
    2df2:	98 2f       	mov	r25, r24
    2df4:	89 89       	ldd	r24, Y+17	; 0x11
    2df6:	89 0f       	add	r24, r25
    2df8:	88 8b       	std	Y+16, r24	; 0x10
	while(1)
	{
		LCD_void_sendString("enter duty cycle     ended with = : ");
		duty_cycle=0, i=0;

		while(i<3)
    2dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfc:	83 30       	cpi	r24, 0x03	; 3
    2dfe:	18 f3       	brcs	.-58     	; 0x2dc6 <main+0x2e>
				break;
			duty_cycle = (duty_cycle*10) + (pressed_key);
		}


		LCD_void_sendIntNum(duty_cycle);
    2e00:	88 89       	ldd	r24, Y+16	; 0x10
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 e0       	ldi	r26, 0x00	; 0
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <LCD_void_sendIntNum>
		DC_MOTOR_setSpeed(duty_cycle, clkWise);
    2e12:	88 89       	ldd	r24, Y+16	; 0x10
    2e14:	61 e0       	ldi	r22, 0x01	; 1
    2e16:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <DC_MOTOR_setSpeed>
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e8       	ldi	r25, 0x80	; 128
    2e1e:	ab e3       	ldi	r26, 0x3B	; 59
    2e20:	b5 e4       	ldi	r27, 0x45	; 69
    2e22:	8b 87       	std	Y+11, r24	; 0x0b
    2e24:	9c 87       	std	Y+12, r25	; 0x0c
    2e26:	ad 87       	std	Y+13, r26	; 0x0d
    2e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	4a e7       	ldi	r20, 0x7A	; 122
    2e38:	53 e4       	ldi	r21, 0x43	; 67
    2e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	8f 83       	std	Y+7, r24	; 0x07
    2e44:	98 87       	std	Y+8, r25	; 0x08
    2e46:	a9 87       	std	Y+9, r26	; 0x09
    2e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e8       	ldi	r20, 0x80	; 128
    2e58:	5f e3       	ldi	r21, 0x3F	; 63
    2e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	2c f4       	brge	.+10     	; 0x2e6c <main+0xd4>
		__ticks = 1;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
    2e6a:	3f c0       	rjmp	.+126    	; 0x2eea <main+0x152>
	else if (__tmp > 65535)
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	4f e7       	ldi	r20, 0x7F	; 127
    2e7a:	57 e4       	ldi	r21, 0x47	; 71
    2e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e80:	18 16       	cp	r1, r24
    2e82:	4c f5       	brge	.+82     	; 0x2ed6 <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e2       	ldi	r20, 0x20	; 32
    2e92:	51 e4       	ldi	r21, 0x41	; 65
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	0f c0       	rjmp	.+30     	; 0x2ecc <main+0x134>
    2eae:	89 e1       	ldi	r24, 0x19	; 25
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <main+0x122>
    2ebe:	9c 83       	std	Y+4, r25	; 0x04
    2ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	9e 83       	std	Y+6, r25	; 0x06
    2eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	69 f7       	brne	.-38     	; 0x2eae <main+0x116>
    2ed4:	14 c0       	rjmp	.+40     	; 0x2efe <main+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed8:	78 85       	ldd	r23, Y+8	; 0x08
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <main+0x15e>
    2efa:	9a 83       	std	Y+2, r25	; 0x02
    2efc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(3000);

		LCD_void_sendCommand(LCD_CLEAR);
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_void_sendCommand>
		LCD_void_gotoXY(0, 0);
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_void_gotoXY>
    2f0c:	55 cf       	rjmp	.-342    	; 0x2db8 <main+0x20>

00002f0e <__mulsi3>:
    2f0e:	62 9f       	mul	r22, r18
    2f10:	d0 01       	movw	r26, r0
    2f12:	73 9f       	mul	r23, r19
    2f14:	f0 01       	movw	r30, r0
    2f16:	82 9f       	mul	r24, r18
    2f18:	e0 0d       	add	r30, r0
    2f1a:	f1 1d       	adc	r31, r1
    2f1c:	64 9f       	mul	r22, r20
    2f1e:	e0 0d       	add	r30, r0
    2f20:	f1 1d       	adc	r31, r1
    2f22:	92 9f       	mul	r25, r18
    2f24:	f0 0d       	add	r31, r0
    2f26:	83 9f       	mul	r24, r19
    2f28:	f0 0d       	add	r31, r0
    2f2a:	74 9f       	mul	r23, r20
    2f2c:	f0 0d       	add	r31, r0
    2f2e:	65 9f       	mul	r22, r21
    2f30:	f0 0d       	add	r31, r0
    2f32:	99 27       	eor	r25, r25
    2f34:	72 9f       	mul	r23, r18
    2f36:	b0 0d       	add	r27, r0
    2f38:	e1 1d       	adc	r30, r1
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	63 9f       	mul	r22, r19
    2f3e:	b0 0d       	add	r27, r0
    2f40:	e1 1d       	adc	r30, r1
    2f42:	f9 1f       	adc	r31, r25
    2f44:	bd 01       	movw	r22, r26
    2f46:	cf 01       	movw	r24, r30
    2f48:	11 24       	eor	r1, r1
    2f4a:	08 95       	ret

00002f4c <__divmodhi4>:
    2f4c:	97 fb       	bst	r25, 7
    2f4e:	09 2e       	mov	r0, r25
    2f50:	07 26       	eor	r0, r23
    2f52:	0a d0       	rcall	.+20     	; 0x2f68 <__divmodhi4_neg1>
    2f54:	77 fd       	sbrc	r23, 7
    2f56:	04 d0       	rcall	.+8      	; 0x2f60 <__divmodhi4_neg2>
    2f58:	49 d0       	rcall	.+146    	; 0x2fec <__udivmodhi4>
    2f5a:	06 d0       	rcall	.+12     	; 0x2f68 <__divmodhi4_neg1>
    2f5c:	00 20       	and	r0, r0
    2f5e:	1a f4       	brpl	.+6      	; 0x2f66 <__divmodhi4_exit>

00002f60 <__divmodhi4_neg2>:
    2f60:	70 95       	com	r23
    2f62:	61 95       	neg	r22
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255

00002f66 <__divmodhi4_exit>:
    2f66:	08 95       	ret

00002f68 <__divmodhi4_neg1>:
    2f68:	f6 f7       	brtc	.-4      	; 0x2f66 <__divmodhi4_exit>
    2f6a:	90 95       	com	r25
    2f6c:	81 95       	neg	r24
    2f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f70:	08 95       	ret

00002f72 <__udivmodsi4>:
    2f72:	a1 e2       	ldi	r26, 0x21	; 33
    2f74:	1a 2e       	mov	r1, r26
    2f76:	aa 1b       	sub	r26, r26
    2f78:	bb 1b       	sub	r27, r27
    2f7a:	fd 01       	movw	r30, r26
    2f7c:	0d c0       	rjmp	.+26     	; 0x2f98 <__udivmodsi4_ep>

00002f7e <__udivmodsi4_loop>:
    2f7e:	aa 1f       	adc	r26, r26
    2f80:	bb 1f       	adc	r27, r27
    2f82:	ee 1f       	adc	r30, r30
    2f84:	ff 1f       	adc	r31, r31
    2f86:	a2 17       	cp	r26, r18
    2f88:	b3 07       	cpc	r27, r19
    2f8a:	e4 07       	cpc	r30, r20
    2f8c:	f5 07       	cpc	r31, r21
    2f8e:	20 f0       	brcs	.+8      	; 0x2f98 <__udivmodsi4_ep>
    2f90:	a2 1b       	sub	r26, r18
    2f92:	b3 0b       	sbc	r27, r19
    2f94:	e4 0b       	sbc	r30, r20
    2f96:	f5 0b       	sbc	r31, r21

00002f98 <__udivmodsi4_ep>:
    2f98:	66 1f       	adc	r22, r22
    2f9a:	77 1f       	adc	r23, r23
    2f9c:	88 1f       	adc	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	1a 94       	dec	r1
    2fa2:	69 f7       	brne	.-38     	; 0x2f7e <__udivmodsi4_loop>
    2fa4:	60 95       	com	r22
    2fa6:	70 95       	com	r23
    2fa8:	80 95       	com	r24
    2faa:	90 95       	com	r25
    2fac:	9b 01       	movw	r18, r22
    2fae:	ac 01       	movw	r20, r24
    2fb0:	bd 01       	movw	r22, r26
    2fb2:	cf 01       	movw	r24, r30
    2fb4:	08 95       	ret

00002fb6 <__divmodsi4>:
    2fb6:	97 fb       	bst	r25, 7
    2fb8:	09 2e       	mov	r0, r25
    2fba:	05 26       	eor	r0, r21
    2fbc:	0e d0       	rcall	.+28     	; 0x2fda <__divmodsi4_neg1>
    2fbe:	57 fd       	sbrc	r21, 7
    2fc0:	04 d0       	rcall	.+8      	; 0x2fca <__divmodsi4_neg2>
    2fc2:	d7 df       	rcall	.-82     	; 0x2f72 <__udivmodsi4>
    2fc4:	0a d0       	rcall	.+20     	; 0x2fda <__divmodsi4_neg1>
    2fc6:	00 1c       	adc	r0, r0
    2fc8:	38 f4       	brcc	.+14     	; 0x2fd8 <__divmodsi4_exit>

00002fca <__divmodsi4_neg2>:
    2fca:	50 95       	com	r21
    2fcc:	40 95       	com	r20
    2fce:	30 95       	com	r19
    2fd0:	21 95       	neg	r18
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	4f 4f       	sbci	r20, 0xFF	; 255
    2fd6:	5f 4f       	sbci	r21, 0xFF	; 255

00002fd8 <__divmodsi4_exit>:
    2fd8:	08 95       	ret

00002fda <__divmodsi4_neg1>:
    2fda:	f6 f7       	brtc	.-4      	; 0x2fd8 <__divmodsi4_exit>
    2fdc:	90 95       	com	r25
    2fde:	80 95       	com	r24
    2fe0:	70 95       	com	r23
    2fe2:	61 95       	neg	r22
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	08 95       	ret

00002fec <__udivmodhi4>:
    2fec:	aa 1b       	sub	r26, r26
    2fee:	bb 1b       	sub	r27, r27
    2ff0:	51 e1       	ldi	r21, 0x11	; 17
    2ff2:	07 c0       	rjmp	.+14     	; 0x3002 <__udivmodhi4_ep>

00002ff4 <__udivmodhi4_loop>:
    2ff4:	aa 1f       	adc	r26, r26
    2ff6:	bb 1f       	adc	r27, r27
    2ff8:	a6 17       	cp	r26, r22
    2ffa:	b7 07       	cpc	r27, r23
    2ffc:	10 f0       	brcs	.+4      	; 0x3002 <__udivmodhi4_ep>
    2ffe:	a6 1b       	sub	r26, r22
    3000:	b7 0b       	sbc	r27, r23

00003002 <__udivmodhi4_ep>:
    3002:	88 1f       	adc	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	5a 95       	dec	r21
    3008:	a9 f7       	brne	.-22     	; 0x2ff4 <__udivmodhi4_loop>
    300a:	80 95       	com	r24
    300c:	90 95       	com	r25
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	08 95       	ret

00003014 <__prologue_saves__>:
    3014:	2f 92       	push	r2
    3016:	3f 92       	push	r3
    3018:	4f 92       	push	r4
    301a:	5f 92       	push	r5
    301c:	6f 92       	push	r6
    301e:	7f 92       	push	r7
    3020:	8f 92       	push	r8
    3022:	9f 92       	push	r9
    3024:	af 92       	push	r10
    3026:	bf 92       	push	r11
    3028:	cf 92       	push	r12
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	ca 1b       	sub	r28, r26
    303e:	db 0b       	sbc	r29, r27
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	09 94       	ijmp

0000304c <__epilogue_restores__>:
    304c:	2a 88       	ldd	r2, Y+18	; 0x12
    304e:	39 88       	ldd	r3, Y+17	; 0x11
    3050:	48 88       	ldd	r4, Y+16	; 0x10
    3052:	5f 84       	ldd	r5, Y+15	; 0x0f
    3054:	6e 84       	ldd	r6, Y+14	; 0x0e
    3056:	7d 84       	ldd	r7, Y+13	; 0x0d
    3058:	8c 84       	ldd	r8, Y+12	; 0x0c
    305a:	9b 84       	ldd	r9, Y+11	; 0x0b
    305c:	aa 84       	ldd	r10, Y+10	; 0x0a
    305e:	b9 84       	ldd	r11, Y+9	; 0x09
    3060:	c8 84       	ldd	r12, Y+8	; 0x08
    3062:	df 80       	ldd	r13, Y+7	; 0x07
    3064:	ee 80       	ldd	r14, Y+6	; 0x06
    3066:	fd 80       	ldd	r15, Y+5	; 0x05
    3068:	0c 81       	ldd	r16, Y+4	; 0x04
    306a:	1b 81       	ldd	r17, Y+3	; 0x03
    306c:	aa 81       	ldd	r26, Y+2	; 0x02
    306e:	b9 81       	ldd	r27, Y+1	; 0x01
    3070:	ce 0f       	add	r28, r30
    3072:	d1 1d       	adc	r29, r1
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	ed 01       	movw	r28, r26
    3080:	08 95       	ret

00003082 <_exit>:
    3082:	f8 94       	cli

00003084 <__stop_program>:
    3084:	ff cf       	rjmp	.-2      	; 0x3084 <__stop_program>
