
AVR_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001e90  00001f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080007e  0080007e  00001f42  2**0
                  ALLOC
  3 .stab         00001d34  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001575  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000532d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000549d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000916d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000993b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_10>
      2c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 0b 	call	0x1750	; 0x1750 <main>
      8a:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EXTI_enableInterrupt>:

#include "EXTI.h"
void(*ptr_to_callback_fns[3])(void) = {NULL, NULL, NULL};

void EXTI_enableInterrupt(INT_ID INT, triggerType trig)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EXTI_enableInterrupt+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EXTI_enableInterrupt+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	/*enable interrupt*/
	EXTI_R ->GICR.ALL_BITS |= (1<<INT);
     b56:	a4 e5       	ldi	r26, 0x54	; 84
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e4 e5       	ldi	r30, 0x54	; 84
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	87 81       	ldd	r24, Z+7	; 0x07
     b60:	48 2f       	mov	r20, r24
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <EXTI_enableInterrupt+0x2c>
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	2a 95       	dec	r18
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <EXTI_enableInterrupt+0x28>
     b76:	84 2b       	or	r24, r20
     b78:	17 96       	adiw	r26, 0x07	; 7
     b7a:	8c 93       	st	X, r24
     b7c:	17 97       	sbiw	r26, 0x07	; 7

	switch(INT)
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	3c 83       	std	Y+4, r19	; 0x04
     b86:	2b 83       	std	Y+3, r18	; 0x03
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	86 30       	cpi	r24, 0x06	; 6
     b8e:	91 05       	cpc	r25, r1
     b90:	59 f0       	breq	.+22     	; 0xba8 <EXTI_enableInterrupt+0x62>
     b92:	2b 81       	ldd	r18, Y+3	; 0x03
     b94:	3c 81       	ldd	r19, Y+4	; 0x04
     b96:	27 30       	cpi	r18, 0x07	; 7
     b98:	31 05       	cpc	r19, r1
     b9a:	89 f0       	breq	.+34     	; 0xbbe <EXTI_enableInterrupt+0x78>
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	85 30       	cpi	r24, 0x05	; 5
     ba2:	91 05       	cpc	r25, r1
     ba4:	f1 f0       	breq	.+60     	; 0xbe2 <EXTI_enableInterrupt+0x9c>
     ba6:	2b c0       	rjmp	.+86     	; 0xbfe <EXTI_enableInterrupt+0xb8>
	{
	case INT0:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig;
     ba8:	a4 e5       	ldi	r26, 0x54	; 84
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e4 e5       	ldi	r30, 0x54	; 84
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	89 2b       	or	r24, r25
     bb6:	11 96       	adiw	r26, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	11 97       	sbiw	r26, 0x01	; 1
     bbc:	20 c0       	rjmp	.+64     	; 0xbfe <EXTI_enableInterrupt+0xb8>
		break;
	case INT1:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig<<2;
     bbe:	a4 e5       	ldi	r26, 0x54	; 84
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e4 e5       	ldi	r30, 0x54	; 84
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	81 81       	ldd	r24, Z+1	; 0x01
     bc8:	28 2f       	mov	r18, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	82 2b       	or	r24, r18
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	8c 93       	st	X, r24
     bde:	11 97       	sbiw	r26, 0x01	; 1
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <EXTI_enableInterrupt+0xb8>
		break;
	case INT2:
		/*choose triggering type*/
		EXTI_R ->MCUCSR.bits.bit6 = trig; /***************/
     be2:	e4 e5       	ldi	r30, 0x54	; 84
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	81 70       	andi	r24, 0x01	; 1
     bea:	81 70       	andi	r24, 0x01	; 1
     bec:	98 2f       	mov	r25, r24
     bee:	92 95       	swap	r25
     bf0:	99 0f       	add	r25, r25
     bf2:	99 0f       	add	r25, r25
     bf4:	90 7c       	andi	r25, 0xC0	; 192
     bf6:	80 81       	ld	r24, Z
     bf8:	8f 7b       	andi	r24, 0xBF	; 191
     bfa:	89 2b       	or	r24, r25
     bfc:	80 83       	st	Z, r24
		break;
	}


}
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <EXTI_disableInterrupt>:

void EXTI_disableInterrupt(INT_ID INT)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	89 83       	std	Y+1, r24	; 0x01
	EXTI_R ->GICR.ALL_BITS &= ~(1<<INT);
     c18:	a4 e5       	ldi	r26, 0x54	; 84
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e4 e5       	ldi	r30, 0x54	; 84
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	87 81       	ldd	r24, Z+7	; 0x07
     c22:	48 2f       	mov	r20, r24
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <EXTI_disableInterrupt+0x2a>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <EXTI_disableInterrupt+0x26>
     c3a:	80 95       	com	r24
     c3c:	84 23       	and	r24, r20
     c3e:	17 96       	adiw	r26, 0x07	; 7
     c40:	8c 93       	st	X, r24
     c42:	17 97       	sbiw	r26, 0x07	; 7
}
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <EXTI_setCallBack>:
void EXTI_setCallBack(void(*ptr_to_fn)(void), INT_ID INT)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <EXTI_setCallBack+0x6>
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6b 83       	std	Y+3, r22	; 0x03
	ptr_to_callback_fns[INT-5] = ptr_to_fn;/*********************/
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	05 97       	sbiw	r24, 0x05	; 5
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	fc 01       	movw	r30, r24
     c6c:	e2 58       	subi	r30, 0x82	; 130
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <GIE_enableGlobalInterrupt>:
#include"GIE_R.h"
#include"GIE_priv.h"


void GIE_enableGlobalInterrupt()
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
     c8c:	78 94       	sei
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <GIE_disableGlobalInterrupt>:
void GIE_disableGlobalInterrupt()
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     c9c:	f8 94       	cli
}
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	08 95       	ret

00000ca4 <DIO_voidSetPinDirection>:
 *  Created on: Oct 20, 2023
 *      Author: OMR
 */
#include"GPIO.h"
void DIO_voidSetPinDirection(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <DIO_voidSetPinDirection+0x6>
     caa:	00 d0       	rcall	.+0      	; 0xcac <DIO_voidSetPinDirection+0x8>
     cac:	00 d0       	rcall	.+0      	; 0xcae <DIO_voidSetPinDirection+0xa>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	6b 83       	std	Y+3, r22	; 0x03
     cb8:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	3e 83       	std	Y+6, r19	; 0x06
     cc2:	2d 83       	std	Y+5, r18	; 0x05
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	91 05       	cpc	r25, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <DIO_voidSetPinDirection+0x2c>
     cce:	51 c0       	rjmp	.+162    	; 0xd72 <DIO_voidSetPinDirection+0xce>
     cd0:	2d 81       	ldd	r18, Y+5	; 0x05
     cd2:	3e 81       	ldd	r19, Y+6	; 0x06
     cd4:	24 30       	cpi	r18, 0x04	; 4
     cd6:	31 05       	cpc	r19, r1
     cd8:	7c f4       	brge	.+30     	; 0xcf8 <DIO_voidSetPinDirection+0x54>
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	71 f1       	breq	.+92     	; 0xd40 <DIO_voidSetPinDirection+0x9c>
     ce4:	2d 81       	ldd	r18, Y+5	; 0x05
     ce6:	3e 81       	ldd	r19, Y+6	; 0x06
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	ac f5       	brge	.+106    	; 0xd58 <DIO_voidSetPinDirection+0xb4>
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	d1 f0       	breq	.+52     	; 0xd2a <DIO_voidSetPinDirection+0x86>
     cf6:	81 c0       	rjmp	.+258    	; 0xdfa <DIO_voidSetPinDirection+0x156>
     cf8:	2d 81       	ldd	r18, Y+5	; 0x05
     cfa:	3e 81       	ldd	r19, Y+6	; 0x06
     cfc:	25 30       	cpi	r18, 0x05	; 5
     cfe:	31 05       	cpc	r19, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <DIO_voidSetPinDirection+0x60>
     d02:	52 c0       	rjmp	.+164    	; 0xda8 <DIO_voidSetPinDirection+0x104>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	91 05       	cpc	r25, r1
     d0c:	0c f4       	brge	.+2      	; 0xd10 <DIO_voidSetPinDirection+0x6c>
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <DIO_voidSetPinDirection+0xea>
     d10:	2d 81       	ldd	r18, Y+5	; 0x05
     d12:	3e 81       	ldd	r19, Y+6	; 0x06
     d14:	26 30       	cpi	r18, 0x06	; 6
     d16:	31 05       	cpc	r19, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <DIO_voidSetPinDirection+0x78>
     d1a:	54 c0       	rjmp	.+168    	; 0xdc4 <DIO_voidSetPinDirection+0x120>
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	87 30       	cpi	r24, 0x07	; 7
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <DIO_voidSetPinDirection+0x84>
     d26:	5d c0       	rjmp	.+186    	; 0xde2 <DIO_voidSetPinDirection+0x13e>
     d28:	68 c0       	rjmp	.+208    	; 0xdfa <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr ->direction.bits.bit0 = Copy_u8Direction;
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	81 70       	andi	r24, 0x01	; 1
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	98 2f       	mov	r25, r24
     d34:	91 70       	andi	r25, 0x01	; 1
     d36:	81 81       	ldd	r24, Z+1	; 0x01
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	89 2b       	or	r24, r25
     d3c:	81 83       	std	Z+1, r24	; 0x01
     d3e:	5d c0       	rjmp	.+186    	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr ->direction.bits.bit1 = Copy_u8Direction;
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	81 70       	andi	r24, 0x01	; 1
     d44:	e9 81       	ldd	r30, Y+1	; 0x01
     d46:	fa 81       	ldd	r31, Y+2	; 0x02
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	98 2f       	mov	r25, r24
     d4c:	99 0f       	add	r25, r25
     d4e:	81 81       	ldd	r24, Z+1	; 0x01
     d50:	8d 7f       	andi	r24, 0xFD	; 253
     d52:	89 2b       	or	r24, r25
     d54:	81 83       	std	Z+1, r24	; 0x01
     d56:	51 c0       	rjmp	.+162    	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr ->direction.bits.bit2 = Copy_u8Direction;
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	81 70       	andi	r24, 0x01	; 1
     d62:	98 2f       	mov	r25, r24
     d64:	99 0f       	add	r25, r25
     d66:	99 0f       	add	r25, r25
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	89 2b       	or	r24, r25
     d6e:	81 83       	std	Z+1, r24	; 0x01
     d70:	44 c0       	rjmp	.+136    	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr ->direction.bits.bit3 = Copy_u8Direction;
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	81 70       	andi	r24, 0x01	; 1
     d76:	e9 81       	ldd	r30, Y+1	; 0x01
     d78:	fa 81       	ldd	r31, Y+2	; 0x02
     d7a:	81 70       	andi	r24, 0x01	; 1
     d7c:	98 2f       	mov	r25, r24
     d7e:	99 0f       	add	r25, r25
     d80:	99 0f       	add	r25, r25
     d82:	99 0f       	add	r25, r25
     d84:	81 81       	ldd	r24, Z+1	; 0x01
     d86:	87 7f       	andi	r24, 0xF7	; 247
     d88:	89 2b       	or	r24, r25
     d8a:	81 83       	std	Z+1, r24	; 0x01
     d8c:	36 c0       	rjmp	.+108    	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr ->direction.bits.bit4 = Copy_u8Direction;
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	81 70       	andi	r24, 0x01	; 1
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	98 2f       	mov	r25, r24
     d9a:	92 95       	swap	r25
     d9c:	90 7f       	andi	r25, 0xF0	; 240
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	8f 7e       	andi	r24, 0xEF	; 239
     da2:	89 2b       	or	r24, r25
     da4:	81 83       	std	Z+1, r24	; 0x01
     da6:	29 c0       	rjmp	.+82     	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr ->direction.bits.bit5 = Copy_u8Direction;
     da8:	8c 81       	ldd	r24, Y+4	; 0x04
     daa:	81 70       	andi	r24, 0x01	; 1
     dac:	e9 81       	ldd	r30, Y+1	; 0x01
     dae:	fa 81       	ldd	r31, Y+2	; 0x02
     db0:	81 70       	andi	r24, 0x01	; 1
     db2:	98 2f       	mov	r25, r24
     db4:	92 95       	swap	r25
     db6:	99 0f       	add	r25, r25
     db8:	90 7e       	andi	r25, 0xE0	; 224
     dba:	81 81       	ldd	r24, Z+1	; 0x01
     dbc:	8f 7d       	andi	r24, 0xDF	; 223
     dbe:	89 2b       	or	r24, r25
     dc0:	81 83       	std	Z+1, r24	; 0x01
     dc2:	1b c0       	rjmp	.+54     	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr ->direction.bits.bit6 = Copy_u8Direction;
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	81 70       	andi	r24, 0x01	; 1
     dc8:	e9 81       	ldd	r30, Y+1	; 0x01
     dca:	fa 81       	ldd	r31, Y+2	; 0x02
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	98 2f       	mov	r25, r24
     dd0:	92 95       	swap	r25
     dd2:	99 0f       	add	r25, r25
     dd4:	99 0f       	add	r25, r25
     dd6:	90 7c       	andi	r25, 0xC0	; 192
     dd8:	81 81       	ldd	r24, Z+1	; 0x01
     dda:	8f 7b       	andi	r24, 0xBF	; 191
     ddc:	89 2b       	or	r24, r25
     dde:	81 83       	std	Z+1, r24	; 0x01
     de0:	0c c0       	rjmp	.+24     	; 0xdfa <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr ->direction.bits.bit7 = Copy_u8Direction;
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	e9 81       	ldd	r30, Y+1	; 0x01
     de8:	fa 81       	ldd	r31, Y+2	; 0x02
     dea:	98 2f       	mov	r25, r24
     dec:	97 95       	ror	r25
     dee:	99 27       	eor	r25, r25
     df0:	97 95       	ror	r25
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	89 2b       	or	r24, r25
     df8:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     dfa:	26 96       	adiw	r28, 0x06	; 6
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Value)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <DIO_voidSetPinValue+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <DIO_voidSetPinValue+0x8>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <DIO_voidSetPinValue+0xa>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	6b 83       	std	Y+3, r22	; 0x03
     e20:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	3e 83       	std	Y+6, r19	; 0x06
     e2a:	2d 83       	std	Y+5, r18	; 0x05
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	9e 81       	ldd	r25, Y+6	; 0x06
     e30:	83 30       	cpi	r24, 0x03	; 3
     e32:	91 05       	cpc	r25, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <DIO_voidSetPinValue+0x2c>
     e36:	51 c0       	rjmp	.+162    	; 0xeda <DIO_voidSetPinValue+0xce>
     e38:	2d 81       	ldd	r18, Y+5	; 0x05
     e3a:	3e 81       	ldd	r19, Y+6	; 0x06
     e3c:	24 30       	cpi	r18, 0x04	; 4
     e3e:	31 05       	cpc	r19, r1
     e40:	7c f4       	brge	.+30     	; 0xe60 <DIO_voidSetPinValue+0x54>
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	91 05       	cpc	r25, r1
     e4a:	71 f1       	breq	.+92     	; 0xea8 <DIO_voidSetPinValue+0x9c>
     e4c:	2d 81       	ldd	r18, Y+5	; 0x05
     e4e:	3e 81       	ldd	r19, Y+6	; 0x06
     e50:	22 30       	cpi	r18, 0x02	; 2
     e52:	31 05       	cpc	r19, r1
     e54:	ac f5       	brge	.+106    	; 0xec0 <DIO_voidSetPinValue+0xb4>
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	d1 f0       	breq	.+52     	; 0xe92 <DIO_voidSetPinValue+0x86>
     e5e:	81 c0       	rjmp	.+258    	; 0xf62 <DIO_voidSetPinValue+0x156>
     e60:	2d 81       	ldd	r18, Y+5	; 0x05
     e62:	3e 81       	ldd	r19, Y+6	; 0x06
     e64:	25 30       	cpi	r18, 0x05	; 5
     e66:	31 05       	cpc	r19, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <DIO_voidSetPinValue+0x60>
     e6a:	52 c0       	rjmp	.+164    	; 0xf10 <DIO_voidSetPinValue+0x104>
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	85 30       	cpi	r24, 0x05	; 5
     e72:	91 05       	cpc	r25, r1
     e74:	0c f4       	brge	.+2      	; 0xe78 <DIO_voidSetPinValue+0x6c>
     e76:	3f c0       	rjmp	.+126    	; 0xef6 <DIO_voidSetPinValue+0xea>
     e78:	2d 81       	ldd	r18, Y+5	; 0x05
     e7a:	3e 81       	ldd	r19, Y+6	; 0x06
     e7c:	26 30       	cpi	r18, 0x06	; 6
     e7e:	31 05       	cpc	r19, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <DIO_voidSetPinValue+0x78>
     e82:	54 c0       	rjmp	.+168    	; 0xf2c <DIO_voidSetPinValue+0x120>
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	87 30       	cpi	r24, 0x07	; 7
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_voidSetPinValue+0x84>
     e8e:	5d c0       	rjmp	.+186    	; 0xf4a <DIO_voidSetPinValue+0x13e>
     e90:	68 c0       	rjmp	.+208    	; 0xf62 <DIO_voidSetPinValue+0x156>
		{
		case 0:
			ptr ->PORT_R.bits.bit0 = Copy_u8Value;
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	81 70       	andi	r24, 0x01	; 1
     e96:	e9 81       	ldd	r30, Y+1	; 0x01
     e98:	fa 81       	ldd	r31, Y+2	; 0x02
     e9a:	98 2f       	mov	r25, r24
     e9c:	91 70       	andi	r25, 0x01	; 1
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	89 2b       	or	r24, r25
     ea4:	82 83       	std	Z+2, r24	; 0x02
     ea6:	5d c0       	rjmp	.+186    	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 1:
			ptr ->PORT_R.bits.bit1 = Copy_u8Value;
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	81 70       	andi	r24, 0x01	; 1
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	81 70       	andi	r24, 0x01	; 1
     eb2:	98 2f       	mov	r25, r24
     eb4:	99 0f       	add	r25, r25
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	8d 7f       	andi	r24, 0xFD	; 253
     eba:	89 2b       	or	r24, r25
     ebc:	82 83       	std	Z+2, r24	; 0x02
     ebe:	51 c0       	rjmp	.+162    	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 2:
			ptr ->PORT_R.bits.bit2 = Copy_u8Value;
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	81 70       	andi	r24, 0x01	; 1
     ec4:	e9 81       	ldd	r30, Y+1	; 0x01
     ec6:	fa 81       	ldd	r31, Y+2	; 0x02
     ec8:	81 70       	andi	r24, 0x01	; 1
     eca:	98 2f       	mov	r25, r24
     ecc:	99 0f       	add	r25, r25
     ece:	99 0f       	add	r25, r25
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	8b 7f       	andi	r24, 0xFB	; 251
     ed4:	89 2b       	or	r24, r25
     ed6:	82 83       	std	Z+2, r24	; 0x02
     ed8:	44 c0       	rjmp	.+136    	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 3:
			ptr ->PORT_R.bits.bit3 = Copy_u8Value;
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	81 70       	andi	r24, 0x01	; 1
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 70       	andi	r24, 0x01	; 1
     ee4:	98 2f       	mov	r25, r24
     ee6:	99 0f       	add	r25, r25
     ee8:	99 0f       	add	r25, r25
     eea:	99 0f       	add	r25, r25
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	87 7f       	andi	r24, 0xF7	; 247
     ef0:	89 2b       	or	r24, r25
     ef2:	82 83       	std	Z+2, r24	; 0x02
     ef4:	36 c0       	rjmp	.+108    	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 4:
			ptr ->PORT_R.bits.bit4 = Copy_u8Value;
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	e9 81       	ldd	r30, Y+1	; 0x01
     efc:	fa 81       	ldd	r31, Y+2	; 0x02
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	98 2f       	mov	r25, r24
     f02:	92 95       	swap	r25
     f04:	90 7f       	andi	r25, 0xF0	; 240
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	89 2b       	or	r24, r25
     f0c:	82 83       	std	Z+2, r24	; 0x02
     f0e:	29 c0       	rjmp	.+82     	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 5:
			ptr ->PORT_R.bits.bit5 = Copy_u8Value;
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	81 70       	andi	r24, 0x01	; 1
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	81 70       	andi	r24, 0x01	; 1
     f1a:	98 2f       	mov	r25, r24
     f1c:	92 95       	swap	r25
     f1e:	99 0f       	add	r25, r25
     f20:	90 7e       	andi	r25, 0xE0	; 224
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	8f 7d       	andi	r24, 0xDF	; 223
     f26:	89 2b       	or	r24, r25
     f28:	82 83       	std	Z+2, r24	; 0x02
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 6:
			ptr ->PORT_R.bits.bit6 = Copy_u8Value;
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	81 70       	andi	r24, 0x01	; 1
     f30:	e9 81       	ldd	r30, Y+1	; 0x01
     f32:	fa 81       	ldd	r31, Y+2	; 0x02
     f34:	81 70       	andi	r24, 0x01	; 1
     f36:	98 2f       	mov	r25, r24
     f38:	92 95       	swap	r25
     f3a:	99 0f       	add	r25, r25
     f3c:	99 0f       	add	r25, r25
     f3e:	90 7c       	andi	r25, 0xC0	; 192
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	8f 7b       	andi	r24, 0xBF	; 191
     f44:	89 2b       	or	r24, r25
     f46:	82 83       	std	Z+2, r24	; 0x02
     f48:	0c c0       	rjmp	.+24     	; 0xf62 <DIO_voidSetPinValue+0x156>
			break;
		case 7:
			ptr ->PORT_R.bits.bit7 = Copy_u8Value;
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	81 70       	andi	r24, 0x01	; 1
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	98 2f       	mov	r25, r24
     f54:	97 95       	ror	r25
     f56:	99 27       	eor	r25, r25
     f58:	97 95       	ror	r25
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	8f 77       	andi	r24, 0x7F	; 127
     f5e:	89 2b       	or	r24, r25
     f60:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
}
     f62:	26 96       	adiw	r28, 0x06	; 6
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	27 97       	sbiw	r28, 0x07	; 7
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
     f8c:	6c 83       	std	Y+4, r22	; 0x04
	u8 pinValue;
	switch(Copy_u8PinId)
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3f 83       	std	Y+7, r19	; 0x07
     f96:	2e 83       	std	Y+6, r18	; 0x06
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_voidGetPinValue+0x30>
     fa2:	3e c0       	rjmp	.+124    	; 0x1020 <DIO_voidGetPinValue+0xac>
     fa4:	2e 81       	ldd	r18, Y+6	; 0x06
     fa6:	3f 81       	ldd	r19, Y+7	; 0x07
     fa8:	24 30       	cpi	r18, 0x04	; 4
     faa:	31 05       	cpc	r19, r1
     fac:	7c f4       	brge	.+30     	; 0xfcc <DIO_voidGetPinValue+0x58>
     fae:	8e 81       	ldd	r24, Y+6	; 0x06
     fb0:	9f 81       	ldd	r25, Y+7	; 0x07
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	29 f1       	breq	.+74     	; 0x1002 <DIO_voidGetPinValue+0x8e>
     fb8:	2e 81       	ldd	r18, Y+6	; 0x06
     fba:	3f 81       	ldd	r19, Y+7	; 0x07
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	3c f5       	brge	.+78     	; 0x1010 <DIO_voidGetPinValue+0x9c>
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	b1 f0       	breq	.+44     	; 0xff6 <DIO_voidGetPinValue+0x82>
     fca:	55 c0       	rjmp	.+170    	; 0x1076 <DIO_voidGetPinValue+0x102>
     fcc:	2e 81       	ldd	r18, Y+6	; 0x06
     fce:	3f 81       	ldd	r19, Y+7	; 0x07
     fd0:	25 30       	cpi	r18, 0x05	; 5
     fd2:	31 05       	cpc	r19, r1
     fd4:	b1 f1       	breq	.+108    	; 0x1042 <DIO_voidGetPinValue+0xce>
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	91 05       	cpc	r25, r1
     fde:	4c f1       	brlt	.+82     	; 0x1032 <DIO_voidGetPinValue+0xbe>
     fe0:	2e 81       	ldd	r18, Y+6	; 0x06
     fe2:	3f 81       	ldd	r19, Y+7	; 0x07
     fe4:	26 30       	cpi	r18, 0x06	; 6
     fe6:	31 05       	cpc	r19, r1
     fe8:	a9 f1       	breq	.+106    	; 0x1054 <DIO_voidGetPinValue+0xe0>
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	87 30       	cpi	r24, 0x07	; 7
     ff0:	91 05       	cpc	r25, r1
     ff2:	d1 f1       	breq	.+116    	; 0x1068 <DIO_voidGetPinValue+0xf4>
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <DIO_voidGetPinValue+0x102>
		{
	case 0:
				pinValue =  ptr ->PIN_R.bits.bit0 ;
     ff6:	ea 81       	ldd	r30, Y+2	; 0x02
     ff8:	fb 81       	ldd	r31, Y+3	; 0x03
     ffa:	80 81       	ld	r24, Z
     ffc:	81 70       	andi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	3a c0       	rjmp	.+116    	; 0x1076 <DIO_voidGetPinValue+0x102>
				break;
			case 1:
				pinValue =  ptr ->PIN_R.bits.bit1;
    1002:	ea 81       	ldd	r30, Y+2	; 0x02
    1004:	fb 81       	ldd	r31, Y+3	; 0x03
    1006:	80 81       	ld	r24, Z
    1008:	86 95       	lsr	r24
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	33 c0       	rjmp	.+102    	; 0x1076 <DIO_voidGetPinValue+0x102>
				break;
			case 2:
				return ptr ->PIN_R.bits.bit2;
    1010:	ea 81       	ldd	r30, Y+2	; 0x02
    1012:	fb 81       	ldd	r31, Y+3	; 0x03
    1014:	80 81       	ld	r24, Z
    1016:	86 95       	lsr	r24
    1018:	86 95       	lsr	r24
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	2d c0       	rjmp	.+90     	; 0x107a <DIO_voidGetPinValue+0x106>
				break;
			case 3:
				return ptr ->PIN_R.bits.bit3;
    1020:	ea 81       	ldd	r30, Y+2	; 0x02
    1022:	fb 81       	ldd	r31, Y+3	; 0x03
    1024:	80 81       	ld	r24, Z
    1026:	86 95       	lsr	r24
    1028:	86 95       	lsr	r24
    102a:	86 95       	lsr	r24
    102c:	81 70       	andi	r24, 0x01	; 1
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	24 c0       	rjmp	.+72     	; 0x107a <DIO_voidGetPinValue+0x106>
				break;
			case 4:
				return ptr ->PIN_R.bits.bit4;
    1032:	ea 81       	ldd	r30, Y+2	; 0x02
    1034:	fb 81       	ldd	r31, Y+3	; 0x03
    1036:	80 81       	ld	r24, Z
    1038:	82 95       	swap	r24
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	1c c0       	rjmp	.+56     	; 0x107a <DIO_voidGetPinValue+0x106>
				break;
			case 5:
				pinValue = ptr ->PIN_R.bits.bit5;
    1042:	ea 81       	ldd	r30, Y+2	; 0x02
    1044:	fb 81       	ldd	r31, Y+3	; 0x03
    1046:	80 81       	ld	r24, Z
    1048:	82 95       	swap	r24
    104a:	86 95       	lsr	r24
    104c:	87 70       	andi	r24, 0x07	; 7
    104e:	81 70       	andi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	11 c0       	rjmp	.+34     	; 0x1076 <DIO_voidGetPinValue+0x102>
				break;
			case 6:
				pinValue = ptr ->PIN_R.bits.bit6;
    1054:	ea 81       	ldd	r30, Y+2	; 0x02
    1056:	fb 81       	ldd	r31, Y+3	; 0x03
    1058:	80 81       	ld	r24, Z
    105a:	82 95       	swap	r24
    105c:	86 95       	lsr	r24
    105e:	86 95       	lsr	r24
    1060:	83 70       	andi	r24, 0x03	; 3
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <DIO_voidGetPinValue+0x102>
				break;
			case 7:
				pinValue = ptr ->PIN_R.bits.bit7;
    1068:	ea 81       	ldd	r30, Y+2	; 0x02
    106a:	fb 81       	ldd	r31, Y+3	; 0x03
    106c:	80 81       	ld	r24, Z
    106e:	88 1f       	adc	r24, r24
    1070:	88 27       	eor	r24, r24
    1072:	88 1f       	adc	r24, r24
    1074:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		return pinValue;
    1076:	99 81       	ldd	r25, Y+1	; 0x01
    1078:	9d 83       	std	Y+5, r25	; 0x05
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    107c:	27 96       	adiw	r28, 0x07	; 7
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(GPIO_REGISTERS* ptr, u8 Copy_u8Direction)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <DIO_voidSetPortDirection+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->direction.ALL_BITS = Copy_u8Direction;
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 83       	std	Z+1, r24	; 0x01
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(GPIO_REGISTERS* ptr, u8 Copy_u8Value)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_voidSetPortValue+0x6>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->PORT_R.ALL_BITS = Copy_u8Value;
    10c6:	e9 81       	ldd	r30, Y+1	; 0x01
    10c8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	82 83       	std	Z+2, r24	; 0x02
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(GPIO_REGISTERS* ptr)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_voidGetPortValue+0x6>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
	return ptr -> PORT_R.ALL_BITS;
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <LED_on>:
 */
#include"LED.h"
#include"GPIO.h"

void LED_on(GPIO_REGISTERS* reg, u8 pin_num)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <LED_on+0x6>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6b 83       	std	Y+3, r22	; 0x03
	//DIO_voidSetPinDirection(reg, pin_num, OUTPUT);
	DIO_voidSetPinValue(reg, pin_num, LOGIC_HIGH);
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	6b 81       	ldd	r22, Y+3	; 0x03
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <LED_off>:
void LED_off(GPIO_REGISTERS* reg, u8 pin_num)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <LED_off+0x6>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6b 83       	std	Y+3, r22	; 0x03
	//DIO_voidSetPinDirection(reg, pin_num, OUTPUT);
	DIO_voidSetPinValue(reg, pin_num, LOGIC_LOW);
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	6b 81       	ldd	r22, Y+3	; 0x03
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>

}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <PB_getButtonState>:
#include"PUSH_BUTTON.h"
#include"MCU_HW.h"


PB_state PB_getButtonState(GPIO_REGISTERS* buttonPort, u8 buttonPin)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <PB_getButtonState+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <PB_getButtonState+0x8>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <PB_getButtonState+0xa>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9b 83       	std	Y+3, r25	; 0x03
    115c:	8a 83       	std	Y+2, r24	; 0x02
    115e:	6c 83       	std	Y+4, r22	; 0x04
	u8 button;
	switch(buttonPin)
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3e 83       	std	Y+6, r19	; 0x06
    1168:	2d 83       	std	Y+5, r18	; 0x05
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	91 05       	cpc	r25, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <PB_getButtonState+0x2a>
    1174:	3e c0       	rjmp	.+124    	; 0x11f2 <PB_getButtonState+0xa6>
    1176:	2d 81       	ldd	r18, Y+5	; 0x05
    1178:	3e 81       	ldd	r19, Y+6	; 0x06
    117a:	24 30       	cpi	r18, 0x04	; 4
    117c:	31 05       	cpc	r19, r1
    117e:	7c f4       	brge	.+30     	; 0x119e <PB_getButtonState+0x52>
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	29 f1       	breq	.+74     	; 0x11d4 <PB_getButtonState+0x88>
    118a:	2d 81       	ldd	r18, Y+5	; 0x05
    118c:	3e 81       	ldd	r19, Y+6	; 0x06
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	3c f5       	brge	.+78     	; 0x11e2 <PB_getButtonState+0x96>
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	b1 f0       	breq	.+44     	; 0x11c8 <PB_getButtonState+0x7c>
    119c:	55 c0       	rjmp	.+170    	; 0x1248 <PB_getButtonState+0xfc>
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	3e 81       	ldd	r19, Y+6	; 0x06
    11a2:	25 30       	cpi	r18, 0x05	; 5
    11a4:	31 05       	cpc	r19, r1
    11a6:	b1 f1       	breq	.+108    	; 0x1214 <PB_getButtonState+0xc8>
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	85 30       	cpi	r24, 0x05	; 5
    11ae:	91 05       	cpc	r25, r1
    11b0:	4c f1       	brlt	.+82     	; 0x1204 <PB_getButtonState+0xb8>
    11b2:	2d 81       	ldd	r18, Y+5	; 0x05
    11b4:	3e 81       	ldd	r19, Y+6	; 0x06
    11b6:	26 30       	cpi	r18, 0x06	; 6
    11b8:	31 05       	cpc	r19, r1
    11ba:	a9 f1       	breq	.+106    	; 0x1226 <PB_getButtonState+0xda>
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	87 30       	cpi	r24, 0x07	; 7
    11c2:	91 05       	cpc	r25, r1
    11c4:	d1 f1       	breq	.+116    	; 0x123a <PB_getButtonState+0xee>
    11c6:	40 c0       	rjmp	.+128    	; 0x1248 <PB_getButtonState+0xfc>
	{
	case 0:
		button=buttonPort->PIN_R.bits.bit0;
    11c8:	ea 81       	ldd	r30, Y+2	; 0x02
    11ca:	fb 81       	ldd	r31, Y+3	; 0x03
    11cc:	80 81       	ld	r24, Z
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	3a c0       	rjmp	.+116    	; 0x1248 <PB_getButtonState+0xfc>
		break;

	case 1:
		button=buttonPort->PIN_R.bits.bit1;
    11d4:	ea 81       	ldd	r30, Y+2	; 0x02
    11d6:	fb 81       	ldd	r31, Y+3	; 0x03
    11d8:	80 81       	ld	r24, Z
    11da:	86 95       	lsr	r24
    11dc:	81 70       	andi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	33 c0       	rjmp	.+102    	; 0x1248 <PB_getButtonState+0xfc>
		break;
	case 2:
		button=buttonPort->PIN_R.bits.bit2;
    11e2:	ea 81       	ldd	r30, Y+2	; 0x02
    11e4:	fb 81       	ldd	r31, Y+3	; 0x03
    11e6:	80 81       	ld	r24, Z
    11e8:	86 95       	lsr	r24
    11ea:	86 95       	lsr	r24
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	2b c0       	rjmp	.+86     	; 0x1248 <PB_getButtonState+0xfc>
		break;
	case 3:
		button=buttonPort->PIN_R.bits.bit3;
    11f2:	ea 81       	ldd	r30, Y+2	; 0x02
    11f4:	fb 81       	ldd	r31, Y+3	; 0x03
    11f6:	80 81       	ld	r24, Z
    11f8:	86 95       	lsr	r24
    11fa:	86 95       	lsr	r24
    11fc:	86 95       	lsr	r24
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	22 c0       	rjmp	.+68     	; 0x1248 <PB_getButtonState+0xfc>
		break;

	case 4:
		button=buttonPort->PIN_R.bits.bit4;
    1204:	ea 81       	ldd	r30, Y+2	; 0x02
    1206:	fb 81       	ldd	r31, Y+3	; 0x03
    1208:	80 81       	ld	r24, Z
    120a:	82 95       	swap	r24
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	1a c0       	rjmp	.+52     	; 0x1248 <PB_getButtonState+0xfc>
		break;
	case 5:
		button=buttonPort->PIN_R.bits.bit5;
    1214:	ea 81       	ldd	r30, Y+2	; 0x02
    1216:	fb 81       	ldd	r31, Y+3	; 0x03
    1218:	80 81       	ld	r24, Z
    121a:	82 95       	swap	r24
    121c:	86 95       	lsr	r24
    121e:	87 70       	andi	r24, 0x07	; 7
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	11 c0       	rjmp	.+34     	; 0x1248 <PB_getButtonState+0xfc>
		break;
	case 6:
		button=buttonPort->PIN_R.bits.bit6;
    1226:	ea 81       	ldd	r30, Y+2	; 0x02
    1228:	fb 81       	ldd	r31, Y+3	; 0x03
    122a:	80 81       	ld	r24, Z
    122c:	82 95       	swap	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	83 70       	andi	r24, 0x03	; 3
    1234:	81 70       	andi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <PB_getButtonState+0xfc>
		break;
	case 7:
		button=buttonPort->PIN_R.bits.bit7;
    123a:	ea 81       	ldd	r30, Y+2	; 0x02
    123c:	fb 81       	ldd	r31, Y+3	; 0x03
    123e:	80 81       	ld	r24, Z
    1240:	88 1f       	adc	r24, r24
    1242:	88 27       	eor	r24, r24
    1244:	88 1f       	adc	r24, r24
    1246:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return button;
    1248:	89 81       	ldd	r24, Y+1	; 0x01


}
    124a:	26 96       	adiw	r28, 0x06	; 6
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <Timer0_Init>:
 u8 ovf_count=0, half_sec_count=0;

static u8 ovf_counts_for_delay_fn_CTC;
void (*Timer0_callback_fns[2]) (void) = {NULL};
void Timer0_Init(Timer0_cfg* cfg)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <Timer0_Init+0x6>
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
	/*CHOOSE MODE*/
	TIMER0_R_BASE->TCCR0.bits.bit6 = READBIT(cfg->mode, 0);
    126a:	a2 e5       	ldi	r26, 0x52	; 82
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e9 81       	ldd	r30, Y+1	; 0x01
    1270:	fa 81       	ldd	r31, Y+2	; 0x02
    1272:	80 81       	ld	r24, Z
    1274:	81 70       	andi	r24, 0x01	; 1
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	98 2f       	mov	r25, r24
    127e:	92 95       	swap	r25
    1280:	99 0f       	add	r25, r25
    1282:	99 0f       	add	r25, r25
    1284:	90 7c       	andi	r25, 0xC0	; 192
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	8c 91       	ld	r24, X
    128a:	11 97       	sbiw	r26, 0x01	; 1
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	89 2b       	or	r24, r25
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	8c 93       	st	X, r24
	TIMER0_R_BASE->TCCR0.bits.bit3 = READBIT(cfg->mode, 1);
    1294:	a2 e5       	ldi	r26, 0x52	; 82
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e9 81       	ldd	r30, Y+1	; 0x01
    129a:	fa 81       	ldd	r31, Y+2	; 0x02
    129c:	80 81       	ld	r24, Z
    129e:	86 95       	lsr	r24
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	81 70       	andi	r24, 0x01	; 1
    12a4:	81 70       	andi	r24, 0x01	; 1
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	98 2f       	mov	r25, r24
    12aa:	99 0f       	add	r25, r25
    12ac:	99 0f       	add	r25, r25
    12ae:	99 0f       	add	r25, r25
    12b0:	11 96       	adiw	r26, 0x01	; 1
    12b2:	8c 91       	ld	r24, X
    12b4:	11 97       	sbiw	r26, 0x01	; 1
    12b6:	87 7f       	andi	r24, 0xF7	; 247
    12b8:	89 2b       	or	r24, r25
    12ba:	11 96       	adiw	r26, 0x01	; 1
    12bc:	8c 93       	st	X, r24
    12be:	11 97       	sbiw	r26, 0x01	; 1

	/*set  Force Output Compare*/
	if(cfg ->mode == T0_CTC || cfg->mode == Normal)
    12c0:	e9 81       	ldd	r30, Y+1	; 0x01
    12c2:	fa 81       	ldd	r31, Y+2	; 0x02
    12c4:	80 81       	ld	r24, Z
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <Timer0_Init+0x78>
    12ca:	e9 81       	ldd	r30, Y+1	; 0x01
    12cc:	fa 81       	ldd	r31, Y+2	; 0x02
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	31 f4       	brne	.+12     	; 0x12e0 <Timer0_Init+0x84>
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 1;
    12d4:	e2 e5       	ldi	r30, 0x52	; 82
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	81 81       	ldd	r24, Z+1	; 0x01
    12da:	80 68       	ori	r24, 0x80	; 128
    12dc:	81 83       	std	Z+1, r24	; 0x01
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <Timer0_Init+0x8e>
	}
	else
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 0;
    12e0:	e2 e5       	ldi	r30, 0x52	; 82
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	81 81       	ldd	r24, Z+1	; 0x01
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	81 83       	std	Z+1, r24	; 0x01
	}

	/*Compare Match Output Mode*/
	TIMER0_R_BASE ->TCCR0.bits.bit4 = READBIT(cfg ->CMP_MODE, 0);
    12ea:	a2 e5       	ldi	r26, 0x52	; 82
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	98 2f       	mov	r25, r24
    12fe:	92 95       	swap	r25
    1300:	90 7f       	andi	r25, 0xF0	; 240
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	8c 91       	ld	r24, X
    1306:	11 97       	sbiw	r26, 0x01	; 1
    1308:	8f 7e       	andi	r24, 0xEF	; 239
    130a:	89 2b       	or	r24, r25
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	8c 93       	st	X, r24
	TIMER0_R_BASE ->TCCR0.bits.bit5 = READBIT(cfg ->CMP_MODE, 1);
    1310:	a2 e5       	ldi	r26, 0x52	; 82
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 81       	ldd	r30, Y+1	; 0x01
    1316:	fa 81       	ldd	r31, Y+2	; 0x02
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	86 95       	lsr	r24
    131c:	81 70       	andi	r24, 0x01	; 1
    131e:	81 70       	andi	r24, 0x01	; 1
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	98 2f       	mov	r25, r24
    1326:	92 95       	swap	r25
    1328:	99 0f       	add	r25, r25
    132a:	90 7e       	andi	r25, 0xE0	; 224
    132c:	11 96       	adiw	r26, 0x01	; 1
    132e:	8c 91       	ld	r24, X
    1330:	11 97       	sbiw	r26, 0x01	; 1
    1332:	8f 7d       	andi	r24, 0xDF	; 223
    1334:	89 2b       	or	r24, r25
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	8c 93       	st	X, r24


	/*select prescaler*/
	TIMER0_R_BASE->TCCR0.ALL_BITS |= (cfg ->pre & (111<<0));
    133a:	a2 e5       	ldi	r26, 0x52	; 82
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e5       	ldi	r30, 0x52	; 82
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	98 2f       	mov	r25, r24
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	81 81       	ldd	r24, Z+1	; 0x01
    134c:	8f 76       	andi	r24, 0x6F	; 111
    134e:	89 2b       	or	r24, r25
    1350:	11 96       	adiw	r26, 0x01	; 1
    1352:	8c 93       	st	X, r24
    1354:	11 97       	sbiw	r26, 0x01	; 1

	ovf_count=0;
    1356:	10 92 84 00 	sts	0x0084, r1
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <Timer_start>:

void Timer_start(TIMER0_PRESCALER pre)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_R_BASE->TCCR0.ALL_BITS &= (pre & ~(111<<0));
    1370:	a2 e5       	ldi	r26, 0x52	; 82
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e2 e5       	ldi	r30, 0x52	; 82
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	81 81       	ldd	r24, Z+1	; 0x01
    137a:	98 2f       	mov	r25, r24
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	80 79       	andi	r24, 0x90	; 144
    1380:	89 23       	and	r24, r25
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	8c 93       	st	X, r24

	TIMER0_R_BASE->TCCR0.ALL_BITS |= (pre & (111<<0));
    1386:	a2 e5       	ldi	r26, 0x52	; 82
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e5       	ldi	r30, 0x52	; 82
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	98 2f       	mov	r25, r24
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	8f 76       	andi	r24, 0x6F	; 111
    1396:	89 2b       	or	r24, r25
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	8c 93       	st	X, r24
    139c:	11 97       	sbiw	r26, 0x01	; 1
	ovf_count=0;
    139e:	10 92 84 00 	sts	0x0084, r1
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <Timer_stop>:

void Timer_stop()
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_R_BASE->TCCR0.ALL_BITS &= ~(111<<0);
    13b2:	a2 e5       	ldi	r26, 0x52	; 82
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e2 e5       	ldi	r30, 0x52	; 82
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	80 79       	andi	r24, 0x90	; 144
    13be:	11 96       	adiw	r26, 0x01	; 1
    13c0:	8c 93       	st	X, r24
    13c2:	11 97       	sbiw	r26, 0x01	; 1
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <Timer_GetCounts>:

u16 Timer_GetCounts()
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	return ovf_count;
    13d2:	80 91 84 00 	lds	r24, 0x0084
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <Timer0_delay>:

u8 ov_flag=0;
void Timer0_delay(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	static u16 c=0;
	c++;
    13e8:	80 91 8b 00 	lds	r24, 0x008B
    13ec:	90 91 8c 00 	lds	r25, 0x008C
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	90 93 8c 00 	sts	0x008C, r25
    13f6:	80 93 8b 00 	sts	0x008B, r24
	if (c==ovf_counts_for_delay_fn)
    13fa:	20 91 8b 00 	lds	r18, 0x008B
    13fe:	30 91 8c 00 	lds	r19, 0x008C
    1402:	80 91 8d 00 	lds	r24, 0x008D
    1406:	90 91 8e 00 	lds	r25, 0x008E
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	39 f4       	brne	.+14     	; 0x141e <Timer0_delay+0x3e>
	{
		ov_flag=1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 8a 00 	sts	0x008A, r24
		c=0;
    1416:	10 92 8c 00 	sts	0x008C, r1
    141a:	10 92 8b 00 	sts	0x008B, r1
	}
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <Timer_setDelayTimeMilliSec>:
void Timer_setDelayTimeMilliSec(u32 delay_in_ms, Timer0_Mode mode)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	63 97       	sbiw	r28, 0x13	; 19
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	6d 87       	std	Y+13, r22	; 0x0d
    143a:	7e 87       	std	Y+14, r23	; 0x0e
    143c:	8f 87       	std	Y+15, r24	; 0x0f
    143e:	98 8b       	std	Y+16, r25	; 0x10
    1440:	49 8b       	std	Y+17, r20	; 0x11
/*too-much-delay*/
	Timer_start(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0));
    1442:	e2 e5       	ldi	r30, 0x52	; 82
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	8f 76       	andi	r24, 0x6F	; 111
    144a:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer_start>
		u32 tick=(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0))/FCPU;
    144e:	e2 e5       	ldi	r30, 0x52	; 82
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	81 81       	ldd	r24, Z+1	; 0x01
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	8f 76       	andi	r24, 0x6F	; 111
    145a:	90 70       	andi	r25, 0x00	; 0
    145c:	9b 8b       	std	Y+19, r25	; 0x13
    145e:	8a 8b       	std	Y+18, r24	; 0x12
    1460:	8a 89       	ldd	r24, Y+18	; 0x12
    1462:	9b 89       	ldd	r25, Y+19	; 0x13
    1464:	99 23       	and	r25, r25
    1466:	2c f4       	brge	.+10     	; 0x1472 <Timer_setDelayTimeMilliSec+0x4e>
    1468:	8a 89       	ldd	r24, Y+18	; 0x12
    146a:	9b 89       	ldd	r25, Y+19	; 0x13
    146c:	0f 96       	adiw	r24, 0x0f	; 15
    146e:	9b 8b       	std	Y+19, r25	; 0x13
    1470:	8a 8b       	std	Y+18, r24	; 0x12
    1472:	8a 89       	ldd	r24, Y+18	; 0x12
    1474:	9b 89       	ldd	r25, Y+19	; 0x13
    1476:	95 95       	asr	r25
    1478:	87 95       	ror	r24
    147a:	95 95       	asr	r25
    147c:	87 95       	ror	r24
    147e:	95 95       	asr	r25
    1480:	87 95       	ror	r24
    1482:	95 95       	asr	r25
    1484:	87 95       	ror	r24
    1486:	aa 27       	eor	r26, r26
    1488:	97 fd       	sbrc	r25, 7
    148a:	a0 95       	com	r26
    148c:	ba 2f       	mov	r27, r26
    148e:	89 87       	std	Y+9, r24	; 0x09
    1490:	9a 87       	std	Y+10, r25	; 0x0a
    1492:	ab 87       	std	Y+11, r26	; 0x0b
    1494:	bc 87       	std	Y+12, r27	; 0x0c
		u32 needded_ticks=(u32)(delay_in_ms *1000)/tick;
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	af 85       	ldd	r26, Y+15	; 0x0f
    149c:	b8 89       	ldd	r27, Y+16	; 0x10
    149e:	28 ee       	ldi	r18, 0xE8	; 232
    14a0:	33 e0       	ldi	r19, 0x03	; 3
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__mulsi3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	29 85       	ldd	r18, Y+9	; 0x09
    14b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    14b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__udivmodsi4>
    14c2:	da 01       	movw	r26, r20
    14c4:	c9 01       	movw	r24, r18
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	af 83       	std	Y+7, r26	; 0x07
    14cc:	b8 87       	std	Y+8, r27	; 0x08

		ovf_counts_for_delay_fn=needded_ticks/256;
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	af 81       	ldd	r26, Y+7	; 0x07
    14d4:	b8 85       	ldd	r27, Y+8	; 0x08
    14d6:	89 2f       	mov	r24, r25
    14d8:	9a 2f       	mov	r25, r26
    14da:	ab 2f       	mov	r26, r27
    14dc:	bb 27       	eor	r27, r27
    14de:	90 93 8e 00 	sts	0x008E, r25
    14e2:	80 93 8d 00 	sts	0x008D, r24
		u32 OVF_Rem=needded_ticks%256;
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	af 81       	ldd	r26, Y+7	; 0x07
    14ec:	b8 85       	ldd	r27, Y+8	; 0x08
    14ee:	90 70       	andi	r25, 0x00	; 0
    14f0:	a0 70       	andi	r26, 0x00	; 0
    14f2:	b0 70       	andi	r27, 0x00	; 0
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	ab 83       	std	Y+3, r26	; 0x03
    14fa:	bc 83       	std	Y+4, r27	; 0x04
		if (OVF_Rem !=0)
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	ab 81       	ldd	r26, Y+3	; 0x03
    1502:	bc 81       	ldd	r27, Y+4	; 0x04
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	a1 05       	cpc	r26, r1
    1508:	b1 05       	cpc	r27, r1
    150a:	71 f0       	breq	.+28     	; 0x1528 <Timer_setDelayTimeMilliSec+0x104>
		{
			ovf_counts_for_delay_fn++;
    150c:	80 91 8d 00 	lds	r24, 0x008D
    1510:	90 91 8e 00 	lds	r25, 0x008E
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 8e 00 	sts	0x008E, r25
    151a:	80 93 8d 00 	sts	0x008D, r24
			TIMER0_R_BASE->TCNT0.ALL_BITS =256-OVF_Rem;
    151e:	e2 e5       	ldi	r30, 0x52	; 82
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	81 95       	neg	r24
    1526:	80 83       	st	Z, r24
		}
		setCallBack(Timer0_delay, Normal);
    1528:	80 ef       	ldi	r24, 0xF0	; 240
    152a:	99 e0       	ldi	r25, 0x09	; 9
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <setCallBack>
		while(ov_flag==0);
    1532:	80 91 8a 00 	lds	r24, 0x008A
    1536:	88 23       	and	r24, r24
    1538:	e1 f3       	breq	.-8      	; 0x1532 <Timer_setDelayTimeMilliSec+0x10e>
		ov_flag=0;
    153a:	10 92 8a 00 	sts	0x008A, r1
}
    153e:	63 96       	adiw	r28, 0x13	; 19
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <EnableInt>:

void EnableInt(Timer0_Mode mode)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	89 83       	std	Y+1, r24	; 0x01
	if(mode == Normal)
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	88 23       	and	r24, r24
    1560:	51 f4       	brne	.+20     	; 0x1576 <EnableInt+0x26>
		TIMER0_R_BASE->TIMSK.ALL_BITS |= 1<<0;
    1562:	a2 e5       	ldi	r26, 0x52	; 82
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e2 e5       	ldi	r30, 0x52	; 82
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	87 81       	ldd	r24, Z+7	; 0x07
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	17 96       	adiw	r26, 0x07	; 7
    1570:	8c 93       	st	X, r24
    1572:	17 97       	sbiw	r26, 0x07	; 7
    1574:	0c c0       	rjmp	.+24     	; 0x158e <EnableInt+0x3e>

	else if(mode == T0_CTC)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	49 f4       	brne	.+18     	; 0x158e <EnableInt+0x3e>
		TIMER0_R_BASE->TIMSK.ALL_BITS |= 1<<1;
    157c:	a2 e5       	ldi	r26, 0x52	; 82
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e2 e5       	ldi	r30, 0x52	; 82
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	87 81       	ldd	r24, Z+7	; 0x07
    1586:	82 60       	ori	r24, 0x02	; 2
    1588:	17 96       	adiw	r26, 0x07	; 7
    158a:	8c 93       	st	X, r24
    158c:	17 97       	sbiw	r26, 0x07	; 7

}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <DisableInt>:
void DisableInt(Timer0_Mode mode)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	89 83       	std	Y+1, r24	; 0x01
	if(mode == Normal)
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	88 23       	and	r24, r24
    15a6:	51 f4       	brne	.+20     	; 0x15bc <DisableInt+0x26>
		TIMER0_R_BASE->TIMSK.ALL_BITS &= ~(1<<0);
    15a8:	a2 e5       	ldi	r26, 0x52	; 82
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e2 e5       	ldi	r30, 0x52	; 82
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	87 81       	ldd	r24, Z+7	; 0x07
    15b2:	8e 7f       	andi	r24, 0xFE	; 254
    15b4:	17 96       	adiw	r26, 0x07	; 7
    15b6:	8c 93       	st	X, r24
    15b8:	17 97       	sbiw	r26, 0x07	; 7
    15ba:	0c c0       	rjmp	.+24     	; 0x15d4 <DisableInt+0x3e>

	else if(mode == T0_CTC)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	49 f4       	brne	.+18     	; 0x15d4 <DisableInt+0x3e>
		TIMER0_R_BASE->TIMSK.ALL_BITS &= ~(1<<1);
    15c2:	a2 e5       	ldi	r26, 0x52	; 82
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e2 e5       	ldi	r30, 0x52	; 82
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	87 81       	ldd	r24, Z+7	; 0x07
    15cc:	8d 7f       	andi	r24, 0xFD	; 253
    15ce:	17 96       	adiw	r26, 0x07	; 7
    15d0:	8c 93       	st	X, r24
    15d2:	17 97       	sbiw	r26, 0x07	; 7
}
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <setCallBack>:
void setCallBack(void (*ptr_to_callback)(void), modes_IDs mode_id)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <setCallBack+0x6>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6b 83       	std	Y+3, r22	; 0x03
	Timer0_callback_fns[mode_id] = ptr_to_callback;
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	fc 01       	movw	r30, r24
    15fa:	ea 57       	subi	r30, 0x7A	; 122
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <setFastPWM>:

void setFastPWM(s32 duty)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <setFastPWM+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <setFastPWM+0x8>
    161a:	00 d0       	rcall	.+0      	; 0x161c <setFastPWM+0xa>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	69 83       	std	Y+1, r22	; 0x01
    1622:	7a 83       	std	Y+2, r23	; 0x02
    1624:	8b 83       	std	Y+3, r24	; 0x03
    1626:	9c 83       	std	Y+4, r25	; 0x04
	if(TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4) == NON_INVERTING)
    1628:	e2 e5       	ldi	r30, 0x52	; 82
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	81 81       	ldd	r24, Z+1	; 0x01
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = duty * MAX_OCR0;
	}
	else if(TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4) == INVERTING)
    162e:	e2 e5       	ldi	r30, 0x52	; 82
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	81 81       	ldd	r24, Z+1	; 0x01
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = MAX_OCR0-(duty * MAX_OCR0);
	}
}
    1634:	26 96       	adiw	r28, 0x06	; 6
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <setphaseCorrectPWM>:
void setphaseCorrectPWM(s32 duty)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <setphaseCorrectPWM+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <setphaseCorrectPWM+0x8>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <setphaseCorrectPWM+0xa>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	69 83       	std	Y+1, r22	; 0x01
    1656:	7a 83       	std	Y+2, r23	; 0x02
    1658:	8b 83       	std	Y+3, r24	; 0x03
    165a:	9c 83       	std	Y+4, r25	; 0x04
	if(TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4) == NON_INVERTING)
    165c:	e2 e5       	ldi	r30, 0x52	; 82
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	81 81       	ldd	r24, Z+1	; 0x01
		{
			TIMER0_R_BASE ->OCR0.ALL_BITS = duty * MAX_OCR0;
		}
		else if(TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4) == INVERTING)
    1662:	e2 e5       	ldi	r30, 0x52	; 82
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	81 81       	ldd	r24, Z+1	; 0x01
		{
			TIMER0_R_BASE ->OCR0.ALL_BITS = MAX_OCR0-(duty * MAX_OCR0);
		}
}
    1668:	26 96       	adiw	r28, 0x06	; 6
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	ovf_count++; //for get_count fn
    16a4:	80 91 84 00 	lds	r24, 0x0084
    16a8:	8f 5f       	subi	r24, 0xFF	; 255
    16aa:	80 93 84 00 	sts	0x0084, r24

	if(Timer0_callback_fns[Normal_ID] != NULL)
    16ae:	80 91 86 00 	lds	r24, 0x0086
    16b2:	90 91 87 00 	lds	r25, 0x0087
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	29 f0       	breq	.+10     	; 0x16c4 <__vector_11+0x4a>
		Timer0_callback_fns[Normal_ID]();
    16ba:	e0 91 86 00 	lds	r30, 0x0086
    16be:	f0 91 87 00 	lds	r31, 0x0087
    16c2:	09 95       	icall

}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__vector_10>:

ISR(TIMER0_OC_vect)
{
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callback_fns[CTC_ID] != NULL)
    1714:	80 91 88 00 	lds	r24, 0x0088
    1718:	90 91 89 00 	lds	r25, 0x0089
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	29 f0       	breq	.+10     	; 0x172a <__vector_10+0x40>
		Timer0_callback_fns[CTC_ID]();
    1720:	e0 91 88 00 	lds	r30, 0x0088
    1724:	f0 91 89 00 	lds	r31, 0x0089
    1728:	09 95       	icall


}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	0f 90       	pop	r0
    174c:	1f 90       	pop	r1
    174e:	18 95       	reti

00001750 <main>:
#include"Timer0.h"
#include"smallOS.h"


int main()
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	28 97       	sbiw	r28, 0x08	; 8
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
	/*CONFIGURE RED LED PIN AS OUTPUT*/
	DIO_voidSetPinDirection(PERIPHRAL_B, 0, OUTPUT);
    1764:	86 e3       	ldi	r24, 0x36	; 54
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 52 06 	call	0xca4	; 0xca4 <DIO_voidSetPinDirection>

	/*CONFIGURE BLUE LED PIN AS OUTPUT*/
	DIO_voidSetPinDirection(PERIPHRAL_C, 0, OUTPUT);
    1770:	83 e3       	ldi	r24, 0x33	; 51
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 52 06 	call	0xca4	; 0xca4 <DIO_voidSetPinDirection>

	/*CONFIGURE GREEN LED PIN AS OUTPUT*/
	DIO_voidSetPinDirection(PERIPHRAL_D, 0, OUTPUT);
    177c:	80 e3       	ldi	r24, 0x30	; 48
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 52 06 	call	0xca4	; 0xca4 <DIO_voidSetPinDirection>

   /*configure push button as input*/
	DIO_voidSetPinDirection(PERIPHRAL_C, 7, INPUT);
    1788:	83 e3       	ldi	r24, 0x33	; 51
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	67 e0       	ldi	r22, 0x07	; 7
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 52 06 	call	0xca4	; 0xca4 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PERIPHRAL_B, 0, LOGIC_LOW);
    1794:	86 e3       	ldi	r24, 0x36	; 54
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PERIPHRAL_C, 0, LOGIC_LOW);
    17a0:	83 e3       	ldi	r24, 0x33	; 51
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PERIPHRAL_D, 0, LOGIC_LOW);
    17ac:	80 e3       	ldi	r24, 0x30	; 48
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>

	/*internal pullup*/
	//DIO_voidSetPinValue(PERIPHRAL_C, 7, LOGIC_HIGH);

	Timer0_cfg cfg = {Normal, PRE1024, OC0_DISCON};
    17b8:	ce 01       	movw	r24, r28
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	9d 83       	std	Y+5, r25	; 0x05
    17be:	8c 83       	std	Y+4, r24	; 0x04
    17c0:	ea e7       	ldi	r30, 0x7A	; 122
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	ff 83       	std	Y+7, r31	; 0x07
    17c6:	ee 83       	std	Y+6, r30	; 0x06
    17c8:	f3 e0       	ldi	r31, 0x03	; 3
    17ca:	f8 87       	std	Y+8, r31	; 0x08
    17cc:	ee 81       	ldd	r30, Y+6	; 0x06
    17ce:	ff 81       	ldd	r31, Y+7	; 0x07
    17d0:	00 80       	ld	r0, Z
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	9f 83       	std	Y+7, r25	; 0x07
    17da:	8e 83       	std	Y+6, r24	; 0x06
    17dc:	ec 81       	ldd	r30, Y+4	; 0x04
    17de:	fd 81       	ldd	r31, Y+5	; 0x05
    17e0:	00 82       	st	Z, r0
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	9d 83       	std	Y+5, r25	; 0x05
    17ea:	8c 83       	std	Y+4, r24	; 0x04
    17ec:	98 85       	ldd	r25, Y+8	; 0x08
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	98 87       	std	Y+8, r25	; 0x08
    17f2:	e8 85       	ldd	r30, Y+8	; 0x08
    17f4:	ee 23       	and	r30, r30
    17f6:	51 f7       	brne	.-44     	; 0x17cc <main+0x7c>
	Timer0_Init(&cfg);
    17f8:	ce 01       	movw	r24, r28
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	0e 94 2e 09 	call	0x125c	; 0x125c <Timer0_Init>
	setCallBack(sechulder,Normal_ID);
    1800:	85 e5       	ldi	r24, 0x55	; 85
    1802:	9e e0       	ldi	r25, 0x0E	; 14
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <setCallBack>
	EnableInt(Normal);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <EnableInt>
	GIE_enableGlobalInterrupt();
    1810:	0e 94 42 06 	call	0xc84	; 0xc84 <GIE_enableGlobalInterrupt>
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <main+0xc4>

00001816 <toggleBlueLed>:
#include"MCU_HW.h"
#include"PUSH_BUTTON.h"
#include"util/delay.h"
#include"GPIO.h"
void toggleBlueLed(GPIO_REGISTERS* ledPort, u8 ledPin)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <toggleBlueLed+0x6>
    181c:	0f 92       	push	r0
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6b 83       	std	Y+3, r22	; 0x03
	ledPort->PORT_R.ALL_BITS ^= 1<<ledPin;
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	48 2f       	mov	r20, r24
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <toggleBlueLed+0x2c>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <toggleBlueLed+0x28>
    1846:	84 27       	eor	r24, r20
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	82 83       	std	Z+2, r24	; 0x02
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <task1>:


void task1()
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	6c 97       	sbiw	r28, 0x1c	; 28
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61

	/*blink red led*/
	//blinkLed(PERIPHRAL_B, 0);
	DIO_voidSetPinValue(PERIPHRAL_B, 0, 1);
    186e:	86 e3       	ldi	r24, 0x36	; 54
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a8 e4       	ldi	r26, 0x48	; 72
    1880:	b3 e4       	ldi	r27, 0x43	; 67
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	9a 8f       	std	Y+26, r25	; 0x1a
    1886:	ab 8f       	std	Y+27, r26	; 0x1b
    1888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <task1+0x72>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <task1+0xf0>
	else if (__tmp > 65535)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <task1+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	69 8d       	ldd	r22, Y+25	; 0x19
    18e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	0f c0       	rjmp	.+30     	; 0x192c <task1+0xd2>
    190e:	89 e1       	ldi	r24, 0x19	; 25
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <task1+0xc0>
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <task1+0xb4>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <task1+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	98 89       	ldd	r25, Y+16	; 0x10
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <task1+0xfc>
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	DIO_voidSetPinValue(PERIPHRAL_B, 0, 0);
    195e:	86 e3       	ldi	r24, 0x36	; 54
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a8 e4       	ldi	r26, 0x48	; 72
    1970:	b3 e4       	ldi	r27, 0x43	; 67
    1972:	8b 87       	std	Y+11, r24	; 0x0b
    1974:	9c 87       	std	Y+12, r25	; 0x0c
    1976:	ad 87       	std	Y+13, r26	; 0x0d
    1978:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	6b 85       	ldd	r22, Y+11	; 0x0b
    197c:	7c 85       	ldd	r23, Y+12	; 0x0c
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	53 e4       	ldi	r21, 0x43	; 67
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8f 83       	std	Y+7, r24	; 0x07
    1994:	98 87       	std	Y+8, r25	; 0x08
    1996:	a9 87       	std	Y+9, r26	; 0x09
    1998:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <task1+0x162>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <task1+0x1e0>
	else if (__tmp > 65535)
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <task1+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19da:	9e 85       	ldd	r25, Y+14	; 0x0e
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <task1+0x1c2>
    19fe:	89 e1       	ldi	r24, 0x19	; 25
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <task1+0x1b0>
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <task1+0x1a4>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <task1+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <task1+0x1ec>
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1a4e:	6c 96       	adiw	r28, 0x1c	; 28
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <task2>:

void task2()
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
	/*toggle blue led*/
	if(DIO_voidGetPinValue(PERIPHRAL_C, 7) == PRESSED)
    1a68:	83 e3       	ldi	r24, 0x33	; 51
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	67 e0       	ldi	r22, 0x07	; 7
    1a6e:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidGetPinValue>
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	a1 f4       	brne	.+40     	; 0x1a9e <task2+0x3e>
	{
		//	PERIPHRAL_C->PORT_R.bits.bit0 = 1;
		//	PERIPHRAL_C->PORT_R.
		/*toggle blue led*/
		PERIPHRAL_C->PORT_R.bits.bit0 ^= 1;
    1a76:	a3 e3       	ldi	r26, 0x33	; 51
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e3 e3       	ldi	r30, 0x33	; 51
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	81 70       	andi	r24, 0x01	; 1
    1a82:	98 2f       	mov	r25, r24
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 27       	eor	r24, r25
    1a88:	81 70       	andi	r24, 0x01	; 1
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	91 70       	andi	r25, 0x01	; 1
    1a8e:	12 96       	adiw	r26, 0x02	; 2
    1a90:	8c 91       	ld	r24, X
    1a92:	12 97       	sbiw	r26, 0x02	; 2
    1a94:	8e 7f       	andi	r24, 0xFE	; 254
    1a96:	89 2b       	or	r24, r25
    1a98:	12 96       	adiw	r26, 0x02	; 2
    1a9a:	8c 93       	st	X, r24
    1a9c:	12 97       	sbiw	r26, 0x02	; 2
		/*if(PERIPHRAL_C->PORT_R.bits.bit0 == 1)
			PERIPHRAL_C->PORT_R.bits.bit0 = 0;
		else if(PERIPHRAL_C->PORT_R.bits.bit0 == 0)
			PERIPHRAL_C->PORT_R.bits.bit0=1;*/
	}
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <task3>:


void task3()
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	6c 97       	sbiw	r28, 0x1c	; 28
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
	/*blink green led*/
	DIO_voidSetPinValue(PERIPHRAL_D, 0, 1);
    1ab8:	80 e3       	ldi	r24, 0x30	; 48
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a8 e4       	ldi	r26, 0x48	; 72
    1aca:	b3 e4       	ldi	r27, 0x43	; 67
    1acc:	89 8f       	std	Y+25, r24	; 0x19
    1ace:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a e7       	ldi	r20, 0x7A	; 122
    1ae2:	53 e4       	ldi	r21, 0x43	; 67
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8d 8b       	std	Y+21, r24	; 0x15
    1aee:	9e 8b       	std	Y+22, r25	; 0x16
    1af0:	af 8b       	std	Y+23, r26	; 0x17
    1af2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1af4:	6d 89       	ldd	r22, Y+21	; 0x15
    1af6:	7e 89       	ldd	r23, Y+22	; 0x16
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	98 8d       	ldd	r25, Y+24	; 0x18
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <task3+0x72>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c 8b       	std	Y+20, r25	; 0x14
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <task3+0xf0>
	else if (__tmp > 65535)
    1b16:	6d 89       	ldd	r22, Y+21	; 0x15
    1b18:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <task3+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	8b 8b       	std	Y+19, r24	; 0x13
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <task3+0xd2>
    1b58:	89 e1       	ldi	r24, 0x19	; 25
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9a 8b       	std	Y+18, r25	; 0x12
    1b5e:	89 8b       	std	Y+17, r24	; 0x11
    1b60:	89 89       	ldd	r24, Y+17	; 0x11
    1b62:	9a 89       	ldd	r25, Y+18	; 0x12
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <task3+0xc0>
    1b68:	9a 8b       	std	Y+18, r25	; 0x12
    1b6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8b 89       	ldd	r24, Y+19	; 0x13
    1b78:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <task3+0xb4>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <task3+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6d 89       	ldd	r22, Y+21	; 0x15
    1b82:	7e 89       	ldd	r23, Y+22	; 0x16
    1b84:	8f 89       	ldd	r24, Y+23	; 0x17
    1b86:	98 8d       	ldd	r25, Y+24	; 0x18
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	98 8b       	std	Y+16, r25	; 0x10
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f
    1b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9e:	98 89       	ldd	r25, Y+16	; 0x10
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <task3+0xfc>
    1ba4:	98 8b       	std	Y+16, r25	; 0x10
    1ba6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	DIO_voidSetPinValue(PERIPHRAL_D, 0, 0);
    1ba8:	80 e3       	ldi	r24, 0x30	; 48
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_voidSetPinValue>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a8 e4       	ldi	r26, 0x48	; 72
    1bba:	b3 e4       	ldi	r27, 0x43	; 67
    1bbc:	8b 87       	std	Y+11, r24	; 0x0b
    1bbe:	9c 87       	std	Y+12, r25	; 0x0c
    1bc0:	ad 87       	std	Y+13, r26	; 0x0d
    1bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8f 83       	std	Y+7, r24	; 0x07
    1bde:	98 87       	std	Y+8, r25	; 0x08
    1be0:	a9 87       	std	Y+9, r26	; 0x09
    1be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <task3+0x162>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <task3+0x1e0>
	else if (__tmp > 65535)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <task3+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <task3+0x1c2>
    1c48:	89 e1       	ldi	r24, 0x19	; 25
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <task3+0x1b0>
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <task3+0x1a4>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <task3+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <task3+0x1ec>
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    1c98:	6c 96       	adiw	r28, 0x1c	; 28
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <sechulder>:


static task_t tasks[3]={{60,task1},{30,task2},{180,task3}};

void sechulder(void)
{
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <sechulder+0xe>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	static volatile  u32 c=0;
	c++;
    1cbc:	80 91 90 00 	lds	r24, 0x0090
    1cc0:	90 91 91 00 	lds	r25, 0x0091
    1cc4:	a0 91 92 00 	lds	r26, 0x0092
    1cc8:	b0 91 93 00 	lds	r27, 0x0093
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	a1 1d       	adc	r26, r1
    1cd0:	b1 1d       	adc	r27, r1
    1cd2:	80 93 90 00 	sts	0x0090, r24
    1cd6:	90 93 91 00 	sts	0x0091, r25
    1cda:	a0 93 92 00 	sts	0x0092, r26
    1cde:	b0 93 93 00 	sts	0x0093, r27
	for (int i=0;i<3;i++)
    1ce2:	1a 82       	std	Y+2, r1	; 0x02
    1ce4:	19 82       	std	Y+1, r1	; 0x01
    1ce6:	37 c0       	rjmp	.+110    	; 0x1d56 <sechulder+0xac>
	{
		if (c%tasks[i].periodicity==0)
    1ce8:	e0 90 90 00 	lds	r14, 0x0090
    1cec:	f0 90 91 00 	lds	r15, 0x0091
    1cf0:	00 91 92 00 	lds	r16, 0x0092
    1cf4:	10 91 93 00 	lds	r17, 0x0093
    1cf8:	29 81       	ldd	r18, Y+1	; 0x01
    1cfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1cfc:	c9 01       	movw	r24, r18
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	82 0f       	add	r24, r18
    1d04:	93 1f       	adc	r25, r19
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e8 59       	subi	r30, 0x98	; 152
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	20 81       	ld	r18, Z
    1d12:	31 81       	ldd	r19, Z+1	; 0x01
    1d14:	42 81       	ldd	r20, Z+2	; 0x02
    1d16:	53 81       	ldd	r21, Z+3	; 0x03
    1d18:	c8 01       	movw	r24, r16
    1d1a:	b7 01       	movw	r22, r14
    1d1c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__udivmodsi4>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	a1 05       	cpc	r26, r1
    1d28:	b1 05       	cpc	r27, r1
    1d2a:	81 f4       	brne	.+32     	; 0x1d4c <sechulder+0xa2>
		{
			tasks[i].pfun();
    1d2c:	29 81       	ldd	r18, Y+1	; 0x01
    1d2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d30:	c9 01       	movw	r24, r18
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	82 0f       	add	r24, r18
    1d38:	93 1f       	adc	r25, r19
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e4 59       	subi	r30, 0x94	; 148
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	01 90       	ld	r0, Z+
    1d46:	f0 81       	ld	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	09 95       	icall

void sechulder(void)
{
	static volatile  u32 c=0;
	c++;
	for (int i=0;i<3;i++)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	83 30       	cpi	r24, 0x03	; 3
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	24 f2       	brlt	.-120    	; 0x1ce8 <sechulder+0x3e>
			tasks[i].pfun();
		}
	}
	//DIO_voidSetPinValue(PERIPHRAL_B, 0, 1);

	if (c== 180) c=0;
    1d60:	80 91 90 00 	lds	r24, 0x0090
    1d64:	90 91 91 00 	lds	r25, 0x0091
    1d68:	a0 91 92 00 	lds	r26, 0x0092
    1d6c:	b0 91 93 00 	lds	r27, 0x0093
    1d70:	84 3b       	cpi	r24, 0xB4	; 180
    1d72:	91 05       	cpc	r25, r1
    1d74:	a1 05       	cpc	r26, r1
    1d76:	b1 05       	cpc	r27, r1
    1d78:	41 f4       	brne	.+16     	; 0x1d8a <sechulder+0xe0>
    1d7a:	10 92 90 00 	sts	0x0090, r1
    1d7e:	10 92 91 00 	sts	0x0091, r1
    1d82:	10 92 92 00 	sts	0x0092, r1
    1d86:	10 92 93 00 	sts	0x0093, r1
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	08 95       	ret

00001d9c <__mulsi3>:
    1d9c:	62 9f       	mul	r22, r18
    1d9e:	d0 01       	movw	r26, r0
    1da0:	73 9f       	mul	r23, r19
    1da2:	f0 01       	movw	r30, r0
    1da4:	82 9f       	mul	r24, r18
    1da6:	e0 0d       	add	r30, r0
    1da8:	f1 1d       	adc	r31, r1
    1daa:	64 9f       	mul	r22, r20
    1dac:	e0 0d       	add	r30, r0
    1dae:	f1 1d       	adc	r31, r1
    1db0:	92 9f       	mul	r25, r18
    1db2:	f0 0d       	add	r31, r0
    1db4:	83 9f       	mul	r24, r19
    1db6:	f0 0d       	add	r31, r0
    1db8:	74 9f       	mul	r23, r20
    1dba:	f0 0d       	add	r31, r0
    1dbc:	65 9f       	mul	r22, r21
    1dbe:	f0 0d       	add	r31, r0
    1dc0:	99 27       	eor	r25, r25
    1dc2:	72 9f       	mul	r23, r18
    1dc4:	b0 0d       	add	r27, r0
    1dc6:	e1 1d       	adc	r30, r1
    1dc8:	f9 1f       	adc	r31, r25
    1dca:	63 9f       	mul	r22, r19
    1dcc:	b0 0d       	add	r27, r0
    1dce:	e1 1d       	adc	r30, r1
    1dd0:	f9 1f       	adc	r31, r25
    1dd2:	bd 01       	movw	r22, r26
    1dd4:	cf 01       	movw	r24, r30
    1dd6:	11 24       	eor	r1, r1
    1dd8:	08 95       	ret

00001dda <__udivmodsi4>:
    1dda:	a1 e2       	ldi	r26, 0x21	; 33
    1ddc:	1a 2e       	mov	r1, r26
    1dde:	aa 1b       	sub	r26, r26
    1de0:	bb 1b       	sub	r27, r27
    1de2:	fd 01       	movw	r30, r26
    1de4:	0d c0       	rjmp	.+26     	; 0x1e00 <__udivmodsi4_ep>

00001de6 <__udivmodsi4_loop>:
    1de6:	aa 1f       	adc	r26, r26
    1de8:	bb 1f       	adc	r27, r27
    1dea:	ee 1f       	adc	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	a2 17       	cp	r26, r18
    1df0:	b3 07       	cpc	r27, r19
    1df2:	e4 07       	cpc	r30, r20
    1df4:	f5 07       	cpc	r31, r21
    1df6:	20 f0       	brcs	.+8      	; 0x1e00 <__udivmodsi4_ep>
    1df8:	a2 1b       	sub	r26, r18
    1dfa:	b3 0b       	sbc	r27, r19
    1dfc:	e4 0b       	sbc	r30, r20
    1dfe:	f5 0b       	sbc	r31, r21

00001e00 <__udivmodsi4_ep>:
    1e00:	66 1f       	adc	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	1a 94       	dec	r1
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <__udivmodsi4_loop>
    1e0c:	60 95       	com	r22
    1e0e:	70 95       	com	r23
    1e10:	80 95       	com	r24
    1e12:	90 95       	com	r25
    1e14:	9b 01       	movw	r18, r22
    1e16:	ac 01       	movw	r20, r24
    1e18:	bd 01       	movw	r22, r26
    1e1a:	cf 01       	movw	r24, r30
    1e1c:	08 95       	ret

00001e1e <__prologue_saves__>:
    1e1e:	2f 92       	push	r2
    1e20:	3f 92       	push	r3
    1e22:	4f 92       	push	r4
    1e24:	5f 92       	push	r5
    1e26:	6f 92       	push	r6
    1e28:	7f 92       	push	r7
    1e2a:	8f 92       	push	r8
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	ca 1b       	sub	r28, r26
    1e48:	db 0b       	sbc	r29, r27
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	09 94       	ijmp

00001e56 <__epilogue_restores__>:
    1e56:	2a 88       	ldd	r2, Y+18	; 0x12
    1e58:	39 88       	ldd	r3, Y+17	; 0x11
    1e5a:	48 88       	ldd	r4, Y+16	; 0x10
    1e5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e68:	b9 84       	ldd	r11, Y+9	; 0x09
    1e6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e6c:	df 80       	ldd	r13, Y+7	; 0x07
    1e6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e70:	fd 80       	ldd	r15, Y+5	; 0x05
    1e72:	0c 81       	ldd	r16, Y+4	; 0x04
    1e74:	1b 81       	ldd	r17, Y+3	; 0x03
    1e76:	aa 81       	ldd	r26, Y+2	; 0x02
    1e78:	b9 81       	ldd	r27, Y+1	; 0x01
    1e7a:	ce 0f       	add	r28, r30
    1e7c:	d1 1d       	adc	r29, r1
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	ed 01       	movw	r28, r26
    1e8a:	08 95       	ret

00001e8c <_exit>:
    1e8c:	f8 94       	cli

00001e8e <__stop_program>:
    1e8e:	ff cf       	rjmp	.-2      	; 0x1e8e <__stop_program>
