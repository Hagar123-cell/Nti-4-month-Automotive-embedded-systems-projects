
AVR_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000044e4  00004578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800088  00800088  000045a0  2**0
                  ALLOC
  3 .stab         00003ee8  00000000  00000000  000045a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002670  00000000  00000000  00008488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000ac58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ade7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000df2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000eeb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fb80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__vector_6>
      1c:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__vector_7>
      20:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__vector_8>
      24:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__vector_9>
      28:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__vector_10>
      2c:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 21 	call	0x430c	; 0x430c <main>
      8a:	0c 94 70 22 	jmp	0x44e0	; 0x44e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 22 	jmp	0x448a	; 0x448a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 22 	jmp	0x448a	; 0x448a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 45 22 	jmp	0x448a	; 0x448a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 45 22 	jmp	0x448a	; 0x448a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 45 22 	jmp	0x448a	; 0x448a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 61 22 	jmp	0x44c2	; 0x44c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 49 22 	jmp	0x4492	; 0x4492 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXTI_enableInterrupt>:

#include "EXTI.h"
void(*ptr_to_callback_fns[3])(void) = {NULL, NULL, NULL};

void EXTI_enableInterrupt(INT_ID INT, triggerType trig)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EXTI_enableInterrupt+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EXTI_enableInterrupt+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
	/*enable interrupt*/
	EXTI_R ->GICR.ALL_BITS |= (1<<INT);
     cae:	a4 e5       	ldi	r26, 0x54	; 84
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e4 e5       	ldi	r30, 0x54	; 84
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	87 81       	ldd	r24, Z+7	; 0x07
     cb8:	48 2f       	mov	r20, r24
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <EXTI_enableInterrupt+0x2c>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	2a 95       	dec	r18
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <EXTI_enableInterrupt+0x28>
     cce:	84 2b       	or	r24, r20
     cd0:	17 96       	adiw	r26, 0x07	; 7
     cd2:	8c 93       	st	X, r24
     cd4:	17 97       	sbiw	r26, 0x07	; 7

	switch(INT)
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3c 83       	std	Y+4, r19	; 0x04
     cde:	2b 83       	std	Y+3, r18	; 0x03
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	86 30       	cpi	r24, 0x06	; 6
     ce6:	91 05       	cpc	r25, r1
     ce8:	59 f0       	breq	.+22     	; 0xd00 <EXTI_enableInterrupt+0x62>
     cea:	2b 81       	ldd	r18, Y+3	; 0x03
     cec:	3c 81       	ldd	r19, Y+4	; 0x04
     cee:	27 30       	cpi	r18, 0x07	; 7
     cf0:	31 05       	cpc	r19, r1
     cf2:	89 f0       	breq	.+34     	; 0xd16 <EXTI_enableInterrupt+0x78>
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	91 05       	cpc	r25, r1
     cfc:	f1 f0       	breq	.+60     	; 0xd3a <EXTI_enableInterrupt+0x9c>
     cfe:	2b c0       	rjmp	.+86     	; 0xd56 <EXTI_enableInterrupt+0xb8>
	{
	case INT0:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig;
     d00:	a4 e5       	ldi	r26, 0x54	; 84
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e4 e5       	ldi	r30, 0x54	; 84
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	89 2b       	or	r24, r25
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	11 97       	sbiw	r26, 0x01	; 1
     d14:	20 c0       	rjmp	.+64     	; 0xd56 <EXTI_enableInterrupt+0xb8>
		break;
	case INT1:
		/*choose triggering type*/
		EXTI_R ->MCUCR.ALL_BITS |= trig<<2;
     d16:	a4 e5       	ldi	r26, 0x54	; 84
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e4 e5       	ldi	r30, 0x54	; 84
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	28 2f       	mov	r18, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	82 2b       	or	r24, r18
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	8c 93       	st	X, r24
     d36:	11 97       	sbiw	r26, 0x01	; 1
     d38:	0e c0       	rjmp	.+28     	; 0xd56 <EXTI_enableInterrupt+0xb8>
		break;
	case INT2:
		/*choose triggering type*/
		EXTI_R ->MCUCSR.bits.bit6 = trig; /***************/
     d3a:	e4 e5       	ldi	r30, 0x54	; 84
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	81 70       	andi	r24, 0x01	; 1
     d44:	98 2f       	mov	r25, r24
     d46:	92 95       	swap	r25
     d48:	99 0f       	add	r25, r25
     d4a:	99 0f       	add	r25, r25
     d4c:	90 7c       	andi	r25, 0xC0	; 192
     d4e:	80 81       	ld	r24, Z
     d50:	8f 7b       	andi	r24, 0xBF	; 191
     d52:	89 2b       	or	r24, r25
     d54:	80 83       	st	Z, r24
		break;
	}


}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <EXTI_disableInterrupt>:

void EXTI_disableInterrupt(INT_ID INT)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	89 83       	std	Y+1, r24	; 0x01
	EXTI_R ->GICR.ALL_BITS &= ~(1<<INT);
     d70:	a4 e5       	ldi	r26, 0x54	; 84
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e4 e5       	ldi	r30, 0x54	; 84
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	87 81       	ldd	r24, Z+7	; 0x07
     d7a:	48 2f       	mov	r20, r24
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <EXTI_disableInterrupt+0x2a>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <EXTI_disableInterrupt+0x26>
     d92:	80 95       	com	r24
     d94:	84 23       	and	r24, r20
     d96:	17 96       	adiw	r26, 0x07	; 7
     d98:	8c 93       	st	X, r24
     d9a:	17 97       	sbiw	r26, 0x07	; 7
}
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <EXTI_setCallBack>:
void EXTI_setCallBack(void(*ptr_to_fn)(void), INT_ID INT)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <EXTI_setCallBack+0x6>
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	6b 83       	std	Y+3, r22	; 0x03
	ptr_to_callback_fns[INT-5] = ptr_to_fn;/*********************/
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	05 97       	sbiw	r24, 0x05	; 5
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	fc 01       	movw	r30, r24
     dc4:	e8 57       	subi	r30, 0x78	; 120
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <GIE_enableGlobalInterrupt>:
#include"GIE_R.h"
#include"GIE_priv.h"


void GIE_enableGlobalInterrupt()
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
     de4:	78 94       	sei
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <GIE_disableGlobalInterrupt>:
void GIE_disableGlobalInterrupt()
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     df4:	f8 94       	cli
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <DIO_voidSetPinDirection>:
 *  Created on: Oct 20, 2023
 *      Author: OMR
 */
#include"GPIO.h"
void DIO_voidSetPinDirection(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <DIO_voidSetPinDirection+0x6>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <DIO_voidSetPinDirection+0x8>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <DIO_voidSetPinDirection+0xa>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6b 83       	std	Y+3, r22	; 0x03
     e10:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3e 83       	std	Y+6, r19	; 0x06
     e1a:	2d 83       	std	Y+5, r18	; 0x05
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	9e 81       	ldd	r25, Y+6	; 0x06
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	91 05       	cpc	r25, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <DIO_voidSetPinDirection+0x2c>
     e26:	51 c0       	rjmp	.+162    	; 0xeca <DIO_voidSetPinDirection+0xce>
     e28:	2d 81       	ldd	r18, Y+5	; 0x05
     e2a:	3e 81       	ldd	r19, Y+6	; 0x06
     e2c:	24 30       	cpi	r18, 0x04	; 4
     e2e:	31 05       	cpc	r19, r1
     e30:	7c f4       	brge	.+30     	; 0xe50 <DIO_voidSetPinDirection+0x54>
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	91 05       	cpc	r25, r1
     e3a:	71 f1       	breq	.+92     	; 0xe98 <DIO_voidSetPinDirection+0x9c>
     e3c:	2d 81       	ldd	r18, Y+5	; 0x05
     e3e:	3e 81       	ldd	r19, Y+6	; 0x06
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	ac f5       	brge	.+106    	; 0xeb0 <DIO_voidSetPinDirection+0xb4>
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	d1 f0       	breq	.+52     	; 0xe82 <DIO_voidSetPinDirection+0x86>
     e4e:	81 c0       	rjmp	.+258    	; 0xf52 <DIO_voidSetPinDirection+0x156>
     e50:	2d 81       	ldd	r18, Y+5	; 0x05
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	25 30       	cpi	r18, 0x05	; 5
     e56:	31 05       	cpc	r19, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <DIO_voidSetPinDirection+0x60>
     e5a:	52 c0       	rjmp	.+164    	; 0xf00 <DIO_voidSetPinDirection+0x104>
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	85 30       	cpi	r24, 0x05	; 5
     e62:	91 05       	cpc	r25, r1
     e64:	0c f4       	brge	.+2      	; 0xe68 <DIO_voidSetPinDirection+0x6c>
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <DIO_voidSetPinDirection+0xea>
     e68:	2d 81       	ldd	r18, Y+5	; 0x05
     e6a:	3e 81       	ldd	r19, Y+6	; 0x06
     e6c:	26 30       	cpi	r18, 0x06	; 6
     e6e:	31 05       	cpc	r19, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <DIO_voidSetPinDirection+0x78>
     e72:	54 c0       	rjmp	.+168    	; 0xf1c <DIO_voidSetPinDirection+0x120>
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	87 30       	cpi	r24, 0x07	; 7
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <DIO_voidSetPinDirection+0x84>
     e7e:	5d c0       	rjmp	.+186    	; 0xf3a <DIO_voidSetPinDirection+0x13e>
     e80:	68 c0       	rjmp	.+208    	; 0xf52 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr ->direction.bits.bit0 = Copy_u8Direction;
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	81 70       	andi	r24, 0x01	; 1
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	98 2f       	mov	r25, r24
     e8c:	91 70       	andi	r25, 0x01	; 1
     e8e:	81 81       	ldd	r24, Z+1	; 0x01
     e90:	8e 7f       	andi	r24, 0xFE	; 254
     e92:	89 2b       	or	r24, r25
     e94:	81 83       	std	Z+1, r24	; 0x01
     e96:	5d c0       	rjmp	.+186    	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr ->direction.bits.bit1 = Copy_u8Direction;
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	81 70       	andi	r24, 0x01	; 1
     e9c:	e9 81       	ldd	r30, Y+1	; 0x01
     e9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ea0:	81 70       	andi	r24, 0x01	; 1
     ea2:	98 2f       	mov	r25, r24
     ea4:	99 0f       	add	r25, r25
     ea6:	81 81       	ldd	r24, Z+1	; 0x01
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	89 2b       	or	r24, r25
     eac:	81 83       	std	Z+1, r24	; 0x01
     eae:	51 c0       	rjmp	.+162    	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr ->direction.bits.bit2 = Copy_u8Direction;
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	81 70       	andi	r24, 0x01	; 1
     eba:	98 2f       	mov	r25, r24
     ebc:	99 0f       	add	r25, r25
     ebe:	99 0f       	add	r25, r25
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	89 2b       	or	r24, r25
     ec6:	81 83       	std	Z+1, r24	; 0x01
     ec8:	44 c0       	rjmp	.+136    	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr ->direction.bits.bit3 = Copy_u8Direction;
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	81 70       	andi	r24, 0x01	; 1
     ece:	e9 81       	ldd	r30, Y+1	; 0x01
     ed0:	fa 81       	ldd	r31, Y+2	; 0x02
     ed2:	81 70       	andi	r24, 0x01	; 1
     ed4:	98 2f       	mov	r25, r24
     ed6:	99 0f       	add	r25, r25
     ed8:	99 0f       	add	r25, r25
     eda:	99 0f       	add	r25, r25
     edc:	81 81       	ldd	r24, Z+1	; 0x01
     ede:	87 7f       	andi	r24, 0xF7	; 247
     ee0:	89 2b       	or	r24, r25
     ee2:	81 83       	std	Z+1, r24	; 0x01
     ee4:	36 c0       	rjmp	.+108    	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr ->direction.bits.bit4 = Copy_u8Direction;
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	81 70       	andi	r24, 0x01	; 1
     eea:	e9 81       	ldd	r30, Y+1	; 0x01
     eec:	fa 81       	ldd	r31, Y+2	; 0x02
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	98 2f       	mov	r25, r24
     ef2:	92 95       	swap	r25
     ef4:	90 7f       	andi	r25, 0xF0	; 240
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	89 2b       	or	r24, r25
     efc:	81 83       	std	Z+1, r24	; 0x01
     efe:	29 c0       	rjmp	.+82     	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr ->direction.bits.bit5 = Copy_u8Direction;
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	81 70       	andi	r24, 0x01	; 1
     f0a:	98 2f       	mov	r25, r24
     f0c:	92 95       	swap	r25
     f0e:	99 0f       	add	r25, r25
     f10:	90 7e       	andi	r25, 0xE0	; 224
     f12:	81 81       	ldd	r24, Z+1	; 0x01
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	89 2b       	or	r24, r25
     f18:	81 83       	std	Z+1, r24	; 0x01
     f1a:	1b c0       	rjmp	.+54     	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr ->direction.bits.bit6 = Copy_u8Direction;
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	81 70       	andi	r24, 0x01	; 1
     f26:	98 2f       	mov	r25, r24
     f28:	92 95       	swap	r25
     f2a:	99 0f       	add	r25, r25
     f2c:	99 0f       	add	r25, r25
     f2e:	90 7c       	andi	r25, 0xC0	; 192
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	8f 7b       	andi	r24, 0xBF	; 191
     f34:	89 2b       	or	r24, r25
     f36:	81 83       	std	Z+1, r24	; 0x01
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr ->direction.bits.bit7 = Copy_u8Direction;
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	e9 81       	ldd	r30, Y+1	; 0x01
     f40:	fa 81       	ldd	r31, Y+2	; 0x02
     f42:	98 2f       	mov	r25, r24
     f44:	97 95       	ror	r25
     f46:	99 27       	eor	r25, r25
     f48:	97 95       	ror	r25
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	8f 77       	andi	r24, 0x7F	; 127
     f4e:	89 2b       	or	r24, r25
     f50:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     f52:	26 96       	adiw	r28, 0x06	; 6
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId, u8 Copy_u8Value)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <DIO_voidSetPinValue+0x6>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <DIO_voidSetPinValue+0x8>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <DIO_voidSetPinValue+0xa>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	6b 83       	std	Y+3, r22	; 0x03
     f78:	4c 83       	std	Y+4, r20	; 0x04
	switch(Copy_u8PinId)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3e 83       	std	Y+6, r19	; 0x06
     f82:	2d 83       	std	Y+5, r18	; 0x05
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_voidSetPinValue+0x2c>
     f8e:	51 c0       	rjmp	.+162    	; 0x1032 <DIO_voidSetPinValue+0xce>
     f90:	2d 81       	ldd	r18, Y+5	; 0x05
     f92:	3e 81       	ldd	r19, Y+6	; 0x06
     f94:	24 30       	cpi	r18, 0x04	; 4
     f96:	31 05       	cpc	r19, r1
     f98:	7c f4       	brge	.+30     	; 0xfb8 <DIO_voidSetPinValue+0x54>
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	71 f1       	breq	.+92     	; 0x1000 <DIO_voidSetPinValue+0x9c>
     fa4:	2d 81       	ldd	r18, Y+5	; 0x05
     fa6:	3e 81       	ldd	r19, Y+6	; 0x06
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	ac f5       	brge	.+106    	; 0x1018 <DIO_voidSetPinValue+0xb4>
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	d1 f0       	breq	.+52     	; 0xfea <DIO_voidSetPinValue+0x86>
     fb6:	81 c0       	rjmp	.+258    	; 0x10ba <DIO_voidSetPinValue+0x156>
     fb8:	2d 81       	ldd	r18, Y+5	; 0x05
     fba:	3e 81       	ldd	r19, Y+6	; 0x06
     fbc:	25 30       	cpi	r18, 0x05	; 5
     fbe:	31 05       	cpc	r19, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <DIO_voidSetPinValue+0x60>
     fc2:	52 c0       	rjmp	.+164    	; 0x1068 <DIO_voidSetPinValue+0x104>
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	91 05       	cpc	r25, r1
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <DIO_voidSetPinValue+0x6c>
     fce:	3f c0       	rjmp	.+126    	; 0x104e <DIO_voidSetPinValue+0xea>
     fd0:	2d 81       	ldd	r18, Y+5	; 0x05
     fd2:	3e 81       	ldd	r19, Y+6	; 0x06
     fd4:	26 30       	cpi	r18, 0x06	; 6
     fd6:	31 05       	cpc	r19, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <DIO_voidSetPinValue+0x78>
     fda:	54 c0       	rjmp	.+168    	; 0x1084 <DIO_voidSetPinValue+0x120>
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	87 30       	cpi	r24, 0x07	; 7
     fe2:	91 05       	cpc	r25, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <DIO_voidSetPinValue+0x84>
     fe6:	5d c0       	rjmp	.+186    	; 0x10a2 <DIO_voidSetPinValue+0x13e>
     fe8:	68 c0       	rjmp	.+208    	; 0x10ba <DIO_voidSetPinValue+0x156>
		{
		case 0:
			ptr ->PORT_R.bits.bit0 = Copy_u8Value;
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	e9 81       	ldd	r30, Y+1	; 0x01
     ff0:	fa 81       	ldd	r31, Y+2	; 0x02
     ff2:	98 2f       	mov	r25, r24
     ff4:	91 70       	andi	r25, 0x01	; 1
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	8e 7f       	andi	r24, 0xFE	; 254
     ffa:	89 2b       	or	r24, r25
     ffc:	82 83       	std	Z+2, r24	; 0x02
     ffe:	5d c0       	rjmp	.+186    	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 1:
			ptr ->PORT_R.bits.bit1 = Copy_u8Value;
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	81 70       	andi	r24, 0x01	; 1
    1004:	e9 81       	ldd	r30, Y+1	; 0x01
    1006:	fa 81       	ldd	r31, Y+2	; 0x02
    1008:	81 70       	andi	r24, 0x01	; 1
    100a:	98 2f       	mov	r25, r24
    100c:	99 0f       	add	r25, r25
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	8d 7f       	andi	r24, 0xFD	; 253
    1012:	89 2b       	or	r24, r25
    1014:	82 83       	std	Z+2, r24	; 0x02
    1016:	51 c0       	rjmp	.+162    	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 2:
			ptr ->PORT_R.bits.bit2 = Copy_u8Value;
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	e9 81       	ldd	r30, Y+1	; 0x01
    101e:	fa 81       	ldd	r31, Y+2	; 0x02
    1020:	81 70       	andi	r24, 0x01	; 1
    1022:	98 2f       	mov	r25, r24
    1024:	99 0f       	add	r25, r25
    1026:	99 0f       	add	r25, r25
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	8b 7f       	andi	r24, 0xFB	; 251
    102c:	89 2b       	or	r24, r25
    102e:	82 83       	std	Z+2, r24	; 0x02
    1030:	44 c0       	rjmp	.+136    	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 3:
			ptr ->PORT_R.bits.bit3 = Copy_u8Value;
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	81 70       	andi	r24, 0x01	; 1
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	81 70       	andi	r24, 0x01	; 1
    103c:	98 2f       	mov	r25, r24
    103e:	99 0f       	add	r25, r25
    1040:	99 0f       	add	r25, r25
    1042:	99 0f       	add	r25, r25
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	87 7f       	andi	r24, 0xF7	; 247
    1048:	89 2b       	or	r24, r25
    104a:	82 83       	std	Z+2, r24	; 0x02
    104c:	36 c0       	rjmp	.+108    	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 4:
			ptr ->PORT_R.bits.bit4 = Copy_u8Value;
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	81 70       	andi	r24, 0x01	; 1
    1052:	e9 81       	ldd	r30, Y+1	; 0x01
    1054:	fa 81       	ldd	r31, Y+2	; 0x02
    1056:	81 70       	andi	r24, 0x01	; 1
    1058:	98 2f       	mov	r25, r24
    105a:	92 95       	swap	r25
    105c:	90 7f       	andi	r25, 0xF0	; 240
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	8f 7e       	andi	r24, 0xEF	; 239
    1062:	89 2b       	or	r24, r25
    1064:	82 83       	std	Z+2, r24	; 0x02
    1066:	29 c0       	rjmp	.+82     	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 5:
			ptr ->PORT_R.bits.bit5 = Copy_u8Value;
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	98 2f       	mov	r25, r24
    1074:	92 95       	swap	r25
    1076:	99 0f       	add	r25, r25
    1078:	90 7e       	andi	r25, 0xE0	; 224
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	89 2b       	or	r24, r25
    1080:	82 83       	std	Z+2, r24	; 0x02
    1082:	1b c0       	rjmp	.+54     	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 6:
			ptr ->PORT_R.bits.bit6 = Copy_u8Value;
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	81 70       	andi	r24, 0x01	; 1
    1088:	e9 81       	ldd	r30, Y+1	; 0x01
    108a:	fa 81       	ldd	r31, Y+2	; 0x02
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	98 2f       	mov	r25, r24
    1090:	92 95       	swap	r25
    1092:	99 0f       	add	r25, r25
    1094:	99 0f       	add	r25, r25
    1096:	90 7c       	andi	r25, 0xC0	; 192
    1098:	82 81       	ldd	r24, Z+2	; 0x02
    109a:	8f 7b       	andi	r24, 0xBF	; 191
    109c:	89 2b       	or	r24, r25
    109e:	82 83       	std	Z+2, r24	; 0x02
    10a0:	0c c0       	rjmp	.+24     	; 0x10ba <DIO_voidSetPinValue+0x156>
			break;
		case 7:
			ptr ->PORT_R.bits.bit7 = Copy_u8Value;
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	e9 81       	ldd	r30, Y+1	; 0x01
    10a8:	fa 81       	ldd	r31, Y+2	; 0x02
    10aa:	98 2f       	mov	r25, r24
    10ac:	97 95       	ror	r25
    10ae:	99 27       	eor	r25, r25
    10b0:	97 95       	ror	r25
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	8f 77       	andi	r24, 0x7F	; 127
    10b6:	89 2b       	or	r24, r25
    10b8:	82 83       	std	Z+2, r24	; 0x02
			break;
		}
}
    10ba:	26 96       	adiw	r28, 0x06	; 6
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(GPIO_REGISTERS* ptr, u8 Copy_u8PinId)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	27 97       	sbiw	r28, 0x07	; 7
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	9b 83       	std	Y+3, r25	; 0x03
    10e2:	8a 83       	std	Y+2, r24	; 0x02
    10e4:	6c 83       	std	Y+4, r22	; 0x04
	u8 pinValue;
	switch(Copy_u8PinId)
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3f 83       	std	Y+7, r19	; 0x07
    10ee:	2e 83       	std	Y+6, r18	; 0x06
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <DIO_voidGetPinValue+0x30>
    10fa:	3e c0       	rjmp	.+124    	; 0x1178 <DIO_voidGetPinValue+0xac>
    10fc:	2e 81       	ldd	r18, Y+6	; 0x06
    10fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1100:	24 30       	cpi	r18, 0x04	; 4
    1102:	31 05       	cpc	r19, r1
    1104:	7c f4       	brge	.+30     	; 0x1124 <DIO_voidGetPinValue+0x58>
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	9f 81       	ldd	r25, Y+7	; 0x07
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	29 f1       	breq	.+74     	; 0x115a <DIO_voidGetPinValue+0x8e>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	3c f5       	brge	.+78     	; 0x1168 <DIO_voidGetPinValue+0x9c>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	b1 f0       	breq	.+44     	; 0x114e <DIO_voidGetPinValue+0x82>
    1122:	55 c0       	rjmp	.+170    	; 0x11ce <DIO_voidGetPinValue+0x102>
    1124:	2e 81       	ldd	r18, Y+6	; 0x06
    1126:	3f 81       	ldd	r19, Y+7	; 0x07
    1128:	25 30       	cpi	r18, 0x05	; 5
    112a:	31 05       	cpc	r19, r1
    112c:	b1 f1       	breq	.+108    	; 0x119a <DIO_voidGetPinValue+0xce>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	85 30       	cpi	r24, 0x05	; 5
    1134:	91 05       	cpc	r25, r1
    1136:	4c f1       	brlt	.+82     	; 0x118a <DIO_voidGetPinValue+0xbe>
    1138:	2e 81       	ldd	r18, Y+6	; 0x06
    113a:	3f 81       	ldd	r19, Y+7	; 0x07
    113c:	26 30       	cpi	r18, 0x06	; 6
    113e:	31 05       	cpc	r19, r1
    1140:	a9 f1       	breq	.+106    	; 0x11ac <DIO_voidGetPinValue+0xe0>
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	9f 81       	ldd	r25, Y+7	; 0x07
    1146:	87 30       	cpi	r24, 0x07	; 7
    1148:	91 05       	cpc	r25, r1
    114a:	d1 f1       	breq	.+116    	; 0x11c0 <DIO_voidGetPinValue+0xf4>
    114c:	40 c0       	rjmp	.+128    	; 0x11ce <DIO_voidGetPinValue+0x102>
		{
	case 0:
				pinValue =  ptr ->PIN_R.bits.bit0 ;
    114e:	ea 81       	ldd	r30, Y+2	; 0x02
    1150:	fb 81       	ldd	r31, Y+3	; 0x03
    1152:	80 81       	ld	r24, Z
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	3a c0       	rjmp	.+116    	; 0x11ce <DIO_voidGetPinValue+0x102>
				break;
			case 1:
				pinValue =  ptr ->PIN_R.bits.bit1;
    115a:	ea 81       	ldd	r30, Y+2	; 0x02
    115c:	fb 81       	ldd	r31, Y+3	; 0x03
    115e:	80 81       	ld	r24, Z
    1160:	86 95       	lsr	r24
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	33 c0       	rjmp	.+102    	; 0x11ce <DIO_voidGetPinValue+0x102>
				break;
			case 2:
				return ptr ->PIN_R.bits.bit2;
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	80 81       	ld	r24, Z
    116e:	86 95       	lsr	r24
    1170:	86 95       	lsr	r24
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	8d 83       	std	Y+5, r24	; 0x05
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <DIO_voidGetPinValue+0x106>
				break;
			case 3:
				return ptr ->PIN_R.bits.bit3;
    1178:	ea 81       	ldd	r30, Y+2	; 0x02
    117a:	fb 81       	ldd	r31, Y+3	; 0x03
    117c:	80 81       	ld	r24, Z
    117e:	86 95       	lsr	r24
    1180:	86 95       	lsr	r24
    1182:	86 95       	lsr	r24
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	24 c0       	rjmp	.+72     	; 0x11d2 <DIO_voidGetPinValue+0x106>
				break;
			case 4:
				return ptr ->PIN_R.bits.bit4;
    118a:	ea 81       	ldd	r30, Y+2	; 0x02
    118c:	fb 81       	ldd	r31, Y+3	; 0x03
    118e:	80 81       	ld	r24, Z
    1190:	82 95       	swap	r24
    1192:	8f 70       	andi	r24, 0x0F	; 15
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	1c c0       	rjmp	.+56     	; 0x11d2 <DIO_voidGetPinValue+0x106>
				break;
			case 5:
				pinValue = ptr ->PIN_R.bits.bit5;
    119a:	ea 81       	ldd	r30, Y+2	; 0x02
    119c:	fb 81       	ldd	r31, Y+3	; 0x03
    119e:	80 81       	ld	r24, Z
    11a0:	82 95       	swap	r24
    11a2:	86 95       	lsr	r24
    11a4:	87 70       	andi	r24, 0x07	; 7
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	11 c0       	rjmp	.+34     	; 0x11ce <DIO_voidGetPinValue+0x102>
				break;
			case 6:
				pinValue = ptr ->PIN_R.bits.bit6;
    11ac:	ea 81       	ldd	r30, Y+2	; 0x02
    11ae:	fb 81       	ldd	r31, Y+3	; 0x03
    11b0:	80 81       	ld	r24, Z
    11b2:	82 95       	swap	r24
    11b4:	86 95       	lsr	r24
    11b6:	86 95       	lsr	r24
    11b8:	83 70       	andi	r24, 0x03	; 3
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <DIO_voidGetPinValue+0x102>
				break;
			case 7:
				pinValue = ptr ->PIN_R.bits.bit7;
    11c0:	ea 81       	ldd	r30, Y+2	; 0x02
    11c2:	fb 81       	ldd	r31, Y+3	; 0x03
    11c4:	80 81       	ld	r24, Z
    11c6:	88 1f       	adc	r24, r24
    11c8:	88 27       	eor	r24, r24
    11ca:	88 1f       	adc	r24, r24
    11cc:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		return pinValue;
    11ce:	99 81       	ldd	r25, Y+1	; 0x01
    11d0:	9d 83       	std	Y+5, r25	; 0x05
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11d4:	27 96       	adiw	r28, 0x07	; 7
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(GPIO_REGISTERS* ptr, u8 Copy_u8Direction)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <DIO_voidSetPortDirection+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->direction.ALL_BITS = Copy_u8Direction;
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	81 83       	std	Z+1, r24	; 0x01
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(GPIO_REGISTERS* ptr, u8 Copy_u8Value)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <DIO_voidSetPortValue+0x6>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	6b 83       	std	Y+3, r22	; 0x03
	ptr ->PORT_R.ALL_BITS = Copy_u8Value;
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	82 83       	std	Z+2, r24	; 0x02
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(GPIO_REGISTERS* ptr)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_voidGetPortValue+0x6>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
	return ptr -> PORT_R.ALL_BITS;
    1240:	e9 81       	ldd	r30, Y+1	; 0x01
    1242:	fa 81       	ldd	r31, Y+2	; 0x02
    1244:	82 81       	ldd	r24, Z+2	; 0x02
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <Keybad_init>:
#include<util/delay.h>



void Keybad_init()
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	/*configure rows(PC2 -> PC5) as output*/
	PERIPHRAL_C ->direction.ALL_BITS |= 0b00111100;
    1258:	a3 e3       	ldi	r26, 0x33	; 51
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e3 e3       	ldi	r30, 0x33	; 51
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	8c 63       	ori	r24, 0x3C	; 60
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	8c 93       	st	X, r24

	/*initialize all rows = 1*/
	PERIPHRAL_C ->PORT_R.ALL_BITS |= 0b00111100;
    1268:	a3 e3       	ldi	r26, 0x33	; 51
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e3 e3       	ldi	r30, 0x33	; 51
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	8c 63       	ori	r24, 0x3C	; 60
    1274:	12 96       	adiw	r26, 0x02	; 2
    1276:	8c 93       	st	X, r24

	/*configure cols(PD0->PD3) as input*/
	PERIPHRAL_D ->direction.ALL_BITS &= 0xF0;
    1278:	a0 e3       	ldi	r26, 0x30	; 48
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e0 e3       	ldi	r30, 0x30	; 48
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	81 81       	ldd	r24, Z+1	; 0x01
    1282:	80 7f       	andi	r24, 0xF0	; 240
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	8c 93       	st	X, r24
    1288:	11 97       	sbiw	r26, 0x01	; 1

}
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <Keybad_getValue>:
u8 Keybad_getValue()
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	a9 97       	sbiw	r28, 0x29	; 41
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	u8 rows[4] = {2, 3, 4, 5};
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	8a a3       	std	Y+34, r24	; 0x22
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	8b a3       	std	Y+35, r24	; 0x23
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	8c a3       	std	Y+36, r24	; 0x24
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	8d a3       	std	Y+37, r24	; 0x25
	u8 cols[4] = {0, 1, 2, 3};
    12b4:	1e a2       	std	Y+38, r1	; 0x26
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	8f a3       	std	Y+39, r24	; 0x27
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	88 a7       	std	Y+40, r24	; 0x28
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	89 a7       	std	Y+41, r24	; 0x29
	while(1)
	{
	/*loop on rows*/
		for(int r=0; r<4; r++)
    12c2:	18 a2       	std	Y+32, r1	; 0x20
    12c4:	1f 8e       	std	Y+31, r1	; 0x1f
    12c6:	5d c1       	rjmp	.+698    	; 0x1582 <Keybad_getValue+0x2f2>
		{
			//DIO_voidSetPinDirection(PERIPHRAL_C, i+2, 1);
			DIO_voidSetPinValue(PERIPHRAL_C, rows[r], 0);
    12c8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    12ca:	38 a1       	ldd	r19, Y+32	; 0x20
    12cc:	ce 01       	movw	r24, r28
    12ce:	82 96       	adiw	r24, 0x22	; 34
    12d0:	fc 01       	movw	r30, r24
    12d2:	e2 0f       	add	r30, r18
    12d4:	f3 1f       	adc	r31, r19
    12d6:	20 81       	ld	r18, Z
    12d8:	83 e3       	ldi	r24, 0x33	; 51
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	62 2f       	mov	r22, r18
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
			/*loop on cols*/
			for(int c=0; c<4; c++)
    12e4:	1e 8e       	std	Y+30, r1	; 0x1e
    12e6:	1d 8e       	std	Y+29, r1	; 0x1d
    12e8:	c1 c0       	rjmp	.+386    	; 0x146c <Keybad_getValue+0x1dc>
			{
				if(DIO_voidGetPinValue(PERIPHRAL_D, cols[c]) == 0)
    12ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    12ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    12ee:	ce 01       	movw	r24, r28
    12f0:	86 96       	adiw	r24, 0x26	; 38
    12f2:	fc 01       	movw	r30, r24
    12f4:	e2 0f       	add	r30, r18
    12f6:	f3 1f       	adc	r31, r19
    12f8:	20 81       	ld	r18, Z
    12fa:	80 e3       	ldi	r24, 0x30	; 48
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	62 2f       	mov	r22, r18
    1300:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO_voidGetPinValue>
    1304:	88 23       	and	r24, r24
    1306:	09 f0       	breq	.+2      	; 0x130a <Keybad_getValue+0x7a>
    1308:	ac c0       	rjmp	.+344    	; 0x1462 <Keybad_getValue+0x1d2>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 ef       	ldi	r26, 0xF0	; 240
    1310:	b1 e4       	ldi	r27, 0x41	; 65
    1312:	89 8f       	std	Y+25, r24	; 0x19
    1314:	9a 8f       	std	Y+26, r25	; 0x1a
    1316:	ab 8f       	std	Y+27, r26	; 0x1b
    1318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	69 8d       	ldd	r22, Y+25	; 0x19
    131c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    131e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a e7       	ldi	r20, 0x7A	; 122
    1328:	53 e4       	ldi	r21, 0x43	; 67
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8d 8b       	std	Y+21, r24	; 0x15
    1334:	9e 8b       	std	Y+22, r25	; 0x16
    1336:	af 8b       	std	Y+23, r26	; 0x17
    1338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    133a:	6d 89       	ldd	r22, Y+21	; 0x15
    133c:	7e 89       	ldd	r23, Y+22	; 0x16
    133e:	8f 89       	ldd	r24, Y+23	; 0x17
    1340:	98 8d       	ldd	r25, Y+24	; 0x18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <Keybad_getValue+0xcc>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 8b       	std	Y+20, r25	; 0x14
    1358:	8b 8b       	std	Y+19, r24	; 0x13
    135a:	3f c0       	rjmp	.+126    	; 0x13da <Keybad_getValue+0x14a>
	else if (__tmp > 65535)
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <Keybad_getValue+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	69 8d       	ldd	r22, Y+25	; 0x19
    1376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <Keybad_getValue+0x12c>
    139e:	89 e1       	ldi	r24, 0x19	; 25
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9a 8b       	std	Y+18, r25	; 0x12
    13a4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a6:	89 89       	ldd	r24, Y+17	; 0x11
    13a8:	9a 89       	ldd	r25, Y+18	; 0x12
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <Keybad_getValue+0x11a>
    13ae:	9a 8b       	std	Y+18, r25	; 0x12
    13b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	9c 89       	ldd	r25, Y+20	; 0x14
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9c 8b       	std	Y+20, r25	; 0x14
    13ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	8b 89       	ldd	r24, Y+19	; 0x13
    13be:	9c 89       	ldd	r25, Y+20	; 0x14
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <Keybad_getValue+0x10e>
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <Keybad_getValue+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	6d 89       	ldd	r22, Y+21	; 0x15
    13c8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ca:	8f 89       	ldd	r24, Y+23	; 0x17
    13cc:	98 8d       	ldd	r25, Y+24	; 0x18
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	8b 89       	ldd	r24, Y+19	; 0x13
    13dc:	9c 89       	ldd	r25, Y+20	; 0x14
    13de:	98 8b       	std	Y+16, r25	; 0x10
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <Keybad_getValue+0x156>
    13ea:	98 8b       	std	Y+16, r25	; 0x10
    13ec:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(30); /*handel debouncing*/
					if(DIO_voidGetPinValue(PERIPHRAL_D, cols[c]) == 0)
    13ee:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13f0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13f2:	ce 01       	movw	r24, r28
    13f4:	86 96       	adiw	r24, 0x26	; 38
    13f6:	fc 01       	movw	r30, r24
    13f8:	e2 0f       	add	r30, r18
    13fa:	f3 1f       	adc	r31, r19
    13fc:	20 81       	ld	r18, Z
    13fe:	80 e3       	ldi	r24, 0x30	; 48
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	62 2f       	mov	r22, r18
    1404:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO_voidGetPinValue>
    1408:	88 23       	and	r24, r24
    140a:	59 f5       	brne	.+86     	; 0x1462 <Keybad_getValue+0x1d2>
					{
						key = keybad_arr1[r][c];
    140c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    140e:	98 a1       	ldd	r25, Y+32	; 0x20
    1410:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1412:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	fc 01       	movw	r30, r24
    1426:	e8 59       	subi	r30, 0x98	; 152
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	89 a3       	std	Y+33, r24	; 0x21
						while(DIO_voidGetPinValue(PERIPHRAL_D, cols[c]) == 0);
    1430:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1432:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1434:	ce 01       	movw	r24, r28
    1436:	86 96       	adiw	r24, 0x26	; 38
    1438:	fc 01       	movw	r30, r24
    143a:	e2 0f       	add	r30, r18
    143c:	f3 1f       	adc	r31, r19
    143e:	20 81       	ld	r18, Z
    1440:	80 e3       	ldi	r24, 0x30	; 48
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	62 2f       	mov	r22, r18
    1446:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO_voidGetPinValue>
    144a:	88 23       	and	r24, r24
    144c:	89 f3       	breq	.-30     	; 0x1430 <Keybad_getValue+0x1a0>
						return key;
    144e:	89 a1       	ldd	r24, Y+33	; 0x21

			_delay_ms(20);
		}

	}
}
    1450:	a9 96       	adiw	r28, 0x29	; 41
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret
		for(int r=0; r<4; r++)
		{
			//DIO_voidSetPinDirection(PERIPHRAL_C, i+2, 1);
			DIO_voidSetPinValue(PERIPHRAL_C, rows[r], 0);
			/*loop on cols*/
			for(int c=0; c<4; c++)
    1462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1464:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	9e 8f       	std	Y+30, r25	; 0x1e
    146a:	8d 8f       	std	Y+29, r24	; 0x1d
    146c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    146e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	91 05       	cpc	r25, r1
    1474:	0c f4       	brge	.+2      	; 0x1478 <Keybad_getValue+0x1e8>
    1476:	39 cf       	rjmp	.-398    	; 0x12ea <Keybad_getValue+0x5a>
						return key;
					}
				}
			}

			DIO_voidSetPinValue(PERIPHRAL_C, rows[r], 1);
    1478:	2f 8d       	ldd	r18, Y+31	; 0x1f
    147a:	38 a1       	ldd	r19, Y+32	; 0x20
    147c:	ce 01       	movw	r24, r28
    147e:	82 96       	adiw	r24, 0x22	; 34
    1480:	fc 01       	movw	r30, r24
    1482:	e2 0f       	add	r30, r18
    1484:	f3 1f       	adc	r31, r19
    1486:	20 81       	ld	r18, Z
    1488:	83 e3       	ldi	r24, 0x33	; 51
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	62 2f       	mov	r22, r18
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 ea       	ldi	r26, 0xA0	; 160
    149a:	b1 e4       	ldi	r27, 0x41	; 65
    149c:	8b 87       	std	Y+11, r24	; 0x0b
    149e:	9c 87       	std	Y+12, r25	; 0x0c
    14a0:	ad 87       	std	Y+13, r26	; 0x0d
    14a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a e7       	ldi	r20, 0x7A	; 122
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8f 83       	std	Y+7, r24	; 0x07
    14be:	98 87       	std	Y+8, r25	; 0x08
    14c0:	a9 87       	std	Y+9, r26	; 0x09
    14c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	2c f4       	brge	.+10     	; 0x14e6 <Keybad_getValue+0x256>
		__ticks = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <Keybad_getValue+0x2d4>
	else if (__tmp > 65535)
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	4c f5       	brge	.+82     	; 0x1550 <Keybad_getValue+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1500:	7c 85       	ldd	r23, Y+12	; 0x0c
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	51 e4       	ldi	r21, 0x41	; 65
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <Keybad_getValue+0x2b6>
    1528:	89 e1       	ldi	r24, 0x19	; 25
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c 83       	std	Y+4, r25	; 0x04
    152e:	8b 83       	std	Y+3, r24	; 0x03
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <Keybad_getValue+0x2a4>
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f7       	brne	.-38     	; 0x1528 <Keybad_getValue+0x298>
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <Keybad_getValue+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <Keybad_getValue+0x2e0>
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	u8 rows[4] = {2, 3, 4, 5};
	u8 cols[4] = {0, 1, 2, 3};
	while(1)
	{
	/*loop on rows*/
		for(int r=0; r<4; r++)
    1578:	8f 8d       	ldd	r24, Y+31	; 0x1f
    157a:	98 a1       	ldd	r25, Y+32	; 0x20
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	98 a3       	std	Y+32, r25	; 0x20
    1580:	8f 8f       	std	Y+31, r24	; 0x1f
    1582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1584:	98 a1       	ldd	r25, Y+32	; 0x20
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	91 05       	cpc	r25, r1
    158a:	0c f4       	brge	.+2      	; 0x158e <Keybad_getValue+0x2fe>
    158c:	9d ce       	rjmp	.-710    	; 0x12c8 <Keybad_getValue+0x38>
    158e:	99 ce       	rjmp	.-718    	; 0x12c2 <Keybad_getValue+0x32>

00001590 <LCD_void_Init>:
#include"util/delay.h"
#include<string.h>
#include"BIT_MATH.h"

void LCD_void_Init(void)
{
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	c4 55       	subi	r28, 0x54	; 84
    159e:	d0 40       	sbci	r29, 0x00	; 0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
#if(LCD_MODE== _4_BIT_MODE)
	DIO_voidSetPinDirection(LCD_PIN4_PORT, LCD_PIN4_PIN, 1);
    15aa:	89 e3       	ldi	r24, 0x39	; 57
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	63 e0       	ldi	r22, 0x03	; 3
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN5_PORT, LCD_PIN5_PIN, 1);
    15b6:	89 e3       	ldi	r24, 0x39	; 57
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN6_PORT, LCD_PIN6_PIN, 1);
    15c2:	89 e3       	ldi	r24, 0x39	; 57
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_PIN7_PORT, LCD_PIN7_PIN, 1);
    15ce:	89 e3       	ldi	r24, 0x39	; 57
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN_PORT, EN_PIN, 1);
    15da:	89 e3       	ldi	r24, 0x39	; 57
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	64 e0       	ldi	r22, 0x04	; 4
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(RS_PORT, RS_PIN, 1);
    15e6:	89 e3       	ldi	r24, 0x39	; 57
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	66 e0       	ldi	r22, 0x06	; 6
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(RS_PORT, RS_PIN, 0);
    15f2:	89 e3       	ldi	r24, 0x39	; 57
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	66 e0       	ldi	r22, 0x06	; 6
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    15fe:	fe 01       	movw	r30, r28
    1600:	ef 5a       	subi	r30, 0xAF	; 175
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a8 ec       	ldi	r26, 0xC8	; 200
    160a:	b2 e4       	ldi	r27, 0x42	; 66
    160c:	80 83       	st	Z, r24
    160e:	91 83       	std	Z+1, r25	; 0x01
    1610:	a2 83       	std	Z+2, r26	; 0x02
    1612:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	8e 01       	movw	r16, r28
    1616:	03 5b       	subi	r16, 0xB3	; 179
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	fe 01       	movw	r30, r28
    161c:	ef 5a       	subi	r30, 0xAF	; 175
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a e7       	ldi	r20, 0x7A	; 122
    162e:	53 e4       	ldi	r21, 0x43	; 67
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	f8 01       	movw	r30, r16
    163a:	80 83       	st	Z, r24
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	a2 83       	std	Z+2, r26	; 0x02
    1640:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1642:	fe 01       	movw	r30, r28
    1644:	e3 5b       	subi	r30, 0xB3	; 179
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	44 f4       	brge	.+16     	; 0x1670 <LCD_void_Init+0xe0>
		__ticks = 1;
    1660:	fe 01       	movw	r30, r28
    1662:	e5 5b       	subi	r30, 0xB5	; 181
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	80 83       	st	Z, r24
    166e:	64 c0       	rjmp	.+200    	; 0x1738 <LCD_void_Init+0x1a8>
	else if (__tmp > 65535)
    1670:	fe 01       	movw	r30, r28
    1672:	e3 5b       	subi	r30, 0xB3	; 179
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	0c f0       	brlt	.+2      	; 0x1690 <LCD_void_Init+0x100>
    168e:	43 c0       	rjmp	.+134    	; 0x1716 <LCD_void_Init+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1690:	fe 01       	movw	r30, r28
    1692:	ef 5a       	subi	r30, 0xAF	; 175
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8e 01       	movw	r16, r28
    16b0:	05 5b       	subi	r16, 0xB5	; 181
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	f8 01       	movw	r30, r16
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
    16c6:	1f c0       	rjmp	.+62     	; 0x1706 <LCD_void_Init+0x176>
    16c8:	fe 01       	movw	r30, r28
    16ca:	e7 5b       	subi	r30, 0xB7	; 183
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	89 e1       	ldi	r24, 0x19	; 25
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    16d6:	fe 01       	movw	r30, r28
    16d8:	e7 5b       	subi	r30, 0xB7	; 183
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_void_Init+0x150>
    16e4:	fe 01       	movw	r30, r28
    16e6:	e7 5b       	subi	r30, 0xB7	; 183
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	de 01       	movw	r26, r28
    16f0:	a5 5b       	subi	r26, 0xB5	; 181
    16f2:	bf 4f       	sbci	r27, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e5 5b       	subi	r30, 0xB5	; 181
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	9c 93       	st	X, r25
    1704:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1706:	fe 01       	movw	r30, r28
    1708:	e5 5b       	subi	r30, 0xB5	; 181
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	d1 f6       	brne	.-76     	; 0x16c8 <LCD_void_Init+0x138>
    1714:	27 c0       	rjmp	.+78     	; 0x1764 <LCD_void_Init+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	8e 01       	movw	r16, r28
    1718:	05 5b       	subi	r16, 0xB5	; 181
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	e3 5b       	subi	r30, 0xB3	; 179
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	f8 01       	movw	r30, r16
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
    1738:	de 01       	movw	r26, r28
    173a:	a9 5b       	subi	r26, 0xB9	; 185
    173c:	bf 4f       	sbci	r27, 0xFF	; 255
    173e:	fe 01       	movw	r30, r28
    1740:	e5 5b       	subi	r30, 0xB5	; 181
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	8d 93       	st	X+, r24
    174a:	9c 93       	st	X, r25
    174c:	fe 01       	movw	r30, r28
    174e:	e9 5b       	subi	r30, 0xB9	; 185
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_void_Init+0x1c6>
    175a:	fe 01       	movw	r30, r28
    175c:	e9 5b       	subi	r30, 0xB9	; 185
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24


	_delay_ms(100);
	LCD_void_sendCommand(LCD_RETURN_H);
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    176a:	fe 01       	movw	r30, r28
    176c:	ed 5b       	subi	r30, 0xBD	; 189
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e2       	ldi	r26, 0x20	; 32
    1776:	b1 e4       	ldi	r27, 0x41	; 65
    1778:	80 83       	st	Z, r24
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	a2 83       	std	Z+2, r26	; 0x02
    177e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1780:	8e 01       	movw	r16, r28
    1782:	01 5c       	subi	r16, 0xC1	; 193
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	fe 01       	movw	r30, r28
    1788:	ed 5b       	subi	r30, 0xBD	; 189
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a e7       	ldi	r20, 0x7A	; 122
    179a:	53 e4       	ldi	r21, 0x43	; 67
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	f8 01       	movw	r30, r16
    17a6:	80 83       	st	Z, r24
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	a2 83       	std	Z+2, r26	; 0x02
    17ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ae:	fe 01       	movw	r30, r28
    17b0:	ff 96       	adiw	r30, 0x3f	; 63
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <LCD_void_Init+0x244>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9e af       	std	Y+62, r25	; 0x3e
    17d0:	8d af       	std	Y+61, r24	; 0x3d
    17d2:	46 c0       	rjmp	.+140    	; 0x1860 <LCD_void_Init+0x2d0>
	else if (__tmp > 65535)
    17d4:	fe 01       	movw	r30, r28
    17d6:	ff 96       	adiw	r30, 0x3f	; 63
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ec:	18 16       	cp	r1, r24
    17ee:	64 f5       	brge	.+88     	; 0x1848 <LCD_void_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f0:	fe 01       	movw	r30, r28
    17f2:	ed 5b       	subi	r30, 0xBD	; 189
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9e af       	std	Y+62, r25	; 0x3e
    181c:	8d af       	std	Y+61, r24	; 0x3d
    181e:	0f c0       	rjmp	.+30     	; 0x183e <LCD_void_Init+0x2ae>
    1820:	89 e1       	ldi	r24, 0x19	; 25
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c af       	std	Y+60, r25	; 0x3c
    1826:	8b af       	std	Y+59, r24	; 0x3b
    1828:	8b ad       	ldd	r24, Y+59	; 0x3b
    182a:	9c ad       	ldd	r25, Y+60	; 0x3c
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <LCD_void_Init+0x29c>
    1830:	9c af       	std	Y+60, r25	; 0x3c
    1832:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	8d ad       	ldd	r24, Y+61	; 0x3d
    1836:	9e ad       	ldd	r25, Y+62	; 0x3e
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9e af       	std	Y+62, r25	; 0x3e
    183c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1840:	9e ad       	ldd	r25, Y+62	; 0x3e
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <LCD_void_Init+0x290>
    1846:	16 c0       	rjmp	.+44     	; 0x1874 <LCD_void_Init+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	fe 01       	movw	r30, r28
    184a:	ff 96       	adiw	r30, 0x3f	; 63
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e af       	std	Y+62, r25	; 0x3e
    185e:	8d af       	std	Y+61, r24	; 0x3d
    1860:	8d ad       	ldd	r24, Y+61	; 0x3d
    1862:	9e ad       	ldd	r25, Y+62	; 0x3e
    1864:	9a af       	std	Y+58, r25	; 0x3a
    1866:	89 af       	std	Y+57, r24	; 0x39
    1868:	89 ad       	ldd	r24, Y+57	; 0x39
    186a:	9a ad       	ldd	r25, Y+58	; 0x3a
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_void_Init+0x2dc>
    1870:	9a af       	std	Y+58, r25	; 0x3a
    1872:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_void_sendCommand(FNC_SET_FOUR_BIT_MODE);
    1874:	88 e2       	ldi	r24, 0x28	; 40
    1876:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	bf e3       	ldi	r27, 0x3F	; 63
    1882:	8d ab       	std	Y+53, r24	; 0x35
    1884:	9e ab       	std	Y+54, r25	; 0x36
    1886:	af ab       	std	Y+55, r26	; 0x37
    1888:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	6d a9       	ldd	r22, Y+53	; 0x35
    188c:	7e a9       	ldd	r23, Y+54	; 0x36
    188e:	8f a9       	ldd	r24, Y+55	; 0x37
    1890:	98 ad       	ldd	r25, Y+56	; 0x38
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	89 ab       	std	Y+49, r24	; 0x31
    18a4:	9a ab       	std	Y+50, r25	; 0x32
    18a6:	ab ab       	std	Y+51, r26	; 0x33
    18a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18aa:	69 a9       	ldd	r22, Y+49	; 0x31
    18ac:	7a a9       	ldd	r23, Y+50	; 0x32
    18ae:	8b a9       	ldd	r24, Y+51	; 0x33
    18b0:	9c a9       	ldd	r25, Y+52	; 0x34
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <LCD_void_Init+0x33c>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	98 ab       	std	Y+48, r25	; 0x30
    18c8:	8f a7       	std	Y+47, r24	; 0x2f
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <LCD_void_Init+0x3ba>
	else if (__tmp > 65535)
    18cc:	69 a9       	ldd	r22, Y+49	; 0x31
    18ce:	7a a9       	ldd	r23, Y+50	; 0x32
    18d0:	8b a9       	ldd	r24, Y+51	; 0x33
    18d2:	9c a9       	ldd	r25, Y+52	; 0x34
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <LCD_void_Init+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	6d a9       	ldd	r22, Y+53	; 0x35
    18e6:	7e a9       	ldd	r23, Y+54	; 0x36
    18e8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ea:	98 ad       	ldd	r25, Y+56	; 0x38
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	98 ab       	std	Y+48, r25	; 0x30
    190a:	8f a7       	std	Y+47, r24	; 0x2f
    190c:	0f c0       	rjmp	.+30     	; 0x192c <LCD_void_Init+0x39c>
    190e:	89 e1       	ldi	r24, 0x19	; 25
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e a7       	std	Y+46, r25	; 0x2e
    1914:	8d a7       	std	Y+45, r24	; 0x2d
    1916:	8d a5       	ldd	r24, Y+45	; 0x2d
    1918:	9e a5       	ldd	r25, Y+46	; 0x2e
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <LCD_void_Init+0x38a>
    191e:	9e a7       	std	Y+46, r25	; 0x2e
    1920:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8f a5       	ldd	r24, Y+47	; 0x2f
    1924:	98 a9       	ldd	r25, Y+48	; 0x30
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	98 ab       	std	Y+48, r25	; 0x30
    192a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8f a5       	ldd	r24, Y+47	; 0x2f
    192e:	98 a9       	ldd	r25, Y+48	; 0x30
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <LCD_void_Init+0x37e>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <LCD_void_Init+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	69 a9       	ldd	r22, Y+49	; 0x31
    1938:	7a a9       	ldd	r23, Y+50	; 0x32
    193a:	8b a9       	ldd	r24, Y+51	; 0x33
    193c:	9c a9       	ldd	r25, Y+52	; 0x34
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	98 ab       	std	Y+48, r25	; 0x30
    1948:	8f a7       	std	Y+47, r24	; 0x2f
    194a:	8f a5       	ldd	r24, Y+47	; 0x2f
    194c:	98 a9       	ldd	r25, Y+48	; 0x30
    194e:	9c a7       	std	Y+44, r25	; 0x2c
    1950:	8b a7       	std	Y+43, r24	; 0x2b
    1952:	8b a5       	ldd	r24, Y+43	; 0x2b
    1954:	9c a5       	ldd	r25, Y+44	; 0x2c
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_void_Init+0x3c6>
    195a:	9c a7       	std	Y+44, r25	; 0x2c
    195c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_void_sendCommand(CURSOR_ON_DISPLAY_ON);
    195e:	8e e0       	ldi	r24, 0x0E	; 14
    1960:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e8       	ldi	r26, 0x80	; 128
    196a:	bf e3       	ldi	r27, 0x3F	; 63
    196c:	8f a3       	std	Y+39, r24	; 0x27
    196e:	98 a7       	std	Y+40, r25	; 0x28
    1970:	a9 a7       	std	Y+41, r26	; 0x29
    1972:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6f a1       	ldd	r22, Y+39	; 0x27
    1976:	78 a5       	ldd	r23, Y+40	; 0x28
    1978:	89 a5       	ldd	r24, Y+41	; 0x29
    197a:	9a a5       	ldd	r25, Y+42	; 0x2a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	53 e4       	ldi	r21, 0x43	; 67
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8b a3       	std	Y+35, r24	; 0x23
    198e:	9c a3       	std	Y+36, r25	; 0x24
    1990:	ad a3       	std	Y+37, r26	; 0x25
    1992:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1994:	6b a1       	ldd	r22, Y+35	; 0x23
    1996:	7c a1       	ldd	r23, Y+36	; 0x24
    1998:	8d a1       	ldd	r24, Y+37	; 0x25
    199a:	9e a1       	ldd	r25, Y+38	; 0x26
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <LCD_void_Init+0x426>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9a a3       	std	Y+34, r25	; 0x22
    19b2:	89 a3       	std	Y+33, r24	; 0x21
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <LCD_void_Init+0x4a4>
	else if (__tmp > 65535)
    19b6:	6b a1       	ldd	r22, Y+35	; 0x23
    19b8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ba:	8d a1       	ldd	r24, Y+37	; 0x25
    19bc:	9e a1       	ldd	r25, Y+38	; 0x26
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <LCD_void_Init+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6f a1       	ldd	r22, Y+39	; 0x27
    19d0:	78 a5       	ldd	r23, Y+40	; 0x28
    19d2:	89 a5       	ldd	r24, Y+41	; 0x29
    19d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9a a3       	std	Y+34, r25	; 0x22
    19f4:	89 a3       	std	Y+33, r24	; 0x21
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <LCD_void_Init+0x486>
    19f8:	89 e1       	ldi	r24, 0x19	; 25
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	98 a3       	std	Y+32, r25	; 0x20
    19fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1a00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a02:	98 a1       	ldd	r25, Y+32	; 0x20
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_void_Init+0x474>
    1a08:	98 a3       	std	Y+32, r25	; 0x20
    1a0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9a a3       	std	Y+34, r25	; 0x22
    1a14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	89 a1       	ldd	r24, Y+33	; 0x21
    1a18:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <LCD_void_Init+0x468>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <LCD_void_Init+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6b a1       	ldd	r22, Y+35	; 0x23
    1a22:	7c a1       	ldd	r23, Y+36	; 0x24
    1a24:	8d a1       	ldd	r24, Y+37	; 0x25
    1a26:	9e a1       	ldd	r25, Y+38	; 0x26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9a a3       	std	Y+34, r25	; 0x22
    1a32:	89 a3       	std	Y+33, r24	; 0x21
    1a34:	89 a1       	ldd	r24, Y+33	; 0x21
    1a36:	9a a1       	ldd	r25, Y+34	; 0x22
    1a38:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_void_Init+0x4b0>
    1a44:	9e 8f       	std	Y+30, r25	; 0x1e
    1a46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_void_sendCommand(LCD_CLEAR);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e2       	ldi	r26, 0x20	; 32
    1a54:	b1 e4       	ldi	r27, 0x41	; 65
    1a56:	89 8f       	std	Y+25, r24	; 0x19
    1a58:	9a 8f       	std	Y+26, r25	; 0x1a
    1a5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	53 e4       	ldi	r21, 0x43	; 67
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8d 8b       	std	Y+21, r24	; 0x15
    1a78:	9e 8b       	std	Y+22, r25	; 0x16
    1a7a:	af 8b       	std	Y+23, r26	; 0x17
    1a7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a80:	7e 89       	ldd	r23, Y+22	; 0x16
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	98 8d       	ldd	r25, Y+24	; 0x18
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_void_Init+0x510>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9c 8b       	std	Y+20, r25	; 0x14
    1a9c:	8b 8b       	std	Y+19, r24	; 0x13
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_void_Init+0x58e>
	else if (__tmp > 65535)
    1aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_void_Init+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_void_Init+0x570>
    1ae2:	89 e1       	ldi	r24, 0x19	; 25
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9a 8b       	std	Y+18, r25	; 0x12
    1ae8:	89 8b       	std	Y+17, r24	; 0x11
    1aea:	89 89       	ldd	r24, Y+17	; 0x11
    1aec:	9a 89       	ldd	r25, Y+18	; 0x12
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_void_Init+0x55e>
    1af2:	9a 8b       	std	Y+18, r25	; 0x12
    1af4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9c 8b       	std	Y+20, r25	; 0x14
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_void_Init+0x552>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_void_Init+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b10:	98 8d       	ldd	r25, Y+24	; 0x18
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9c 8b       	std	Y+20, r25	; 0x14
    1b1c:	8b 8b       	std	Y+19, r24	; 0x13
    1b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b20:	9c 89       	ldd	r25, Y+20	; 0x14
    1b22:	98 8b       	std	Y+16, r25	; 0x10
    1b24:	8f 87       	std	Y+15, r24	; 0x0f
    1b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b28:	98 89       	ldd	r25, Y+16	; 0x10
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_void_Init+0x59a>
    1b2e:	98 8b       	std	Y+16, r25	; 0x10
    1b30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_void_sendCommand(ENTRY_MODE);
    1b32:	86 e0       	ldi	r24, 0x06	; 6
    1b34:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e8       	ldi	r26, 0x80	; 128
    1b3e:	bf e3       	ldi	r27, 0x3F	; 63
    1b40:	8b 87       	std	Y+11, r24	; 0x0b
    1b42:	9c 87       	std	Y+12, r25	; 0x0c
    1b44:	ad 87       	std	Y+13, r26	; 0x0d
    1b46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a e7       	ldi	r20, 0x7A	; 122
    1b56:	53 e4       	ldi	r21, 0x43	; 67
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8f 83       	std	Y+7, r24	; 0x07
    1b62:	98 87       	std	Y+8, r25	; 0x08
    1b64:	a9 87       	std	Y+9, r26	; 0x09
    1b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <LCD_void_Init+0x5fa>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <LCD_void_Init+0x678>
	else if (__tmp > 65535)
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <LCD_void_Init+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <LCD_void_Init+0x65a>
    1bcc:	89 e1       	ldi	r24, 0x19	; 25
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_void_Init+0x648>
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <LCD_void_Init+0x63c>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <LCD_void_Init+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_void_Init+0x684>
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LCD_void_sendCommand(ENTRY_MODE);
		_delay_ms(1);
	}
#endif
}
    1c1c:	cc 5a       	subi	r28, 0xAC	; 172
    1c1e:	df 4f       	sbci	r29, 0xFF	; 255
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	08 95       	ret

00001c34 <LCD_void_sendData>:



void LCD_void_sendData(u8 copy_u8data )
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	2f 97       	sbiw	r28, 0x0f	; 15
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT, RS_PIN, 1);
    1c4a:	89 e3       	ldi	r24, 0x39	; 57
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	66 e0       	ldi	r22, 0x06	; 6
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
    1c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c58:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <H_LCD_void_latchByte>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a0 e8       	ldi	r26, 0x80	; 128
    1c62:	bf e3       	ldi	r27, 0x3F	; 63
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
    1c66:	9c 87       	std	Y+12, r25	; 0x0c
    1c68:	ad 87       	std	Y+13, r26	; 0x0d
    1c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e7       	ldi	r20, 0x7A	; 122
    1c7a:	53 e4       	ldi	r21, 0x43	; 67
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8f 83       	std	Y+7, r24	; 0x07
    1c86:	98 87       	std	Y+8, r25	; 0x08
    1c88:	a9 87       	std	Y+9, r26	; 0x09
    1c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <LCD_void_sendData+0x7a>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <LCD_void_sendData+0xf8>
	else if (__tmp > 65535)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <LCD_void_sendData+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <LCD_void_sendData+0xda>
    1cf0:	89 e1       	ldi	r24, 0x19	; 25
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_void_sendData+0xc8>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <LCD_void_sendData+0xbc>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <LCD_void_sendData+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_void_sendData+0x104>
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1d40:	2f 96       	adiw	r28, 0x0f	; 15
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <LCD_void_sendCommand>:
void LCD_void_sendCommand(u8 copy_u8command)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	2f 97       	sbiw	r28, 0x0f	; 15
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(RS_PORT, RS_PIN, 0);
    1d68:	89 e3       	ldi	r24, 0x39	; 57
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	66 e0       	ldi	r22, 0x06	; 6
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
    1d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d76:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <H_LCD_void_latchByte>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	8b 87       	std	Y+11, r24	; 0x0b
    1d84:	9c 87       	std	Y+12, r25	; 0x0c
    1d86:	ad 87       	std	Y+13, r26	; 0x0d
    1d88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a e7       	ldi	r20, 0x7A	; 122
    1d98:	53 e4       	ldi	r21, 0x43	; 67
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	8f 83       	std	Y+7, r24	; 0x07
    1da4:	98 87       	std	Y+8, r25	; 0x08
    1da6:	a9 87       	std	Y+9, r26	; 0x09
    1da8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_void_sendCommand+0x7a>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_void_sendCommand+0xf8>
	else if (__tmp > 65535)
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_void_sendCommand+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_void_sendCommand+0xda>
    1e0e:	89 e1       	ldi	r24, 0x19	; 25
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	8b 83       	std	Y+3, r24	; 0x03
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_void_sendCommand+0xc8>
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_void_sendCommand+0xbc>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_void_sendCommand+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6f 81       	ldd	r22, Y+7	; 0x07
    1e38:	78 85       	ldd	r23, Y+8	; 0x08
    1e3a:	89 85       	ldd	r24, Y+9	; 0x09
    1e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_void_sendCommand+0x104>
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/**********************/
}
    1e5e:	2f 96       	adiw	r28, 0x0f	; 15
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <LCD_void_sendString>:
void LCD_void_sendString(const s8 * pstr)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <LCD_void_sendString+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <LCD_void_sendString+0x8>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03

	int i=0;
    1e80:	1a 82       	std	Y+2, r1	; 0x02
    1e82:	19 82       	std	Y+1, r1	; 0x01
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <LCD_void_sendString+0x34>
	while(pstr[i] != '\0')
	{
		LCD_void_sendData(pstr[i]);
    1e86:	29 81       	ldd	r18, Y+1	; 0x01
    1e88:	3a 81       	ldd	r19, Y+2	; 0x02
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	80 81       	ld	r24, Z
    1e96:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_void_sendData>
		i++;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_void_sendString(const s8 * pstr)
{

	int i=0;
	while(pstr[i] != '\0')
    1ea4:	29 81       	ldd	r18, Y+1	; 0x01
    1ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 23       	and	r24, r24
    1eb6:	39 f7       	brne	.-50     	; 0x1e86 <LCD_void_sendString+0x16>
	{
		LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <LCD_void_sendIntNum>:

void LCD_void_sendIntNum(s32 copy_s32Num)
{
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	6f 97       	sbiw	r28, 0x1f	; 31
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	6c 8f       	std	Y+28, r22	; 0x1c
    1ee0:	7d 8f       	std	Y+29, r23	; 0x1d
    1ee2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee4:	9f 8f       	std	Y+31, r25	; 0x1f

	if(copy_s32Num == 0)
    1ee6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ee8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eea:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1eec:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	a1 05       	cpc	r26, r1
    1ef2:	b1 05       	cpc	r27, r1
    1ef4:	21 f4       	brne	.+8      	; 0x1efe <LCD_void_sendIntNum+0x38>
	{
		LCD_void_sendData('0');
    1ef6:	80 e3       	ldi	r24, 0x30	; 48
    1ef8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_void_sendData>
    1efc:	e5 c0       	rjmp	.+458    	; 0x20c8 <LCD_void_sendIntNum+0x202>
		return;
	}

	else if(copy_s32Num < 0)
    1efe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f02:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1f04:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1f06:	bb 23       	and	r27, r27
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <LCD_void_sendIntNum+0x46>
    1f0a:	84 c0       	rjmp	.+264    	; 0x2014 <LCD_void_sendIntNum+0x14e>
	{
		LCD_void_sendData('-');
    1f0c:	8d e2       	ldi	r24, 0x2D	; 45
    1f0e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_void_sendData>
		copy_s32Num *= -1;
    1f12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f16:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1f18:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1f1a:	b0 95       	com	r27
    1f1c:	a0 95       	com	r26
    1f1e:	90 95       	com	r25
    1f20:	81 95       	neg	r24
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	af 4f       	sbci	r26, 0xFF	; 255
    1f26:	bf 4f       	sbci	r27, 0xFF	; 255
    1f28:	8c 8f       	std	Y+28, r24	; 0x1c
    1f2a:	9d 8f       	std	Y+29, r25	; 0x1d
    1f2c:	ae 8f       	std	Y+30, r26	; 0x1e
    1f2e:	bf 8f       	std	Y+31, r27	; 0x1f
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e0       	ldi	r26, 0x00	; 0
    1f36:	bf e3       	ldi	r27, 0x3F	; 63
    1f38:	8b 87       	std	Y+11, r24	; 0x0b
    1f3a:	9c 87       	std	Y+12, r25	; 0x0c
    1f3c:	ad 87       	std	Y+13, r26	; 0x0d
    1f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8f 83       	std	Y+7, r24	; 0x07
    1f5a:	98 87       	std	Y+8, r25	; 0x08
    1f5c:	a9 87       	std	Y+9, r26	; 0x09
    1f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_void_sendIntNum+0xbc>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <LCD_void_sendIntNum+0x13a>
	else if (__tmp > 65535)
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <LCD_void_sendIntNum+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <LCD_void_sendIntNum+0x11c>
    1fc4:	89 e1       	ldi	r24, 0x19	; 25
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_void_sendIntNum+0x10a>
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <LCD_void_sendIntNum+0xfe>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <LCD_void_sendIntNum+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_void_sendIntNum+0x146>
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(0.5);
	}

	u8 num_digits[10]={0};
    2014:	8a e0       	ldi	r24, 0x0A	; 10
    2016:	fe 01       	movw	r30, r28
    2018:	72 96       	adiw	r30, 0x12	; 18
    201a:	df 01       	movw	r26, r30
    201c:	98 2f       	mov	r25, r24
    201e:	1d 92       	st	X+, r1
    2020:	9a 95       	dec	r25
    2022:	e9 f7       	brne	.-6      	; 0x201e <LCD_void_sendIntNum+0x158>
	u8 i;

	for( i=0; (copy_s32Num)!=0;i++)
    2024:	19 8a       	std	Y+17, r1	; 0x11
    2026:	2d c0       	rjmp	.+90     	; 0x2082 <LCD_void_sendIntNum+0x1bc>
	{
		num_digits[i] = (copy_s32Num % 10);
    2028:	89 89       	ldd	r24, Y+17	; 0x11
    202a:	08 2f       	mov	r16, r24
    202c:	10 e0       	ldi	r17, 0x00	; 0
    202e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2030:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2032:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2034:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2036:	2a e0       	ldi	r18, 0x0A	; 10
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 1e 22 	call	0x443c	; 0x443c <__divmodsi4>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	28 2f       	mov	r18, r24
    204c:	ce 01       	movw	r24, r28
    204e:	42 96       	adiw	r24, 0x12	; 18
    2050:	fc 01       	movw	r30, r24
    2052:	e0 0f       	add	r30, r16
    2054:	f1 1f       	adc	r31, r17
    2056:	20 83       	st	Z, r18
		copy_s32Num /= 10;
    2058:	8c 8d       	ldd	r24, Y+28	; 0x1c
    205a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    205c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    205e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 1e 22 	call	0x443c	; 0x443c <__divmodsi4>
    2070:	da 01       	movw	r26, r20
    2072:	c9 01       	movw	r24, r18
    2074:	8c 8f       	std	Y+28, r24	; 0x1c
    2076:	9d 8f       	std	Y+29, r25	; 0x1d
    2078:	ae 8f       	std	Y+30, r26	; 0x1e
    207a:	bf 8f       	std	Y+31, r27	; 0x1f
	}

	u8 num_digits[10]={0};
	u8 i;

	for( i=0; (copy_s32Num)!=0;i++)
    207c:	89 89       	ldd	r24, Y+17	; 0x11
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	89 8b       	std	Y+17, r24	; 0x11
    2082:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2084:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2086:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2088:	bf 8d       	ldd	r27, Y+31	; 0x1f
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	a1 05       	cpc	r26, r1
    208e:	b1 05       	cpc	r27, r1
    2090:	59 f6       	brne	.-106    	; 0x2028 <LCD_void_sendIntNum+0x162>
	{
		num_digits[i] = (copy_s32Num % 10);
		copy_s32Num /= 10;
	}
	int j;
	for (j=i-1;j>=0;j--)
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
    209e:	10 c0       	rjmp	.+32     	; 0x20c0 <LCD_void_sendIntNum+0x1fa>
	{
		LCD_void_sendData(num_digits[j]+'0');
    20a0:	2f 85       	ldd	r18, Y+15	; 0x0f
    20a2:	38 89       	ldd	r19, Y+16	; 0x10
    20a4:	ce 01       	movw	r24, r28
    20a6:	42 96       	adiw	r24, 0x12	; 18
    20a8:	fc 01       	movw	r30, r24
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	80 81       	ld	r24, Z
    20b0:	80 5d       	subi	r24, 0xD0	; 208
    20b2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_void_sendData>
	{
		num_digits[i] = (copy_s32Num % 10);
		copy_s32Num /= 10;
	}
	int j;
	for (j=i-1;j>=0;j--)
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	98 89       	ldd	r25, Y+16	; 0x10
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	98 8b       	std	Y+16, r25	; 0x10
    20be:	8f 87       	std	Y+15, r24	; 0x0f
    20c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c2:	98 89       	ldd	r25, Y+16	; 0x10
    20c4:	99 23       	and	r25, r25
    20c6:	64 f7       	brge	.-40     	; 0x20a0 <LCD_void_sendIntNum+0x1da>
		LCD_void_sendData(num_digits[j]+'0');
	}



}
    20c8:	6f 96       	adiw	r28, 0x1f	; 31
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <LCD_void_gotoXY>:

void LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	61 97       	sbiw	r28, 0x11	; 17
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	88 8b       	std	Y+16, r24	; 0x10
    20f4:	69 8b       	std	Y+17, r22	; 0x11
	u8 copy_u8command;

	if(copy_u8Row>4||copy_u8Row<1||copy_u8Col>20||copy_u8Col<1)
    20f6:	88 89       	ldd	r24, Y+16	; 0x10
    20f8:	85 30       	cpi	r24, 0x05	; 5
    20fa:	48 f4       	brcc	.+18     	; 0x210e <LCD_void_gotoXY+0x30>
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	88 23       	and	r24, r24
    2100:	31 f0       	breq	.+12     	; 0x210e <LCD_void_gotoXY+0x30>
    2102:	89 89       	ldd	r24, Y+17	; 0x11
    2104:	85 31       	cpi	r24, 0x15	; 21
    2106:	18 f4       	brcc	.+6      	; 0x210e <LCD_void_gotoXY+0x30>
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	88 23       	and	r24, r24
    210c:	19 f4       	brne	.+6      	; 0x2114 <LCD_void_gotoXY+0x36>
	{
		copy_u8command=0x80;
    210e:	80 e8       	ldi	r24, 0x80	; 128
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	1b c0       	rjmp	.+54     	; 0x214a <LCD_void_gotoXY+0x6c>
	}
	else if(copy_u8Row==1)
    2114:	88 89       	ldd	r24, Y+16	; 0x10
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	21 f4       	brne	.+8      	; 0x2122 <LCD_void_gotoXY+0x44>
	{
		copy_u8command=ADDRESS_ROW_1+copy_u8Col-1 ;
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	81 58       	subi	r24, 0x81	; 129
    211e:	8f 87       	std	Y+15, r24	; 0x0f
    2120:	14 c0       	rjmp	.+40     	; 0x214a <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==2)
    2122:	88 89       	ldd	r24, Y+16	; 0x10
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	21 f4       	brne	.+8      	; 0x2130 <LCD_void_gotoXY+0x52>
	{
		copy_u8command=ADDRESS_ROW_2+copy_u8Col-1;
    2128:	89 89       	ldd	r24, Y+17	; 0x11
    212a:	81 54       	subi	r24, 0x41	; 65
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	0d c0       	rjmp	.+26     	; 0x214a <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==3)
    2130:	88 89       	ldd	r24, Y+16	; 0x10
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	21 f4       	brne	.+8      	; 0x213e <LCD_void_gotoXY+0x60>
	{
		copy_u8command=ADDRESS_ROW_3+copy_u8Col-1;
    2136:	89 89       	ldd	r24, Y+17	; 0x11
    2138:	8d 56       	subi	r24, 0x6D	; 109
    213a:	8f 87       	std	Y+15, r24	; 0x0f
    213c:	06 c0       	rjmp	.+12     	; 0x214a <LCD_void_gotoXY+0x6c>
	}
	else if (copy_u8Row==4)
    213e:	88 89       	ldd	r24, Y+16	; 0x10
    2140:	84 30       	cpi	r24, 0x04	; 4
    2142:	19 f4       	brne	.+6      	; 0x214a <LCD_void_gotoXY+0x6c>
	{
		copy_u8command=ADDRESS_ROW_4+copy_u8Col-1;
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	8d 52       	subi	r24, 0x2D	; 45
    2148:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_void_sendCommand(copy_u8command);
    214a:	8f 85       	ldd	r24, Y+15	; 0x0f
    214c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e8       	ldi	r26, 0x80	; 128
    2156:	bf e3       	ldi	r27, 0x3F	; 63
    2158:	8b 87       	std	Y+11, r24	; 0x0b
    215a:	9c 87       	std	Y+12, r25	; 0x0c
    215c:	ad 87       	std	Y+13, r26	; 0x0d
    215e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	53 e4       	ldi	r21, 0x43	; 67
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8f 83       	std	Y+7, r24	; 0x07
    217a:	98 87       	std	Y+8, r25	; 0x08
    217c:	a9 87       	std	Y+9, r26	; 0x09
    217e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_void_gotoXY+0xc4>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_void_gotoXY+0x142>
	else if (__tmp > 65535)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_void_gotoXY+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_void_gotoXY+0x124>
    21e4:	89 e1       	ldi	r24, 0x19	; 25
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_void_gotoXY+0x112>
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_void_gotoXY+0x106>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_void_gotoXY+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_void_gotoXY+0x14e>
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2234:	61 96       	adiw	r28, 0x11	; 17
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <LCD_void_creatCustomChar>:
void LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	64 97       	sbiw	r28, 0x14	; 20
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	9b 8b       	std	Y+19, r25	; 0x13
    225c:	8a 8b       	std	Y+18, r24	; 0x12
    225e:	6c 8b       	std	Y+20, r22	; 0x14
	/*SET CGRAM ADDRESS BASED ON copy_u8charCode */
	u8 command = (((copy_u8charCode & (TAKE_FIRST_3_BITS))*CHAR_CODES_OFFSET_IN_CGRAM) + LCD_CGRAM_ADDRESS);
    2260:	8c 89       	ldd	r24, Y+20	; 0x14
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	87 70       	andi	r24, 0x07	; 7
    2268:	90 70       	andi	r25, 0x00	; 0
    226a:	08 96       	adiw	r24, 0x08	; 8
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	89 8b       	std	Y+17, r24	; 0x11
	LCD_void_sendCommand(command);
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>

	/*WRITE DATA TO CG OR DD RAM*/
	for(int i=0; i<8; i++)
    2280:	18 8a       	std	Y+16, r1	; 0x10
    2282:	1f 86       	std	Y+15, r1	; 0x0f
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <LCD_void_creatCustomChar+0x5e>
	{
		LCD_void_sendData(ArrPattern[i]);
    2286:	2f 85       	ldd	r18, Y+15	; 0x0f
    2288:	38 89       	ldd	r19, Y+16	; 0x10
    228a:	8a 89       	ldd	r24, Y+18	; 0x12
    228c:	9b 89       	ldd	r25, Y+19	; 0x13
    228e:	fc 01       	movw	r30, r24
    2290:	e2 0f       	add	r30, r18
    2292:	f3 1f       	adc	r31, r19
    2294:	80 81       	ld	r24, Z
    2296:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_void_sendData>
	/*SET CGRAM ADDRESS BASED ON copy_u8charCode */
	u8 command = (((copy_u8charCode & (TAKE_FIRST_3_BITS))*CHAR_CODES_OFFSET_IN_CGRAM) + LCD_CGRAM_ADDRESS);
	LCD_void_sendCommand(command);

	/*WRITE DATA TO CG OR DD RAM*/
	for(int i=0; i<8; i++)
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
    229c:	98 89       	ldd	r25, Y+16	; 0x10
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	98 8b       	std	Y+16, r25	; 0x10
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 89       	ldd	r25, Y+16	; 0x10
    22a8:	88 30       	cpi	r24, 0x08	; 8
    22aa:	91 05       	cpc	r25, r1
    22ac:	64 f3       	brlt	.-40     	; 0x2286 <LCD_void_creatCustomChar+0x40>
	{
		LCD_void_sendData(ArrPattern[i]);
	}
	LCD_void_sendCommand(LCD_DDRAM_ADDRESS );
    22ae:	80 e8       	ldi	r24, 0x80	; 128
    22b0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_void_sendCommand>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a0 e8       	ldi	r26, 0x80	; 128
    22ba:	bf e3       	ldi	r27, 0x3F	; 63
    22bc:	8b 87       	std	Y+11, r24	; 0x0b
    22be:	9c 87       	std	Y+12, r25	; 0x0c
    22c0:	ad 87       	std	Y+13, r26	; 0x0d
    22c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	53 e4       	ldi	r21, 0x43	; 67
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8f 83       	std	Y+7, r24	; 0x07
    22de:	98 87       	std	Y+8, r25	; 0x08
    22e0:	a9 87       	std	Y+9, r26	; 0x09
    22e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <LCD_void_creatCustomChar+0xc0>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <LCD_void_creatCustomChar+0x13e>
	else if (__tmp > 65535)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <LCD_void_creatCustomChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <LCD_void_creatCustomChar+0x120>
    2348:	89 e1       	ldi	r24, 0x19	; 25
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	8b 83       	std	Y+3, r24	; 0x03
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_void_creatCustomChar+0x10e>
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <LCD_void_creatCustomChar+0x102>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <LCD_void_creatCustomChar+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_void_creatCustomChar+0x14a>
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2398:	64 96       	adiw	r28, 0x14	; 20
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <LCD_void_displayCustomChar>:
void LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	89 83       	std	Y+1, r24	; 0x01
	/*EXECUTE COMMAND WRITE DATA TO CG OR DD RAM WITH CHAR CODE*/
	LCD_void_sendData(copy_u8charCode);
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_void_sendData>
}
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	e9 97       	sbiw	r28, 0x39	; 57
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	89 af       	std	Y+57, r24	; 0x39
#if(LCD_MODE== _4_BIT_MODE)

	DIO_voidSetPinValue(LCD_PIN7_PORT,LCD_PIN7_PIN,READBIT(copy_u8Byte,7));
    23da:	89 ad       	ldd	r24, Y+57	; 0x39
    23dc:	28 2f       	mov	r18, r24
    23de:	22 1f       	adc	r18, r18
    23e0:	22 27       	eor	r18, r18
    23e2:	22 1f       	adc	r18, r18
    23e4:	89 e3       	ldi	r24, 0x39	; 57
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	42 2f       	mov	r20, r18
    23ec:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN6_PORT,LCD_PIN6_PIN,READBIT(copy_u8Byte,6));
    23f0:	89 ad       	ldd	r24, Y+57	; 0x39
    23f2:	82 95       	swap	r24
    23f4:	86 95       	lsr	r24
    23f6:	86 95       	lsr	r24
    23f8:	83 70       	andi	r24, 0x03	; 3
    23fa:	28 2f       	mov	r18, r24
    23fc:	21 70       	andi	r18, 0x01	; 1
    23fe:	89 e3       	ldi	r24, 0x39	; 57
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	42 2f       	mov	r20, r18
    2406:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN5_PORT,LCD_PIN5_PIN,READBIT(copy_u8Byte,5));
    240a:	89 ad       	ldd	r24, Y+57	; 0x39
    240c:	82 95       	swap	r24
    240e:	86 95       	lsr	r24
    2410:	87 70       	andi	r24, 0x07	; 7
    2412:	28 2f       	mov	r18, r24
    2414:	21 70       	andi	r18, 0x01	; 1
    2416:	89 e3       	ldi	r24, 0x39	; 57
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	42 2f       	mov	r20, r18
    241e:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN4_PORT,LCD_PIN4_PIN,READBIT(copy_u8Byte,4));
    2422:	89 ad       	ldd	r24, Y+57	; 0x39
    2424:	82 95       	swap	r24
    2426:	8f 70       	andi	r24, 0x0F	; 15
    2428:	28 2f       	mov	r18, r24
    242a:	21 70       	andi	r18, 0x01	; 1
    242c:	89 e3       	ldi	r24, 0x39	; 57
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	63 e0       	ldi	r22, 0x03	; 3
    2432:	42 2f       	mov	r20, r18
    2434:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,1);
    2438:	89 e3       	ldi	r24, 0x39	; 57
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	64 e0       	ldi	r22, 0x04	; 4
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e8       	ldi	r26, 0x80	; 128
    244a:	bf e3       	ldi	r27, 0x3F	; 63
    244c:	8d ab       	std	Y+53, r24	; 0x35
    244e:	9e ab       	std	Y+54, r25	; 0x36
    2450:	af ab       	std	Y+55, r26	; 0x37
    2452:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	6d a9       	ldd	r22, Y+53	; 0x35
    2456:	7e a9       	ldd	r23, Y+54	; 0x36
    2458:	8f a9       	ldd	r24, Y+55	; 0x37
    245a:	98 ad       	ldd	r25, Y+56	; 0x38
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a e7       	ldi	r20, 0x7A	; 122
    2462:	53 e4       	ldi	r21, 0x43	; 67
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	89 ab       	std	Y+49, r24	; 0x31
    246e:	9a ab       	std	Y+50, r25	; 0x32
    2470:	ab ab       	std	Y+51, r26	; 0x33
    2472:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2474:	69 a9       	ldd	r22, Y+49	; 0x31
    2476:	7a a9       	ldd	r23, Y+50	; 0x32
    2478:	8b a9       	ldd	r24, Y+51	; 0x33
    247a:	9c a9       	ldd	r25, Y+52	; 0x34
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <H_LCD_void_latchByte+0xd2>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	98 ab       	std	Y+48, r25	; 0x30
    2492:	8f a7       	std	Y+47, r24	; 0x2f
    2494:	3f c0       	rjmp	.+126    	; 0x2514 <H_LCD_void_latchByte+0x150>
	else if (__tmp > 65535)
    2496:	69 a9       	ldd	r22, Y+49	; 0x31
    2498:	7a a9       	ldd	r23, Y+50	; 0x32
    249a:	8b a9       	ldd	r24, Y+51	; 0x33
    249c:	9c a9       	ldd	r25, Y+52	; 0x34
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	4c f5       	brge	.+82     	; 0x2500 <H_LCD_void_latchByte+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6d a9       	ldd	r22, Y+53	; 0x35
    24b0:	7e a9       	ldd	r23, Y+54	; 0x36
    24b2:	8f a9       	ldd	r24, Y+55	; 0x37
    24b4:	98 ad       	ldd	r25, Y+56	; 0x38
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	98 ab       	std	Y+48, r25	; 0x30
    24d4:	8f a7       	std	Y+47, r24	; 0x2f
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <H_LCD_void_latchByte+0x132>
    24d8:	89 e1       	ldi	r24, 0x19	; 25
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9e a7       	std	Y+46, r25	; 0x2e
    24de:	8d a7       	std	Y+45, r24	; 0x2d
    24e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <H_LCD_void_latchByte+0x120>
    24e8:	9e a7       	std	Y+46, r25	; 0x2e
    24ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ee:	98 a9       	ldd	r25, Y+48	; 0x30
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	98 ab       	std	Y+48, r25	; 0x30
    24f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f8:	98 a9       	ldd	r25, Y+48	; 0x30
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	69 f7       	brne	.-38     	; 0x24d8 <H_LCD_void_latchByte+0x114>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <H_LCD_void_latchByte+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	69 a9       	ldd	r22, Y+49	; 0x31
    2502:	7a a9       	ldd	r23, Y+50	; 0x32
    2504:	8b a9       	ldd	r24, Y+51	; 0x33
    2506:	9c a9       	ldd	r25, Y+52	; 0x34
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	98 ab       	std	Y+48, r25	; 0x30
    2512:	8f a7       	std	Y+47, r24	; 0x2f
    2514:	8f a5       	ldd	r24, Y+47	; 0x2f
    2516:	98 a9       	ldd	r25, Y+48	; 0x30
    2518:	9c a7       	std	Y+44, r25	; 0x2c
    251a:	8b a7       	std	Y+43, r24	; 0x2b
    251c:	8b a5       	ldd	r24, Y+43	; 0x2b
    251e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <H_LCD_void_latchByte+0x15c>
    2524:	9c a7       	std	Y+44, r25	; 0x2c
    2526:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
    2528:	89 e3       	ldi	r24, 0x39	; 57
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	64 e0       	ldi	r22, 0x04	; 4
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	a0 e8       	ldi	r26, 0x80	; 128
    253a:	bf e3       	ldi	r27, 0x3F	; 63
    253c:	8f a3       	std	Y+39, r24	; 0x27
    253e:	98 a7       	std	Y+40, r25	; 0x28
    2540:	a9 a7       	std	Y+41, r26	; 0x29
    2542:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6f a1       	ldd	r22, Y+39	; 0x27
    2546:	78 a5       	ldd	r23, Y+40	; 0x28
    2548:	89 a5       	ldd	r24, Y+41	; 0x29
    254a:	9a a5       	ldd	r25, Y+42	; 0x2a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a e7       	ldi	r20, 0x7A	; 122
    2552:	53 e4       	ldi	r21, 0x43	; 67
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	8b a3       	std	Y+35, r24	; 0x23
    255e:	9c a3       	std	Y+36, r25	; 0x24
    2560:	ad a3       	std	Y+37, r26	; 0x25
    2562:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2564:	6b a1       	ldd	r22, Y+35	; 0x23
    2566:	7c a1       	ldd	r23, Y+36	; 0x24
    2568:	8d a1       	ldd	r24, Y+37	; 0x25
    256a:	9e a1       	ldd	r25, Y+38	; 0x26
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	2c f4       	brge	.+10     	; 0x2586 <H_LCD_void_latchByte+0x1c2>
		__ticks = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9a a3       	std	Y+34, r25	; 0x22
    2582:	89 a3       	std	Y+33, r24	; 0x21
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <H_LCD_void_latchByte+0x240>
	else if (__tmp > 65535)
    2586:	6b a1       	ldd	r22, Y+35	; 0x23
    2588:	7c a1       	ldd	r23, Y+36	; 0x24
    258a:	8d a1       	ldd	r24, Y+37	; 0x25
    258c:	9e a1       	ldd	r25, Y+38	; 0x26
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	4c f5       	brge	.+82     	; 0x25f0 <H_LCD_void_latchByte+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	6f a1       	ldd	r22, Y+39	; 0x27
    25a0:	78 a5       	ldd	r23, Y+40	; 0x28
    25a2:	89 a5       	ldd	r24, Y+41	; 0x29
    25a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <H_LCD_void_latchByte+0x222>
    25c8:	89 e1       	ldi	r24, 0x19	; 25
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	98 a3       	std	Y+32, r25	; 0x20
    25ce:	8f 8f       	std	Y+31, r24	; 0x1f
    25d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d2:	98 a1       	ldd	r25, Y+32	; 0x20
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <H_LCD_void_latchByte+0x210>
    25d8:	98 a3       	std	Y+32, r25	; 0x20
    25da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	9a a3       	std	Y+34, r25	; 0x22
    25e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	89 a1       	ldd	r24, Y+33	; 0x21
    25e8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <H_LCD_void_latchByte+0x204>
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <H_LCD_void_latchByte+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	6b a1       	ldd	r22, Y+35	; 0x23
    25f2:	7c a1       	ldd	r23, Y+36	; 0x24
    25f4:	8d a1       	ldd	r24, Y+37	; 0x25
    25f6:	9e a1       	ldd	r25, Y+38	; 0x26
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	9a a3       	std	Y+34, r25	; 0x22
    2602:	89 a3       	std	Y+33, r24	; 0x21
    2604:	89 a1       	ldd	r24, Y+33	; 0x21
    2606:	9a a1       	ldd	r25, Y+34	; 0x22
    2608:	9e 8f       	std	Y+30, r25	; 0x1e
    260a:	8d 8f       	std	Y+29, r24	; 0x1d
    260c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <H_LCD_void_latchByte+0x24c>
    2614:	9e 8f       	std	Y+30, r25	; 0x1e
    2616:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_PIN7_PORT,LCD_PIN7_PIN,READBIT(copy_u8Byte,3));
    2618:	89 ad       	ldd	r24, Y+57	; 0x39
    261a:	86 95       	lsr	r24
    261c:	86 95       	lsr	r24
    261e:	86 95       	lsr	r24
    2620:	28 2f       	mov	r18, r24
    2622:	21 70       	andi	r18, 0x01	; 1
    2624:	89 e3       	ldi	r24, 0x39	; 57
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	42 2f       	mov	r20, r18
    262c:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN6_PORT,LCD_PIN6_PIN,READBIT(copy_u8Byte,2));
    2630:	89 ad       	ldd	r24, Y+57	; 0x39
    2632:	86 95       	lsr	r24
    2634:	86 95       	lsr	r24
    2636:	28 2f       	mov	r18, r24
    2638:	21 70       	andi	r18, 0x01	; 1
    263a:	89 e3       	ldi	r24, 0x39	; 57
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	61 e0       	ldi	r22, 0x01	; 1
    2640:	42 2f       	mov	r20, r18
    2642:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN5_PORT,LCD_PIN5_PIN,READBIT(copy_u8Byte,1));
    2646:	89 ad       	ldd	r24, Y+57	; 0x39
    2648:	86 95       	lsr	r24
    264a:	28 2f       	mov	r18, r24
    264c:	21 70       	andi	r18, 0x01	; 1
    264e:	89 e3       	ldi	r24, 0x39	; 57
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	62 e0       	ldi	r22, 0x02	; 2
    2654:	42 2f       	mov	r20, r18
    2656:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PIN4_PORT,LCD_PIN4_PIN,READBIT(copy_u8Byte,0));
    265a:	89 ad       	ldd	r24, Y+57	; 0x39
    265c:	28 2f       	mov	r18, r24
    265e:	21 70       	andi	r18, 0x01	; 1
    2660:	89 e3       	ldi	r24, 0x39	; 57
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	63 e0       	ldi	r22, 0x03	; 3
    2666:	42 2f       	mov	r20, r18
    2668:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(EN_PORT,EN_PIN,1);
    266c:	89 e3       	ldi	r24, 0x39	; 57
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	64 e0       	ldi	r22, 0x04	; 4
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	a0 e8       	ldi	r26, 0x80	; 128
    267e:	bf e3       	ldi	r27, 0x3F	; 63
    2680:	89 8f       	std	Y+25, r24	; 0x19
    2682:	9a 8f       	std	Y+26, r25	; 0x1a
    2684:	ab 8f       	std	Y+27, r26	; 0x1b
    2686:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2688:	69 8d       	ldd	r22, Y+25	; 0x19
    268a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	4a e7       	ldi	r20, 0x7A	; 122
    2696:	53 e4       	ldi	r21, 0x43	; 67
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	8d 8b       	std	Y+21, r24	; 0x15
    26a2:	9e 8b       	std	Y+22, r25	; 0x16
    26a4:	af 8b       	std	Y+23, r26	; 0x17
    26a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26a8:	6d 89       	ldd	r22, Y+21	; 0x15
    26aa:	7e 89       	ldd	r23, Y+22	; 0x16
    26ac:	8f 89       	ldd	r24, Y+23	; 0x17
    26ae:	98 8d       	ldd	r25, Y+24	; 0x18
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26bc:	88 23       	and	r24, r24
    26be:	2c f4       	brge	.+10     	; 0x26ca <H_LCD_void_latchByte+0x306>
		__ticks = 1;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	3f c0       	rjmp	.+126    	; 0x2748 <H_LCD_void_latchByte+0x384>
	else if (__tmp > 65535)
    26ca:	6d 89       	ldd	r22, Y+21	; 0x15
    26cc:	7e 89       	ldd	r23, Y+22	; 0x16
    26ce:	8f 89       	ldd	r24, Y+23	; 0x17
    26d0:	98 8d       	ldd	r25, Y+24	; 0x18
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	4c f5       	brge	.+82     	; 0x2734 <H_LCD_void_latchByte+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	69 8d       	ldd	r22, Y+25	; 0x19
    26e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9c 8b       	std	Y+20, r25	; 0x14
    2708:	8b 8b       	std	Y+19, r24	; 0x13
    270a:	0f c0       	rjmp	.+30     	; 0x272a <H_LCD_void_latchByte+0x366>
    270c:	89 e1       	ldi	r24, 0x19	; 25
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9a 8b       	std	Y+18, r25	; 0x12
    2712:	89 8b       	std	Y+17, r24	; 0x11
    2714:	89 89       	ldd	r24, Y+17	; 0x11
    2716:	9a 89       	ldd	r25, Y+18	; 0x12
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <H_LCD_void_latchByte+0x354>
    271c:	9a 8b       	std	Y+18, r25	; 0x12
    271e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	9c 89       	ldd	r25, Y+20	; 0x14
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9c 8b       	std	Y+20, r25	; 0x14
    2728:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8b 89       	ldd	r24, Y+19	; 0x13
    272c:	9c 89       	ldd	r25, Y+20	; 0x14
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <H_LCD_void_latchByte+0x348>
    2732:	14 c0       	rjmp	.+40     	; 0x275c <H_LCD_void_latchByte+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	6d 89       	ldd	r22, Y+21	; 0x15
    2736:	7e 89       	ldd	r23, Y+22	; 0x16
    2738:	8f 89       	ldd	r24, Y+23	; 0x17
    273a:	98 8d       	ldd	r25, Y+24	; 0x18
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9c 8b       	std	Y+20, r25	; 0x14
    2746:	8b 8b       	std	Y+19, r24	; 0x13
    2748:	8b 89       	ldd	r24, Y+19	; 0x13
    274a:	9c 89       	ldd	r25, Y+20	; 0x14
    274c:	98 8b       	std	Y+16, r25	; 0x10
    274e:	8f 87       	std	Y+15, r24	; 0x0f
    2750:	8f 85       	ldd	r24, Y+15	; 0x0f
    2752:	98 89       	ldd	r25, Y+16	; 0x10
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <H_LCD_void_latchByte+0x390>
    2758:	98 8b       	std	Y+16, r25	; 0x10
    275a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
    275c:	89 e3       	ldi	r24, 0x39	; 57
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	64 e0       	ldi	r22, 0x04	; 4
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 e8       	ldi	r26, 0x80	; 128
    276e:	bf e3       	ldi	r27, 0x3F	; 63
    2770:	8b 87       	std	Y+11, r24	; 0x0b
    2772:	9c 87       	std	Y+12, r25	; 0x0c
    2774:	ad 87       	std	Y+13, r26	; 0x0d
    2776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6b 85       	ldd	r22, Y+11	; 0x0b
    277a:	7c 85       	ldd	r23, Y+12	; 0x0c
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	53 e4       	ldi	r21, 0x43	; 67
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8f 83       	std	Y+7, r24	; 0x07
    2792:	98 87       	std	Y+8, r25	; 0x08
    2794:	a9 87       	std	Y+9, r26	; 0x09
    2796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <H_LCD_void_latchByte+0x3f6>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <H_LCD_void_latchByte+0x474>
	else if (__tmp > 65535)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <H_LCD_void_latchByte+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <H_LCD_void_latchByte+0x456>
    27fc:	89 e1       	ldi	r24, 0x19	; 25
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <H_LCD_void_latchByte+0x444>
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <H_LCD_void_latchByte+0x438>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <H_LCD_void_latchByte+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <H_LCD_void_latchByte+0x480>
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT,EN_PIN,0);
	_delay_ms(1);
#endif

}
    284c:	e9 96       	adiw	r28, 0x39	; 57
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <LED_on>:
 */
#include"LED.h"
#include"GPIO.h"

void LED_on(GPIO_REGISTERS* reg, u8 pin_num)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <LED_on+0x6>
    2864:	0f 92       	push	r0
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(reg, pin_num, OUTPUT);
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	6b 81       	ldd	r22, Y+3	; 0x03
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(reg, pin_num, LOGIC_HIGH);
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	6b 81       	ldd	r22, Y+3	; 0x03
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <LED_off>:
void LED_off(GPIO_REGISTERS* reg, u8 pin_num)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <LED_off+0x6>
    289a:	0f 92       	push	r0
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(reg, pin_num, OUTPUT);
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	6b 81       	ldd	r22, Y+3	; 0x03
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(reg, pin_num, LOGIC_LOW);
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	6b 81       	ldd	r22, Y+3	; 0x03
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>

}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <RELAY_init>:

/**
 * Initialize relay control pin.
 */
void RELAY_init ( )
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(RELAY_PORT, RELAY_PIN, OUTPUT);
    28d2:	83 e3       	ldi	r24, 0x33	; 51
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	67 e0       	ldi	r22, 0x07	; 7
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>

	/*turn off relay initialy*/
	RELAY_off();
    28de:	0e 94 81 14 	call	0x2902	; 0x2902 <RELAY_off>
}
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <RELAY_on>:

/**
 * Turn on the relay.
 */
void RELAY_on ( )
{
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(RELAY_PORT, RELAY_PIN, LOGIC_HIGH);
    28f0:	83 e3       	ldi	r24, 0x33	; 51
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	67 e0       	ldi	r22, 0x07	; 7
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
}
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <RELAY_off>:

/**
 * Turn off the relay.
 */
void RELAY_off ( )
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(RELAY_PORT, RELAY_PIN, LOGIC_LOW);
    290a:	83 e3       	ldi	r24, 0x33	; 51
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	67 e0       	ldi	r22, 0x07	; 7
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
}
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <TIMER1_Init>:
u16 timer1RemCounter = 0;

void(*timer1PtrCallBack)(void) = NULL;

void TIMER1_Init(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	00 d0       	rcall	.+0      	; 0x2922 <TIMER1_Init+0x6>
    2922:	00 d0       	rcall	.+0      	; 0x2924 <TIMER1_Init+0x8>
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	84 81       	ldd	r24, Z+4	; 0x04
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	3c 83       	std	Y+4, r19	; 0x04
    2938:	2b 83       	std	Y+3, r18	; 0x03
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	87 30       	cpi	r24, 0x07	; 7
    2940:	91 05       	cpc	r25, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <TIMER1_Init+0x2a>
    2944:	bd c2       	rjmp	.+1402   	; 0x2ec0 <TIMER1_Init+0x5a4>
    2946:	2b 81       	ldd	r18, Y+3	; 0x03
    2948:	3c 81       	ldd	r19, Y+4	; 0x04
    294a:	28 30       	cpi	r18, 0x08	; 8
    294c:	31 05       	cpc	r19, r1
    294e:	4c f5       	brge	.+82     	; 0x29a2 <TIMER1_Init+0x86>
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	83 30       	cpi	r24, 0x03	; 3
    2956:	91 05       	cpc	r25, r1
    2958:	09 f4       	brne	.+2      	; 0x295c <TIMER1_Init+0x40>
    295a:	4a c1       	rjmp	.+660    	; 0x2bf0 <TIMER1_Init+0x2d4>
    295c:	2b 81       	ldd	r18, Y+3	; 0x03
    295e:	3c 81       	ldd	r19, Y+4	; 0x04
    2960:	24 30       	cpi	r18, 0x04	; 4
    2962:	31 05       	cpc	r19, r1
    2964:	8c f4       	brge	.+34     	; 0x2988 <TIMER1_Init+0x6c>
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	91 05       	cpc	r25, r1
    296e:	09 f4       	brne	.+2      	; 0x2972 <TIMER1_Init+0x56>
    2970:	9d c0       	rjmp	.+314    	; 0x2aac <TIMER1_Init+0x190>
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	3c 81       	ldd	r19, Y+4	; 0x04
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	0c f0       	brlt	.+2      	; 0x297e <TIMER1_Init+0x62>
    297c:	df c0       	rjmp	.+446    	; 0x2b3c <TIMER1_Init+0x220>
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	c9 f1       	breq	.+114    	; 0x29f8 <TIMER1_Init+0xdc>
    2986:	6b c5       	rjmp	.+2774   	; 0x345e <TIMER1_Init+0xb42>
    2988:	2b 81       	ldd	r18, Y+3	; 0x03
    298a:	3c 81       	ldd	r19, Y+4	; 0x04
    298c:	25 30       	cpi	r18, 0x05	; 5
    298e:	31 05       	cpc	r19, r1
    2990:	09 f4       	brne	.+2      	; 0x2994 <TIMER1_Init+0x78>
    2992:	e2 c1       	rjmp	.+964    	; 0x2d58 <TIMER1_Init+0x43c>
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	86 30       	cpi	r24, 0x06	; 6
    299a:	91 05       	cpc	r25, r1
    299c:	0c f0       	brlt	.+2      	; 0x29a0 <TIMER1_Init+0x84>
    299e:	36 c2       	rjmp	.+1132   	; 0x2e0c <TIMER1_Init+0x4f0>
    29a0:	81 c1       	rjmp	.+770    	; 0x2ca4 <TIMER1_Init+0x388>
    29a2:	2b 81       	ldd	r18, Y+3	; 0x03
    29a4:	3c 81       	ldd	r19, Y+4	; 0x04
    29a6:	2b 30       	cpi	r18, 0x0B	; 11
    29a8:	31 05       	cpc	r19, r1
    29aa:	09 f4       	brne	.+2      	; 0x29ae <TIMER1_Init+0x92>
    29ac:	f1 c3       	rjmp	.+2018   	; 0x3190 <TIMER1_Init+0x874>
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	8c 30       	cpi	r24, 0x0C	; 12
    29b4:	91 05       	cpc	r25, r1
    29b6:	6c f4       	brge	.+26     	; 0x29d2 <TIMER1_Init+0xb6>
    29b8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ba:	3c 81       	ldd	r19, Y+4	; 0x04
    29bc:	29 30       	cpi	r18, 0x09	; 9
    29be:	31 05       	cpc	r19, r1
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <TIMER1_Init+0xa8>
    29c2:	32 c3       	rjmp	.+1636   	; 0x3028 <TIMER1_Init+0x70c>
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	8a 30       	cpi	r24, 0x0A	; 10
    29ca:	91 05       	cpc	r25, r1
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <TIMER1_Init+0xb4>
    29ce:	86 c3       	rjmp	.+1804   	; 0x30dc <TIMER1_Init+0x7c0>
    29d0:	d1 c2       	rjmp	.+1442   	; 0x2f74 <TIMER1_Init+0x658>
    29d2:	2b 81       	ldd	r18, Y+3	; 0x03
    29d4:	3c 81       	ldd	r19, Y+4	; 0x04
    29d6:	2e 30       	cpi	r18, 0x0E	; 14
    29d8:	31 05       	cpc	r19, r1
    29da:	09 f4       	brne	.+2      	; 0x29de <TIMER1_Init+0xc2>
    29dc:	8d c4       	rjmp	.+2330   	; 0x32f8 <TIMER1_Init+0x9dc>
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	8f 30       	cpi	r24, 0x0F	; 15
    29e4:	91 05       	cpc	r25, r1
    29e6:	09 f4       	brne	.+2      	; 0x29ea <TIMER1_Init+0xce>
    29e8:	e1 c4       	rjmp	.+2498   	; 0x33ac <TIMER1_Init+0xa90>
    29ea:	2b 81       	ldd	r18, Y+3	; 0x03
    29ec:	3c 81       	ldd	r19, Y+4	; 0x04
    29ee:	2c 30       	cpi	r18, 0x0C	; 12
    29f0:	31 05       	cpc	r19, r1
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <TIMER1_Init+0xda>
    29f4:	27 c4       	rjmp	.+2126   	; 0x3244 <TIMER1_Init+0x928>
    29f6:	33 c5       	rjmp	.+2662   	; 0x345e <TIMER1_Init+0xb42>
	{
	case TIMER1_NORMAL_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_HIGH;
    29f8:	ef e4       	ldi	r30, 0x4F	; 79
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	88 60       	ori	r24, 0x08	; 8
    2a00:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_HIGH;
    2a02:	ef e4       	ldi	r30, 0x4F	; 79
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	84 60       	ori	r24, 0x04	; 4
    2a0a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2a0c:	af e4       	ldi	r26, 0x4F	; 79
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	80 81       	ld	r24, Z
    2a16:	86 95       	lsr	r24
    2a18:	81 70       	andi	r24, 0x01	; 1
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	97 95       	ror	r25
    2a1e:	99 27       	eor	r25, r25
    2a20:	97 95       	ror	r25
    2a22:	8c 91       	ld	r24, X
    2a24:	8f 77       	andi	r24, 0x7F	; 127
    2a26:	89 2b       	or	r24, r25
    2a28:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2a2a:	af e4       	ldi	r26, 0x4F	; 79
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	80 81       	ld	r24, Z
    2a34:	81 70       	andi	r24, 0x01	; 1
    2a36:	81 70       	andi	r24, 0x01	; 1
    2a38:	98 2f       	mov	r25, r24
    2a3a:	92 95       	swap	r25
    2a3c:	99 0f       	add	r25, r25
    2a3e:	99 0f       	add	r25, r25
    2a40:	90 7c       	andi	r25, 0xC0	; 192
    2a42:	8c 91       	ld	r24, X
    2a44:	8f 7b       	andi	r24, 0xBF	; 191
    2a46:	89 2b       	or	r24, r25
    2a48:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2a4a:	af e4       	ldi	r26, 0x4F	; 79
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a50:	fa 81       	ldd	r31, Y+2	; 0x02
    2a52:	80 81       	ld	r24, Z
    2a54:	86 95       	lsr	r24
    2a56:	81 70       	andi	r24, 0x01	; 1
    2a58:	81 70       	andi	r24, 0x01	; 1
    2a5a:	98 2f       	mov	r25, r24
    2a5c:	92 95       	swap	r25
    2a5e:	99 0f       	add	r25, r25
    2a60:	90 7e       	andi	r25, 0xE0	; 224
    2a62:	8c 91       	ld	r24, X
    2a64:	8f 7d       	andi	r24, 0xDF	; 223
    2a66:	89 2b       	or	r24, r25
    2a68:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2a6a:	af e4       	ldi	r26, 0x4F	; 79
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	80 81       	ld	r24, Z
    2a74:	81 70       	andi	r24, 0x01	; 1
    2a76:	81 70       	andi	r24, 0x01	; 1
    2a78:	98 2f       	mov	r25, r24
    2a7a:	92 95       	swap	r25
    2a7c:	90 7f       	andi	r25, 0xF0	; 240
    2a7e:	8c 91       	ld	r24, X
    2a80:	8f 7e       	andi	r24, 0xEF	; 239
    2a82:	89 2b       	or	r24, r25
    2a84:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2a86:	aa e4       	ldi	r26, 0x4A	; 74
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8e:	87 81       	ldd	r24, Z+7	; 0x07
    2a90:	90 85       	ldd	r25, Z+8	; 0x08
    2a92:	11 96       	adiw	r26, 0x01	; 1
    2a94:	9c 93       	st	X, r25
    2a96:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2a98:	a8 e4       	ldi	r26, 0x48	; 72
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa0:	87 81       	ldd	r24, Z+7	; 0x07
    2aa2:	90 85       	ldd	r25, Z+8	; 0x08
    2aa4:	11 96       	adiw	r26, 0x01	; 1
    2aa6:	9c 93       	st	X, r25
    2aa8:	8e 93       	st	-X, r24
    2aaa:	d9 c4       	rjmp	.+2482   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_8bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2aac:	ef e4       	ldi	r30, 0x4F	; 79
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	87 7f       	andi	r24, 0xF7	; 247
    2ab4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2ab6:	ef e4       	ldi	r30, 0x4F	; 79
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8b 7f       	andi	r24, 0xFB	; 251
    2abe:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2ac0:	af e4       	ldi	r26, 0x4F	; 79
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	86 95       	lsr	r24
    2acc:	81 70       	andi	r24, 0x01	; 1
    2ace:	98 2f       	mov	r25, r24
    2ad0:	97 95       	ror	r25
    2ad2:	99 27       	eor	r25, r25
    2ad4:	97 95       	ror	r25
    2ad6:	8c 91       	ld	r24, X
    2ad8:	8f 77       	andi	r24, 0x7F	; 127
    2ada:	89 2b       	or	r24, r25
    2adc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2ade:	af e4       	ldi	r26, 0x4F	; 79
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	81 70       	andi	r24, 0x01	; 1
    2aea:	81 70       	andi	r24, 0x01	; 1
    2aec:	98 2f       	mov	r25, r24
    2aee:	92 95       	swap	r25
    2af0:	99 0f       	add	r25, r25
    2af2:	99 0f       	add	r25, r25
    2af4:	90 7c       	andi	r25, 0xC0	; 192
    2af6:	8c 91       	ld	r24, X
    2af8:	8f 7b       	andi	r24, 0xBF	; 191
    2afa:	89 2b       	or	r24, r25
    2afc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2afe:	af e4       	ldi	r26, 0x4F	; 79
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	86 95       	lsr	r24
    2b0a:	81 70       	andi	r24, 0x01	; 1
    2b0c:	81 70       	andi	r24, 0x01	; 1
    2b0e:	98 2f       	mov	r25, r24
    2b10:	92 95       	swap	r25
    2b12:	99 0f       	add	r25, r25
    2b14:	90 7e       	andi	r25, 0xE0	; 224
    2b16:	8c 91       	ld	r24, X
    2b18:	8f 7d       	andi	r24, 0xDF	; 223
    2b1a:	89 2b       	or	r24, r25
    2b1c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2b1e:	af e4       	ldi	r26, 0x4F	; 79
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e9 81       	ldd	r30, Y+1	; 0x01
    2b24:	fa 81       	ldd	r31, Y+2	; 0x02
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	81 70       	andi	r24, 0x01	; 1
    2b2a:	81 70       	andi	r24, 0x01	; 1
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	92 95       	swap	r25
    2b30:	90 7f       	andi	r25, 0xF0	; 240
    2b32:	8c 91       	ld	r24, X
    2b34:	8f 7e       	andi	r24, 0xEF	; 239
    2b36:	89 2b       	or	r24, r25
    2b38:	8c 93       	st	X, r24
    2b3a:	91 c4       	rjmp	.+2338   	; 0x345e <TIMER1_Init+0xb42>
		//		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
		//		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
		break;
	case TIMER1_PHASE_CORRECT_PWM_9bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2b3c:	ef e4       	ldi	r30, 0x4F	; 79
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	87 7f       	andi	r24, 0xF7	; 247
    2b44:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2b46:	ef e4       	ldi	r30, 0x4F	; 79
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8b 7f       	andi	r24, 0xFB	; 251
    2b4e:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2b50:	af e4       	ldi	r26, 0x4F	; 79
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e9 81       	ldd	r30, Y+1	; 0x01
    2b56:	fa 81       	ldd	r31, Y+2	; 0x02
    2b58:	82 81       	ldd	r24, Z+2	; 0x02
    2b5a:	86 95       	lsr	r24
    2b5c:	81 70       	andi	r24, 0x01	; 1
    2b5e:	98 2f       	mov	r25, r24
    2b60:	97 95       	ror	r25
    2b62:	99 27       	eor	r25, r25
    2b64:	97 95       	ror	r25
    2b66:	8c 91       	ld	r24, X
    2b68:	8f 77       	andi	r24, 0x7F	; 127
    2b6a:	89 2b       	or	r24, r25
    2b6c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2b6e:	af e4       	ldi	r26, 0x4F	; 79
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e9 81       	ldd	r30, Y+1	; 0x01
    2b74:	fa 81       	ldd	r31, Y+2	; 0x02
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	81 70       	andi	r24, 0x01	; 1
    2b7a:	81 70       	andi	r24, 0x01	; 1
    2b7c:	98 2f       	mov	r25, r24
    2b7e:	92 95       	swap	r25
    2b80:	99 0f       	add	r25, r25
    2b82:	99 0f       	add	r25, r25
    2b84:	90 7c       	andi	r25, 0xC0	; 192
    2b86:	8c 91       	ld	r24, X
    2b88:	8f 7b       	andi	r24, 0xBF	; 191
    2b8a:	89 2b       	or	r24, r25
    2b8c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2b8e:	af e4       	ldi	r26, 0x4F	; 79
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e9 81       	ldd	r30, Y+1	; 0x01
    2b94:	fa 81       	ldd	r31, Y+2	; 0x02
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	86 95       	lsr	r24
    2b9a:	81 70       	andi	r24, 0x01	; 1
    2b9c:	81 70       	andi	r24, 0x01	; 1
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	92 95       	swap	r25
    2ba2:	99 0f       	add	r25, r25
    2ba4:	90 7e       	andi	r25, 0xE0	; 224
    2ba6:	8c 91       	ld	r24, X
    2ba8:	8f 7d       	andi	r24, 0xDF	; 223
    2baa:	89 2b       	or	r24, r25
    2bac:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2bae:	af e4       	ldi	r26, 0x4F	; 79
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	82 81       	ldd	r24, Z+2	; 0x02
    2bb8:	81 70       	andi	r24, 0x01	; 1
    2bba:	81 70       	andi	r24, 0x01	; 1
    2bbc:	98 2f       	mov	r25, r24
    2bbe:	92 95       	swap	r25
    2bc0:	90 7f       	andi	r25, 0xF0	; 240
    2bc2:	8c 91       	ld	r24, X
    2bc4:	8f 7e       	andi	r24, 0xEF	; 239
    2bc6:	89 2b       	or	r24, r25
    2bc8:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2bca:	aa e4       	ldi	r26, 0x4A	; 74
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd2:	87 81       	ldd	r24, Z+7	; 0x07
    2bd4:	90 85       	ldd	r25, Z+8	; 0x08
    2bd6:	11 96       	adiw	r26, 0x01	; 1
    2bd8:	9c 93       	st	X, r25
    2bda:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2bdc:	a8 e4       	ldi	r26, 0x48	; 72
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e9 81       	ldd	r30, Y+1	; 0x01
    2be2:	fa 81       	ldd	r31, Y+2	; 0x02
    2be4:	87 81       	ldd	r24, Z+7	; 0x07
    2be6:	90 85       	ldd	r25, Z+8	; 0x08
    2be8:	11 96       	adiw	r26, 0x01	; 1
    2bea:	9c 93       	st	X, r25
    2bec:	8e 93       	st	-X, r24
    2bee:	37 c4       	rjmp	.+2158   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_10bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2bf0:	ef e4       	ldi	r30, 0x4F	; 79
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	87 7f       	andi	r24, 0xF7	; 247
    2bf8:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2bfa:	ef e4       	ldi	r30, 0x4F	; 79
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8b 7f       	andi	r24, 0xFB	; 251
    2c02:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2c04:	af e4       	ldi	r26, 0x4F	; 79
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	86 95       	lsr	r24
    2c10:	81 70       	andi	r24, 0x01	; 1
    2c12:	98 2f       	mov	r25, r24
    2c14:	97 95       	ror	r25
    2c16:	99 27       	eor	r25, r25
    2c18:	97 95       	ror	r25
    2c1a:	8c 91       	ld	r24, X
    2c1c:	8f 77       	andi	r24, 0x7F	; 127
    2c1e:	89 2b       	or	r24, r25
    2c20:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2c22:	af e4       	ldi	r26, 0x4F	; 79
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e9 81       	ldd	r30, Y+1	; 0x01
    2c28:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	81 70       	andi	r24, 0x01	; 1
    2c2e:	81 70       	andi	r24, 0x01	; 1
    2c30:	98 2f       	mov	r25, r24
    2c32:	92 95       	swap	r25
    2c34:	99 0f       	add	r25, r25
    2c36:	99 0f       	add	r25, r25
    2c38:	90 7c       	andi	r25, 0xC0	; 192
    2c3a:	8c 91       	ld	r24, X
    2c3c:	8f 7b       	andi	r24, 0xBF	; 191
    2c3e:	89 2b       	or	r24, r25
    2c40:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2c42:	af e4       	ldi	r26, 0x4F	; 79
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	86 95       	lsr	r24
    2c4e:	81 70       	andi	r24, 0x01	; 1
    2c50:	81 70       	andi	r24, 0x01	; 1
    2c52:	98 2f       	mov	r25, r24
    2c54:	92 95       	swap	r25
    2c56:	99 0f       	add	r25, r25
    2c58:	90 7e       	andi	r25, 0xE0	; 224
    2c5a:	8c 91       	ld	r24, X
    2c5c:	8f 7d       	andi	r24, 0xDF	; 223
    2c5e:	89 2b       	or	r24, r25
    2c60:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2c62:	af e4       	ldi	r26, 0x4F	; 79
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e9 81       	ldd	r30, Y+1	; 0x01
    2c68:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	81 70       	andi	r24, 0x01	; 1
    2c6e:	81 70       	andi	r24, 0x01	; 1
    2c70:	98 2f       	mov	r25, r24
    2c72:	92 95       	swap	r25
    2c74:	90 7f       	andi	r25, 0xF0	; 240
    2c76:	8c 91       	ld	r24, X
    2c78:	8f 7e       	andi	r24, 0xEF	; 239
    2c7a:	89 2b       	or	r24, r25
    2c7c:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2c7e:	aa e4       	ldi	r26, 0x4A	; 74
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e9 81       	ldd	r30, Y+1	; 0x01
    2c84:	fa 81       	ldd	r31, Y+2	; 0x02
    2c86:	87 81       	ldd	r24, Z+7	; 0x07
    2c88:	90 85       	ldd	r25, Z+8	; 0x08
    2c8a:	11 96       	adiw	r26, 0x01	; 1
    2c8c:	9c 93       	st	X, r25
    2c8e:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2c90:	a8 e4       	ldi	r26, 0x48	; 72
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e9 81       	ldd	r30, Y+1	; 0x01
    2c96:	fa 81       	ldd	r31, Y+2	; 0x02
    2c98:	87 81       	ldd	r24, Z+7	; 0x07
    2c9a:	90 85       	ldd	r25, Z+8	; 0x08
    2c9c:	11 96       	adiw	r26, 0x01	; 1
    2c9e:	9c 93       	st	X, r25
    2ca0:	8e 93       	st	-X, r24
    2ca2:	dd c3       	rjmp	.+1978   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_CTC_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2ca4:	ef e4       	ldi	r30, 0x4F	; 79
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	87 7f       	andi	r24, 0xF7	; 247
    2cac:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2cae:	ef e4       	ldi	r30, 0x4F	; 79
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	8b 7f       	andi	r24, 0xFB	; 251
    2cb6:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2cb8:	af e4       	ldi	r26, 0x4F	; 79
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc0:	80 81       	ld	r24, Z
    2cc2:	86 95       	lsr	r24
    2cc4:	81 70       	andi	r24, 0x01	; 1
    2cc6:	98 2f       	mov	r25, r24
    2cc8:	97 95       	ror	r25
    2cca:	99 27       	eor	r25, r25
    2ccc:	97 95       	ror	r25
    2cce:	8c 91       	ld	r24, X
    2cd0:	8f 77       	andi	r24, 0x7F	; 127
    2cd2:	89 2b       	or	r24, r25
    2cd4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2cd6:	af e4       	ldi	r26, 0x4F	; 79
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	80 81       	ld	r24, Z
    2ce0:	81 70       	andi	r24, 0x01	; 1
    2ce2:	81 70       	andi	r24, 0x01	; 1
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	92 95       	swap	r25
    2ce8:	99 0f       	add	r25, r25
    2cea:	99 0f       	add	r25, r25
    2cec:	90 7c       	andi	r25, 0xC0	; 192
    2cee:	8c 91       	ld	r24, X
    2cf0:	8f 7b       	andi	r24, 0xBF	; 191
    2cf2:	89 2b       	or	r24, r25
    2cf4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2cf6:	af e4       	ldi	r26, 0x4F	; 79
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfe:	80 81       	ld	r24, Z
    2d00:	86 95       	lsr	r24
    2d02:	81 70       	andi	r24, 0x01	; 1
    2d04:	81 70       	andi	r24, 0x01	; 1
    2d06:	98 2f       	mov	r25, r24
    2d08:	92 95       	swap	r25
    2d0a:	99 0f       	add	r25, r25
    2d0c:	90 7e       	andi	r25, 0xE0	; 224
    2d0e:	8c 91       	ld	r24, X
    2d10:	8f 7d       	andi	r24, 0xDF	; 223
    2d12:	89 2b       	or	r24, r25
    2d14:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2d16:	af e4       	ldi	r26, 0x4F	; 79
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1e:	80 81       	ld	r24, Z
    2d20:	81 70       	andi	r24, 0x01	; 1
    2d22:	81 70       	andi	r24, 0x01	; 1
    2d24:	98 2f       	mov	r25, r24
    2d26:	92 95       	swap	r25
    2d28:	90 7f       	andi	r25, 0xF0	; 240
    2d2a:	8c 91       	ld	r24, X
    2d2c:	8f 7e       	andi	r24, 0xEF	; 239
    2d2e:	89 2b       	or	r24, r25
    2d30:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2d32:	aa e4       	ldi	r26, 0x4A	; 74
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e9 81       	ldd	r30, Y+1	; 0x01
    2d38:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3a:	87 81       	ldd	r24, Z+7	; 0x07
    2d3c:	90 85       	ldd	r25, Z+8	; 0x08
    2d3e:	11 96       	adiw	r26, 0x01	; 1
    2d40:	9c 93       	st	X, r25
    2d42:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2d44:	a8 e4       	ldi	r26, 0x48	; 72
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	87 81       	ldd	r24, Z+7	; 0x07
    2d4e:	90 85       	ldd	r25, Z+8	; 0x08
    2d50:	11 96       	adiw	r26, 0x01	; 1
    2d52:	9c 93       	st	X, r25
    2d54:	8e 93       	st	-X, r24
    2d56:	83 c3       	rjmp	.+1798   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_8bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2d58:	ef e4       	ldi	r30, 0x4F	; 79
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	87 7f       	andi	r24, 0xF7	; 247
    2d60:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2d62:	ef e4       	ldi	r30, 0x4F	; 79
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	8b 7f       	andi	r24, 0xFB	; 251
    2d6a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2d6c:	af e4       	ldi	r26, 0x4F	; 79
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e9 81       	ldd	r30, Y+1	; 0x01
    2d72:	fa 81       	ldd	r31, Y+2	; 0x02
    2d74:	81 81       	ldd	r24, Z+1	; 0x01
    2d76:	86 95       	lsr	r24
    2d78:	81 70       	andi	r24, 0x01	; 1
    2d7a:	98 2f       	mov	r25, r24
    2d7c:	97 95       	ror	r25
    2d7e:	99 27       	eor	r25, r25
    2d80:	97 95       	ror	r25
    2d82:	8c 91       	ld	r24, X
    2d84:	8f 77       	andi	r24, 0x7F	; 127
    2d86:	89 2b       	or	r24, r25
    2d88:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2d8a:	af e4       	ldi	r26, 0x4F	; 79
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d90:	fa 81       	ldd	r31, Y+2	; 0x02
    2d92:	81 81       	ldd	r24, Z+1	; 0x01
    2d94:	81 70       	andi	r24, 0x01	; 1
    2d96:	81 70       	andi	r24, 0x01	; 1
    2d98:	98 2f       	mov	r25, r24
    2d9a:	92 95       	swap	r25
    2d9c:	99 0f       	add	r25, r25
    2d9e:	99 0f       	add	r25, r25
    2da0:	90 7c       	andi	r25, 0xC0	; 192
    2da2:	8c 91       	ld	r24, X
    2da4:	8f 7b       	andi	r24, 0xBF	; 191
    2da6:	89 2b       	or	r24, r25
    2da8:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2daa:	af e4       	ldi	r26, 0x4F	; 79
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e9 81       	ldd	r30, Y+1	; 0x01
    2db0:	fa 81       	ldd	r31, Y+2	; 0x02
    2db2:	81 81       	ldd	r24, Z+1	; 0x01
    2db4:	86 95       	lsr	r24
    2db6:	81 70       	andi	r24, 0x01	; 1
    2db8:	81 70       	andi	r24, 0x01	; 1
    2dba:	98 2f       	mov	r25, r24
    2dbc:	92 95       	swap	r25
    2dbe:	99 0f       	add	r25, r25
    2dc0:	90 7e       	andi	r25, 0xE0	; 224
    2dc2:	8c 91       	ld	r24, X
    2dc4:	8f 7d       	andi	r24, 0xDF	; 223
    2dc6:	89 2b       	or	r24, r25
    2dc8:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2dca:	af e4       	ldi	r26, 0x4F	; 79
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd2:	81 81       	ldd	r24, Z+1	; 0x01
    2dd4:	81 70       	andi	r24, 0x01	; 1
    2dd6:	81 70       	andi	r24, 0x01	; 1
    2dd8:	98 2f       	mov	r25, r24
    2dda:	92 95       	swap	r25
    2ddc:	90 7f       	andi	r25, 0xF0	; 240
    2dde:	8c 91       	ld	r24, X
    2de0:	8f 7e       	andi	r24, 0xEF	; 239
    2de2:	89 2b       	or	r24, r25
    2de4:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2de6:	aa e4       	ldi	r26, 0x4A	; 74
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e9 81       	ldd	r30, Y+1	; 0x01
    2dec:	fa 81       	ldd	r31, Y+2	; 0x02
    2dee:	87 81       	ldd	r24, Z+7	; 0x07
    2df0:	90 85       	ldd	r25, Z+8	; 0x08
    2df2:	11 96       	adiw	r26, 0x01	; 1
    2df4:	9c 93       	st	X, r25
    2df6:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2df8:	a8 e4       	ldi	r26, 0x48	; 72
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    2e00:	87 81       	ldd	r24, Z+7	; 0x07
    2e02:	90 85       	ldd	r25, Z+8	; 0x08
    2e04:	11 96       	adiw	r26, 0x01	; 1
    2e06:	9c 93       	st	X, r25
    2e08:	8e 93       	st	-X, r24
    2e0a:	29 c3       	rjmp	.+1618   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_9bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2e0c:	ef e4       	ldi	r30, 0x4F	; 79
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	87 7f       	andi	r24, 0xF7	; 247
    2e14:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2e16:	ef e4       	ldi	r30, 0x4F	; 79
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8b 7f       	andi	r24, 0xFB	; 251
    2e1e:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2e20:	af e4       	ldi	r26, 0x4F	; 79
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	e9 81       	ldd	r30, Y+1	; 0x01
    2e26:	fa 81       	ldd	r31, Y+2	; 0x02
    2e28:	81 81       	ldd	r24, Z+1	; 0x01
    2e2a:	86 95       	lsr	r24
    2e2c:	81 70       	andi	r24, 0x01	; 1
    2e2e:	98 2f       	mov	r25, r24
    2e30:	97 95       	ror	r25
    2e32:	99 27       	eor	r25, r25
    2e34:	97 95       	ror	r25
    2e36:	8c 91       	ld	r24, X
    2e38:	8f 77       	andi	r24, 0x7F	; 127
    2e3a:	89 2b       	or	r24, r25
    2e3c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2e3e:	af e4       	ldi	r26, 0x4F	; 79
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e9 81       	ldd	r30, Y+1	; 0x01
    2e44:	fa 81       	ldd	r31, Y+2	; 0x02
    2e46:	81 81       	ldd	r24, Z+1	; 0x01
    2e48:	81 70       	andi	r24, 0x01	; 1
    2e4a:	81 70       	andi	r24, 0x01	; 1
    2e4c:	98 2f       	mov	r25, r24
    2e4e:	92 95       	swap	r25
    2e50:	99 0f       	add	r25, r25
    2e52:	99 0f       	add	r25, r25
    2e54:	90 7c       	andi	r25, 0xC0	; 192
    2e56:	8c 91       	ld	r24, X
    2e58:	8f 7b       	andi	r24, 0xBF	; 191
    2e5a:	89 2b       	or	r24, r25
    2e5c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2e5e:	af e4       	ldi	r26, 0x4F	; 79
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e9 81       	ldd	r30, Y+1	; 0x01
    2e64:	fa 81       	ldd	r31, Y+2	; 0x02
    2e66:	81 81       	ldd	r24, Z+1	; 0x01
    2e68:	86 95       	lsr	r24
    2e6a:	81 70       	andi	r24, 0x01	; 1
    2e6c:	81 70       	andi	r24, 0x01	; 1
    2e6e:	98 2f       	mov	r25, r24
    2e70:	92 95       	swap	r25
    2e72:	99 0f       	add	r25, r25
    2e74:	90 7e       	andi	r25, 0xE0	; 224
    2e76:	8c 91       	ld	r24, X
    2e78:	8f 7d       	andi	r24, 0xDF	; 223
    2e7a:	89 2b       	or	r24, r25
    2e7c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2e7e:	af e4       	ldi	r26, 0x4F	; 79
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	fa 81       	ldd	r31, Y+2	; 0x02
    2e86:	81 81       	ldd	r24, Z+1	; 0x01
    2e88:	81 70       	andi	r24, 0x01	; 1
    2e8a:	81 70       	andi	r24, 0x01	; 1
    2e8c:	98 2f       	mov	r25, r24
    2e8e:	92 95       	swap	r25
    2e90:	90 7f       	andi	r25, 0xF0	; 240
    2e92:	8c 91       	ld	r24, X
    2e94:	8f 7e       	andi	r24, 0xEF	; 239
    2e96:	89 2b       	or	r24, r25
    2e98:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2e9a:	aa e4       	ldi	r26, 0x4A	; 74
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea2:	87 81       	ldd	r24, Z+7	; 0x07
    2ea4:	90 85       	ldd	r25, Z+8	; 0x08
    2ea6:	11 96       	adiw	r26, 0x01	; 1
    2ea8:	9c 93       	st	X, r25
    2eaa:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2eac:	a8 e4       	ldi	r26, 0x48	; 72
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb4:	87 81       	ldd	r24, Z+7	; 0x07
    2eb6:	90 85       	ldd	r25, Z+8	; 0x08
    2eb8:	11 96       	adiw	r26, 0x01	; 1
    2eba:	9c 93       	st	X, r25
    2ebc:	8e 93       	st	-X, r24
    2ebe:	cf c2       	rjmp	.+1438   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_10bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2ec0:	ef e4       	ldi	r30, 0x4F	; 79
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	87 7f       	andi	r24, 0xF7	; 247
    2ec8:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2eca:	ef e4       	ldi	r30, 0x4F	; 79
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8b 7f       	andi	r24, 0xFB	; 251
    2ed2:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2ed4:	af e4       	ldi	r26, 0x4F	; 79
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	fa 81       	ldd	r31, Y+2	; 0x02
    2edc:	81 81       	ldd	r24, Z+1	; 0x01
    2ede:	86 95       	lsr	r24
    2ee0:	81 70       	andi	r24, 0x01	; 1
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	97 95       	ror	r25
    2ee6:	99 27       	eor	r25, r25
    2ee8:	97 95       	ror	r25
    2eea:	8c 91       	ld	r24, X
    2eec:	8f 77       	andi	r24, 0x7F	; 127
    2eee:	89 2b       	or	r24, r25
    2ef0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2ef2:	af e4       	ldi	r26, 0x4F	; 79
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    2efa:	81 81       	ldd	r24, Z+1	; 0x01
    2efc:	81 70       	andi	r24, 0x01	; 1
    2efe:	81 70       	andi	r24, 0x01	; 1
    2f00:	98 2f       	mov	r25, r24
    2f02:	92 95       	swap	r25
    2f04:	99 0f       	add	r25, r25
    2f06:	99 0f       	add	r25, r25
    2f08:	90 7c       	andi	r25, 0xC0	; 192
    2f0a:	8c 91       	ld	r24, X
    2f0c:	8f 7b       	andi	r24, 0xBF	; 191
    2f0e:	89 2b       	or	r24, r25
    2f10:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2f12:	af e4       	ldi	r26, 0x4F	; 79
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e9 81       	ldd	r30, Y+1	; 0x01
    2f18:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1a:	81 81       	ldd	r24, Z+1	; 0x01
    2f1c:	86 95       	lsr	r24
    2f1e:	81 70       	andi	r24, 0x01	; 1
    2f20:	81 70       	andi	r24, 0x01	; 1
    2f22:	98 2f       	mov	r25, r24
    2f24:	92 95       	swap	r25
    2f26:	99 0f       	add	r25, r25
    2f28:	90 7e       	andi	r25, 0xE0	; 224
    2f2a:	8c 91       	ld	r24, X
    2f2c:	8f 7d       	andi	r24, 0xDF	; 223
    2f2e:	89 2b       	or	r24, r25
    2f30:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2f32:	af e4       	ldi	r26, 0x4F	; 79
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e9 81       	ldd	r30, Y+1	; 0x01
    2f38:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3a:	81 81       	ldd	r24, Z+1	; 0x01
    2f3c:	81 70       	andi	r24, 0x01	; 1
    2f3e:	81 70       	andi	r24, 0x01	; 1
    2f40:	98 2f       	mov	r25, r24
    2f42:	92 95       	swap	r25
    2f44:	90 7f       	andi	r25, 0xF0	; 240
    2f46:	8c 91       	ld	r24, X
    2f48:	8f 7e       	andi	r24, 0xEF	; 239
    2f4a:	89 2b       	or	r24, r25
    2f4c:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2f4e:	aa e4       	ldi	r26, 0x4A	; 74
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e9 81       	ldd	r30, Y+1	; 0x01
    2f54:	fa 81       	ldd	r31, Y+2	; 0x02
    2f56:	87 81       	ldd	r24, Z+7	; 0x07
    2f58:	90 85       	ldd	r25, Z+8	; 0x08
    2f5a:	11 96       	adiw	r26, 0x01	; 1
    2f5c:	9c 93       	st	X, r25
    2f5e:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2f60:	a8 e4       	ldi	r26, 0x48	; 72
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e9 81       	ldd	r30, Y+1	; 0x01
    2f66:	fa 81       	ldd	r31, Y+2	; 0x02
    2f68:	87 81       	ldd	r24, Z+7	; 0x07
    2f6a:	90 85       	ldd	r25, Z+8	; 0x08
    2f6c:	11 96       	adiw	r26, 0x01	; 1
    2f6e:	9c 93       	st	X, r25
    2f70:	8e 93       	st	-X, r24
    2f72:	75 c2       	rjmp	.+1258   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2f74:	ef e4       	ldi	r30, 0x4F	; 79
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	87 7f       	andi	r24, 0xF7	; 247
    2f7c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2f7e:	ef e4       	ldi	r30, 0x4F	; 79
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	8b 7f       	andi	r24, 0xFB	; 251
    2f86:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2f88:	af e4       	ldi	r26, 0x4F	; 79
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	86 95       	lsr	r24
    2f94:	81 70       	andi	r24, 0x01	; 1
    2f96:	98 2f       	mov	r25, r24
    2f98:	97 95       	ror	r25
    2f9a:	99 27       	eor	r25, r25
    2f9c:	97 95       	ror	r25
    2f9e:	8c 91       	ld	r24, X
    2fa0:	8f 77       	andi	r24, 0x7F	; 127
    2fa2:	89 2b       	or	r24, r25
    2fa4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2fa6:	af e4       	ldi	r26, 0x4F	; 79
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	81 70       	andi	r24, 0x01	; 1
    2fb2:	81 70       	andi	r24, 0x01	; 1
    2fb4:	98 2f       	mov	r25, r24
    2fb6:	92 95       	swap	r25
    2fb8:	99 0f       	add	r25, r25
    2fba:	99 0f       	add	r25, r25
    2fbc:	90 7c       	andi	r25, 0xC0	; 192
    2fbe:	8c 91       	ld	r24, X
    2fc0:	8f 7b       	andi	r24, 0xBF	; 191
    2fc2:	89 2b       	or	r24, r25
    2fc4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2fc6:	af e4       	ldi	r26, 0x4F	; 79
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 81       	ldd	r30, Y+1	; 0x01
    2fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	86 95       	lsr	r24
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	81 70       	andi	r24, 0x01	; 1
    2fd6:	98 2f       	mov	r25, r24
    2fd8:	92 95       	swap	r25
    2fda:	99 0f       	add	r25, r25
    2fdc:	90 7e       	andi	r25, 0xE0	; 224
    2fde:	8c 91       	ld	r24, X
    2fe0:	8f 7d       	andi	r24, 0xDF	; 223
    2fe2:	89 2b       	or	r24, r25
    2fe4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2fe6:	af e4       	ldi	r26, 0x4F	; 79
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e9 81       	ldd	r30, Y+1	; 0x01
    2fec:	fa 81       	ldd	r31, Y+2	; 0x02
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	81 70       	andi	r24, 0x01	; 1
    2ff2:	81 70       	andi	r24, 0x01	; 1
    2ff4:	98 2f       	mov	r25, r24
    2ff6:	92 95       	swap	r25
    2ff8:	90 7f       	andi	r25, 0xF0	; 240
    2ffa:	8c 91       	ld	r24, X
    2ffc:	8f 7e       	andi	r24, 0xEF	; 239
    2ffe:	89 2b       	or	r24, r25
    3000:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3002:	aa e4       	ldi	r26, 0x4A	; 74
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e9 81       	ldd	r30, Y+1	; 0x01
    3008:	fa 81       	ldd	r31, Y+2	; 0x02
    300a:	87 81       	ldd	r24, Z+7	; 0x07
    300c:	90 85       	ldd	r25, Z+8	; 0x08
    300e:	11 96       	adiw	r26, 0x01	; 1
    3010:	9c 93       	st	X, r25
    3012:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3014:	a8 e4       	ldi	r26, 0x48	; 72
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e9 81       	ldd	r30, Y+1	; 0x01
    301a:	fa 81       	ldd	r31, Y+2	; 0x02
    301c:	87 81       	ldd	r24, Z+7	; 0x07
    301e:	90 85       	ldd	r25, Z+8	; 0x08
    3020:	11 96       	adiw	r26, 0x01	; 1
    3022:	9c 93       	st	X, r25
    3024:	8e 93       	st	-X, r24
    3026:	1b c2       	rjmp	.+1078   	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3028:	ef e4       	ldi	r30, 0x4F	; 79
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	87 7f       	andi	r24, 0xF7	; 247
    3030:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3032:	ef e4       	ldi	r30, 0x4F	; 79
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	8b 7f       	andi	r24, 0xFB	; 251
    303a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    303c:	af e4       	ldi	r26, 0x4F	; 79
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	86 95       	lsr	r24
    3048:	81 70       	andi	r24, 0x01	; 1
    304a:	98 2f       	mov	r25, r24
    304c:	97 95       	ror	r25
    304e:	99 27       	eor	r25, r25
    3050:	97 95       	ror	r25
    3052:	8c 91       	ld	r24, X
    3054:	8f 77       	andi	r24, 0x7F	; 127
    3056:	89 2b       	or	r24, r25
    3058:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    305a:	af e4       	ldi	r26, 0x4F	; 79
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e9 81       	ldd	r30, Y+1	; 0x01
    3060:	fa 81       	ldd	r31, Y+2	; 0x02
    3062:	82 81       	ldd	r24, Z+2	; 0x02
    3064:	81 70       	andi	r24, 0x01	; 1
    3066:	81 70       	andi	r24, 0x01	; 1
    3068:	98 2f       	mov	r25, r24
    306a:	92 95       	swap	r25
    306c:	99 0f       	add	r25, r25
    306e:	99 0f       	add	r25, r25
    3070:	90 7c       	andi	r25, 0xC0	; 192
    3072:	8c 91       	ld	r24, X
    3074:	8f 7b       	andi	r24, 0xBF	; 191
    3076:	89 2b       	or	r24, r25
    3078:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    307a:	af e4       	ldi	r26, 0x4F	; 79
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e9 81       	ldd	r30, Y+1	; 0x01
    3080:	fa 81       	ldd	r31, Y+2	; 0x02
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	86 95       	lsr	r24
    3086:	81 70       	andi	r24, 0x01	; 1
    3088:	81 70       	andi	r24, 0x01	; 1
    308a:	98 2f       	mov	r25, r24
    308c:	92 95       	swap	r25
    308e:	99 0f       	add	r25, r25
    3090:	90 7e       	andi	r25, 0xE0	; 224
    3092:	8c 91       	ld	r24, X
    3094:	8f 7d       	andi	r24, 0xDF	; 223
    3096:	89 2b       	or	r24, r25
    3098:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    309a:	af e4       	ldi	r26, 0x4F	; 79
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e9 81       	ldd	r30, Y+1	; 0x01
    30a0:	fa 81       	ldd	r31, Y+2	; 0x02
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	81 70       	andi	r24, 0x01	; 1
    30a6:	81 70       	andi	r24, 0x01	; 1
    30a8:	98 2f       	mov	r25, r24
    30aa:	92 95       	swap	r25
    30ac:	90 7f       	andi	r25, 0xF0	; 240
    30ae:	8c 91       	ld	r24, X
    30b0:	8f 7e       	andi	r24, 0xEF	; 239
    30b2:	89 2b       	or	r24, r25
    30b4:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    30b6:	aa e4       	ldi	r26, 0x4A	; 74
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	e9 81       	ldd	r30, Y+1	; 0x01
    30bc:	fa 81       	ldd	r31, Y+2	; 0x02
    30be:	87 81       	ldd	r24, Z+7	; 0x07
    30c0:	90 85       	ldd	r25, Z+8	; 0x08
    30c2:	11 96       	adiw	r26, 0x01	; 1
    30c4:	9c 93       	st	X, r25
    30c6:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    30c8:	a8 e4       	ldi	r26, 0x48	; 72
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e9 81       	ldd	r30, Y+1	; 0x01
    30ce:	fa 81       	ldd	r31, Y+2	; 0x02
    30d0:	87 81       	ldd	r24, Z+7	; 0x07
    30d2:	90 85       	ldd	r25, Z+8	; 0x08
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	9c 93       	st	X, r25
    30d8:	8e 93       	st	-X, r24
    30da:	c1 c1       	rjmp	.+898    	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    30dc:	ef e4       	ldi	r30, 0x4F	; 79
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	87 7f       	andi	r24, 0xF7	; 247
    30e4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    30e6:	ef e4       	ldi	r30, 0x4F	; 79
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	8b 7f       	andi	r24, 0xFB	; 251
    30ee:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    30f0:	af e4       	ldi	r26, 0x4F	; 79
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	e9 81       	ldd	r30, Y+1	; 0x01
    30f6:	fa 81       	ldd	r31, Y+2	; 0x02
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	86 95       	lsr	r24
    30fc:	81 70       	andi	r24, 0x01	; 1
    30fe:	98 2f       	mov	r25, r24
    3100:	97 95       	ror	r25
    3102:	99 27       	eor	r25, r25
    3104:	97 95       	ror	r25
    3106:	8c 91       	ld	r24, X
    3108:	8f 77       	andi	r24, 0x7F	; 127
    310a:	89 2b       	or	r24, r25
    310c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    310e:	af e4       	ldi	r26, 0x4F	; 79
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e9 81       	ldd	r30, Y+1	; 0x01
    3114:	fa 81       	ldd	r31, Y+2	; 0x02
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	81 70       	andi	r24, 0x01	; 1
    311a:	81 70       	andi	r24, 0x01	; 1
    311c:	98 2f       	mov	r25, r24
    311e:	92 95       	swap	r25
    3120:	99 0f       	add	r25, r25
    3122:	99 0f       	add	r25, r25
    3124:	90 7c       	andi	r25, 0xC0	; 192
    3126:	8c 91       	ld	r24, X
    3128:	8f 7b       	andi	r24, 0xBF	; 191
    312a:	89 2b       	or	r24, r25
    312c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    312e:	af e4       	ldi	r26, 0x4F	; 79
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	86 95       	lsr	r24
    313a:	81 70       	andi	r24, 0x01	; 1
    313c:	81 70       	andi	r24, 0x01	; 1
    313e:	98 2f       	mov	r25, r24
    3140:	92 95       	swap	r25
    3142:	99 0f       	add	r25, r25
    3144:	90 7e       	andi	r25, 0xE0	; 224
    3146:	8c 91       	ld	r24, X
    3148:	8f 7d       	andi	r24, 0xDF	; 223
    314a:	89 2b       	or	r24, r25
    314c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    314e:	af e4       	ldi	r26, 0x4F	; 79
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e9 81       	ldd	r30, Y+1	; 0x01
    3154:	fa 81       	ldd	r31, Y+2	; 0x02
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	81 70       	andi	r24, 0x01	; 1
    315a:	81 70       	andi	r24, 0x01	; 1
    315c:	98 2f       	mov	r25, r24
    315e:	92 95       	swap	r25
    3160:	90 7f       	andi	r25, 0xF0	; 240
    3162:	8c 91       	ld	r24, X
    3164:	8f 7e       	andi	r24, 0xEF	; 239
    3166:	89 2b       	or	r24, r25
    3168:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    316a:	aa e4       	ldi	r26, 0x4A	; 74
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e9 81       	ldd	r30, Y+1	; 0x01
    3170:	fa 81       	ldd	r31, Y+2	; 0x02
    3172:	87 81       	ldd	r24, Z+7	; 0x07
    3174:	90 85       	ldd	r25, Z+8	; 0x08
    3176:	11 96       	adiw	r26, 0x01	; 1
    3178:	9c 93       	st	X, r25
    317a:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    317c:	a8 e4       	ldi	r26, 0x48	; 72
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	87 81       	ldd	r24, Z+7	; 0x07
    3186:	90 85       	ldd	r25, Z+8	; 0x08
    3188:	11 96       	adiw	r26, 0x01	; 1
    318a:	9c 93       	st	X, r25
    318c:	8e 93       	st	-X, r24
    318e:	67 c1       	rjmp	.+718    	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3190:	ef e4       	ldi	r30, 0x4F	; 79
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	87 7f       	andi	r24, 0xF7	; 247
    3198:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    319a:	ef e4       	ldi	r30, 0x4F	; 79
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	8b 7f       	andi	r24, 0xFB	; 251
    31a2:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    31a4:	af e4       	ldi	r26, 0x4F	; 79
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e9 81       	ldd	r30, Y+1	; 0x01
    31aa:	fa 81       	ldd	r31, Y+2	; 0x02
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	86 95       	lsr	r24
    31b0:	81 70       	andi	r24, 0x01	; 1
    31b2:	98 2f       	mov	r25, r24
    31b4:	97 95       	ror	r25
    31b6:	99 27       	eor	r25, r25
    31b8:	97 95       	ror	r25
    31ba:	8c 91       	ld	r24, X
    31bc:	8f 77       	andi	r24, 0x7F	; 127
    31be:	89 2b       	or	r24, r25
    31c0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    31c2:	af e4       	ldi	r26, 0x4F	; 79
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e9 81       	ldd	r30, Y+1	; 0x01
    31c8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	81 70       	andi	r24, 0x01	; 1
    31ce:	81 70       	andi	r24, 0x01	; 1
    31d0:	98 2f       	mov	r25, r24
    31d2:	92 95       	swap	r25
    31d4:	99 0f       	add	r25, r25
    31d6:	99 0f       	add	r25, r25
    31d8:	90 7c       	andi	r25, 0xC0	; 192
    31da:	8c 91       	ld	r24, X
    31dc:	8f 7b       	andi	r24, 0xBF	; 191
    31de:	89 2b       	or	r24, r25
    31e0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    31e2:	af e4       	ldi	r26, 0x4F	; 79
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e9 81       	ldd	r30, Y+1	; 0x01
    31e8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	86 95       	lsr	r24
    31ee:	81 70       	andi	r24, 0x01	; 1
    31f0:	81 70       	andi	r24, 0x01	; 1
    31f2:	98 2f       	mov	r25, r24
    31f4:	92 95       	swap	r25
    31f6:	99 0f       	add	r25, r25
    31f8:	90 7e       	andi	r25, 0xE0	; 224
    31fa:	8c 91       	ld	r24, X
    31fc:	8f 7d       	andi	r24, 0xDF	; 223
    31fe:	89 2b       	or	r24, r25
    3200:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    3202:	af e4       	ldi	r26, 0x4F	; 79
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e9 81       	ldd	r30, Y+1	; 0x01
    3208:	fa 81       	ldd	r31, Y+2	; 0x02
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	81 70       	andi	r24, 0x01	; 1
    320e:	81 70       	andi	r24, 0x01	; 1
    3210:	98 2f       	mov	r25, r24
    3212:	92 95       	swap	r25
    3214:	90 7f       	andi	r25, 0xF0	; 240
    3216:	8c 91       	ld	r24, X
    3218:	8f 7e       	andi	r24, 0xEF	; 239
    321a:	89 2b       	or	r24, r25
    321c:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    321e:	aa e4       	ldi	r26, 0x4A	; 74
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	e9 81       	ldd	r30, Y+1	; 0x01
    3224:	fa 81       	ldd	r31, Y+2	; 0x02
    3226:	87 81       	ldd	r24, Z+7	; 0x07
    3228:	90 85       	ldd	r25, Z+8	; 0x08
    322a:	11 96       	adiw	r26, 0x01	; 1
    322c:	9c 93       	st	X, r25
    322e:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3230:	a8 e4       	ldi	r26, 0x48	; 72
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	e9 81       	ldd	r30, Y+1	; 0x01
    3236:	fa 81       	ldd	r31, Y+2	; 0x02
    3238:	87 81       	ldd	r24, Z+7	; 0x07
    323a:	90 85       	ldd	r25, Z+8	; 0x08
    323c:	11 96       	adiw	r26, 0x01	; 1
    323e:	9c 93       	st	X, r25
    3240:	8e 93       	st	-X, r24
    3242:	0d c1       	rjmp	.+538    	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_CTC_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3244:	ef e4       	ldi	r30, 0x4F	; 79
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	87 7f       	andi	r24, 0xF7	; 247
    324c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    324e:	ef e4       	ldi	r30, 0x4F	; 79
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8b 7f       	andi	r24, 0xFB	; 251
    3256:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    3258:	af e4       	ldi	r26, 0x4F	; 79
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e9 81       	ldd	r30, Y+1	; 0x01
    325e:	fa 81       	ldd	r31, Y+2	; 0x02
    3260:	80 81       	ld	r24, Z
    3262:	86 95       	lsr	r24
    3264:	81 70       	andi	r24, 0x01	; 1
    3266:	98 2f       	mov	r25, r24
    3268:	97 95       	ror	r25
    326a:	99 27       	eor	r25, r25
    326c:	97 95       	ror	r25
    326e:	8c 91       	ld	r24, X
    3270:	8f 77       	andi	r24, 0x7F	; 127
    3272:	89 2b       	or	r24, r25
    3274:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    3276:	af e4       	ldi	r26, 0x4F	; 79
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e9 81       	ldd	r30, Y+1	; 0x01
    327c:	fa 81       	ldd	r31, Y+2	; 0x02
    327e:	80 81       	ld	r24, Z
    3280:	81 70       	andi	r24, 0x01	; 1
    3282:	81 70       	andi	r24, 0x01	; 1
    3284:	98 2f       	mov	r25, r24
    3286:	92 95       	swap	r25
    3288:	99 0f       	add	r25, r25
    328a:	99 0f       	add	r25, r25
    328c:	90 7c       	andi	r25, 0xC0	; 192
    328e:	8c 91       	ld	r24, X
    3290:	8f 7b       	andi	r24, 0xBF	; 191
    3292:	89 2b       	or	r24, r25
    3294:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    3296:	af e4       	ldi	r26, 0x4F	; 79
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e9 81       	ldd	r30, Y+1	; 0x01
    329c:	fa 81       	ldd	r31, Y+2	; 0x02
    329e:	80 81       	ld	r24, Z
    32a0:	86 95       	lsr	r24
    32a2:	81 70       	andi	r24, 0x01	; 1
    32a4:	81 70       	andi	r24, 0x01	; 1
    32a6:	98 2f       	mov	r25, r24
    32a8:	92 95       	swap	r25
    32aa:	99 0f       	add	r25, r25
    32ac:	90 7e       	andi	r25, 0xE0	; 224
    32ae:	8c 91       	ld	r24, X
    32b0:	8f 7d       	andi	r24, 0xDF	; 223
    32b2:	89 2b       	or	r24, r25
    32b4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    32b6:	af e4       	ldi	r26, 0x4F	; 79
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e9 81       	ldd	r30, Y+1	; 0x01
    32bc:	fa 81       	ldd	r31, Y+2	; 0x02
    32be:	80 81       	ld	r24, Z
    32c0:	81 70       	andi	r24, 0x01	; 1
    32c2:	81 70       	andi	r24, 0x01	; 1
    32c4:	98 2f       	mov	r25, r24
    32c6:	92 95       	swap	r25
    32c8:	90 7f       	andi	r25, 0xF0	; 240
    32ca:	8c 91       	ld	r24, X
    32cc:	8f 7e       	andi	r24, 0xEF	; 239
    32ce:	89 2b       	or	r24, r25
    32d0:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32d2:	aa e4       	ldi	r26, 0x4A	; 74
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e9 81       	ldd	r30, Y+1	; 0x01
    32d8:	fa 81       	ldd	r31, Y+2	; 0x02
    32da:	87 81       	ldd	r24, Z+7	; 0x07
    32dc:	90 85       	ldd	r25, Z+8	; 0x08
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	9c 93       	st	X, r25
    32e2:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32e4:	a8 e4       	ldi	r26, 0x48	; 72
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	87 81       	ldd	r24, Z+7	; 0x07
    32ee:	90 85       	ldd	r25, Z+8	; 0x08
    32f0:	11 96       	adiw	r26, 0x01	; 1
    32f2:	9c 93       	st	X, r25
    32f4:	8e 93       	st	-X, r24
    32f6:	b3 c0       	rjmp	.+358    	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    32f8:	ef e4       	ldi	r30, 0x4F	; 79
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	87 7f       	andi	r24, 0xF7	; 247
    3300:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3302:	ef e4       	ldi	r30, 0x4F	; 79
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8b 7f       	andi	r24, 0xFB	; 251
    330a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    330c:	af e4       	ldi	r26, 0x4F	; 79
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	e9 81       	ldd	r30, Y+1	; 0x01
    3312:	fa 81       	ldd	r31, Y+2	; 0x02
    3314:	81 81       	ldd	r24, Z+1	; 0x01
    3316:	86 95       	lsr	r24
    3318:	81 70       	andi	r24, 0x01	; 1
    331a:	98 2f       	mov	r25, r24
    331c:	97 95       	ror	r25
    331e:	99 27       	eor	r25, r25
    3320:	97 95       	ror	r25
    3322:	8c 91       	ld	r24, X
    3324:	8f 77       	andi	r24, 0x7F	; 127
    3326:	89 2b       	or	r24, r25
    3328:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    332a:	af e4       	ldi	r26, 0x4F	; 79
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e9 81       	ldd	r30, Y+1	; 0x01
    3330:	fa 81       	ldd	r31, Y+2	; 0x02
    3332:	81 81       	ldd	r24, Z+1	; 0x01
    3334:	81 70       	andi	r24, 0x01	; 1
    3336:	81 70       	andi	r24, 0x01	; 1
    3338:	98 2f       	mov	r25, r24
    333a:	92 95       	swap	r25
    333c:	99 0f       	add	r25, r25
    333e:	99 0f       	add	r25, r25
    3340:	90 7c       	andi	r25, 0xC0	; 192
    3342:	8c 91       	ld	r24, X
    3344:	8f 7b       	andi	r24, 0xBF	; 191
    3346:	89 2b       	or	r24, r25
    3348:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    334a:	af e4       	ldi	r26, 0x4F	; 79
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	e9 81       	ldd	r30, Y+1	; 0x01
    3350:	fa 81       	ldd	r31, Y+2	; 0x02
    3352:	81 81       	ldd	r24, Z+1	; 0x01
    3354:	86 95       	lsr	r24
    3356:	81 70       	andi	r24, 0x01	; 1
    3358:	81 70       	andi	r24, 0x01	; 1
    335a:	98 2f       	mov	r25, r24
    335c:	92 95       	swap	r25
    335e:	99 0f       	add	r25, r25
    3360:	90 7e       	andi	r25, 0xE0	; 224
    3362:	8c 91       	ld	r24, X
    3364:	8f 7d       	andi	r24, 0xDF	; 223
    3366:	89 2b       	or	r24, r25
    3368:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    336a:	af e4       	ldi	r26, 0x4F	; 79
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	e9 81       	ldd	r30, Y+1	; 0x01
    3370:	fa 81       	ldd	r31, Y+2	; 0x02
    3372:	81 81       	ldd	r24, Z+1	; 0x01
    3374:	81 70       	andi	r24, 0x01	; 1
    3376:	81 70       	andi	r24, 0x01	; 1
    3378:	98 2f       	mov	r25, r24
    337a:	92 95       	swap	r25
    337c:	90 7f       	andi	r25, 0xF0	; 240
    337e:	8c 91       	ld	r24, X
    3380:	8f 7e       	andi	r24, 0xEF	; 239
    3382:	89 2b       	or	r24, r25
    3384:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3386:	aa e4       	ldi	r26, 0x4A	; 74
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e9 81       	ldd	r30, Y+1	; 0x01
    338c:	fa 81       	ldd	r31, Y+2	; 0x02
    338e:	87 81       	ldd	r24, Z+7	; 0x07
    3390:	90 85       	ldd	r25, Z+8	; 0x08
    3392:	11 96       	adiw	r26, 0x01	; 1
    3394:	9c 93       	st	X, r25
    3396:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3398:	a8 e4       	ldi	r26, 0x48	; 72
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e9 81       	ldd	r30, Y+1	; 0x01
    339e:	fa 81       	ldd	r31, Y+2	; 0x02
    33a0:	87 81       	ldd	r24, Z+7	; 0x07
    33a2:	90 85       	ldd	r25, Z+8	; 0x08
    33a4:	11 96       	adiw	r26, 0x01	; 1
    33a6:	9c 93       	st	X, r25
    33a8:	8e 93       	st	-X, r24
    33aa:	59 c0       	rjmp	.+178    	; 0x345e <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    33ac:	ef e4       	ldi	r30, 0x4F	; 79
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	87 7f       	andi	r24, 0xF7	; 247
    33b4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    33b6:	ef e4       	ldi	r30, 0x4F	; 79
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	8b 7f       	andi	r24, 0xFB	; 251
    33be:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    33c0:	af e4       	ldi	r26, 0x4F	; 79
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e9 81       	ldd	r30, Y+1	; 0x01
    33c6:	fa 81       	ldd	r31, Y+2	; 0x02
    33c8:	81 81       	ldd	r24, Z+1	; 0x01
    33ca:	86 95       	lsr	r24
    33cc:	81 70       	andi	r24, 0x01	; 1
    33ce:	98 2f       	mov	r25, r24
    33d0:	97 95       	ror	r25
    33d2:	99 27       	eor	r25, r25
    33d4:	97 95       	ror	r25
    33d6:	8c 91       	ld	r24, X
    33d8:	8f 77       	andi	r24, 0x7F	; 127
    33da:	89 2b       	or	r24, r25
    33dc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    33de:	af e4       	ldi	r26, 0x4F	; 79
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	e9 81       	ldd	r30, Y+1	; 0x01
    33e4:	fa 81       	ldd	r31, Y+2	; 0x02
    33e6:	81 81       	ldd	r24, Z+1	; 0x01
    33e8:	81 70       	andi	r24, 0x01	; 1
    33ea:	81 70       	andi	r24, 0x01	; 1
    33ec:	98 2f       	mov	r25, r24
    33ee:	92 95       	swap	r25
    33f0:	99 0f       	add	r25, r25
    33f2:	99 0f       	add	r25, r25
    33f4:	90 7c       	andi	r25, 0xC0	; 192
    33f6:	8c 91       	ld	r24, X
    33f8:	8f 7b       	andi	r24, 0xBF	; 191
    33fa:	89 2b       	or	r24, r25
    33fc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    33fe:	af e4       	ldi	r26, 0x4F	; 79
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e9 81       	ldd	r30, Y+1	; 0x01
    3404:	fa 81       	ldd	r31, Y+2	; 0x02
    3406:	81 81       	ldd	r24, Z+1	; 0x01
    3408:	86 95       	lsr	r24
    340a:	81 70       	andi	r24, 0x01	; 1
    340c:	81 70       	andi	r24, 0x01	; 1
    340e:	98 2f       	mov	r25, r24
    3410:	92 95       	swap	r25
    3412:	99 0f       	add	r25, r25
    3414:	90 7e       	andi	r25, 0xE0	; 224
    3416:	8c 91       	ld	r24, X
    3418:	8f 7d       	andi	r24, 0xDF	; 223
    341a:	89 2b       	or	r24, r25
    341c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    341e:	af e4       	ldi	r26, 0x4F	; 79
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	e9 81       	ldd	r30, Y+1	; 0x01
    3424:	fa 81       	ldd	r31, Y+2	; 0x02
    3426:	81 81       	ldd	r24, Z+1	; 0x01
    3428:	81 70       	andi	r24, 0x01	; 1
    342a:	81 70       	andi	r24, 0x01	; 1
    342c:	98 2f       	mov	r25, r24
    342e:	92 95       	swap	r25
    3430:	90 7f       	andi	r25, 0xF0	; 240
    3432:	8c 91       	ld	r24, X
    3434:	8f 7e       	andi	r24, 0xEF	; 239
    3436:	89 2b       	or	r24, r25
    3438:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    343a:	aa e4       	ldi	r26, 0x4A	; 74
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e9 81       	ldd	r30, Y+1	; 0x01
    3440:	fa 81       	ldd	r31, Y+2	; 0x02
    3442:	87 81       	ldd	r24, Z+7	; 0x07
    3444:	90 85       	ldd	r25, Z+8	; 0x08
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	9c 93       	st	X, r25
    344a:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    344c:	a8 e4       	ldi	r26, 0x48	; 72
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e9 81       	ldd	r30, Y+1	; 0x01
    3452:	fa 81       	ldd	r31, Y+2	; 0x02
    3454:	87 81       	ldd	r24, Z+7	; 0x07
    3456:	90 85       	ldd	r25, Z+8	; 0x08
    3458:	11 96       	adiw	r26, 0x01	; 1
    345a:	9c 93       	st	X, r25
    345c:	8e 93       	st	-X, r24
		break;
	}
	TCNT1_REG = (Config_Ptr->TIMER1_INITIAL_VALUE);
    345e:	ac e4       	ldi	r26, 0x4C	; 76
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	85 81       	ldd	r24, Z+5	; 0x05
    3468:	96 81       	ldd	r25, Z+6	; 0x06
    346a:	11 96       	adiw	r26, 0x01	; 1
    346c:	9c 93       	st	X, r25
    346e:	8e 93       	st	-X, r24
	TCCR1A_REG->bits.WGM10_BIT = (Config_Ptr->Mode);
    3470:	af e4       	ldi	r26, 0x4F	; 79
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e9 81       	ldd	r30, Y+1	; 0x01
    3476:	fa 81       	ldd	r31, Y+2	; 0x02
    3478:	84 81       	ldd	r24, Z+4	; 0x04
    347a:	81 70       	andi	r24, 0x01	; 1
    347c:	98 2f       	mov	r25, r24
    347e:	91 70       	andi	r25, 0x01	; 1
    3480:	8c 91       	ld	r24, X
    3482:	8e 7f       	andi	r24, 0xFE	; 254
    3484:	89 2b       	or	r24, r25
    3486:	8c 93       	st	X, r24
	TCCR1A_REG->bits.WGM11_BIT = (Config_Ptr->Mode>> 1);
    3488:	af e4       	ldi	r26, 0x4F	; 79
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e9 81       	ldd	r30, Y+1	; 0x01
    348e:	fa 81       	ldd	r31, Y+2	; 0x02
    3490:	84 81       	ldd	r24, Z+4	; 0x04
    3492:	86 95       	lsr	r24
    3494:	81 70       	andi	r24, 0x01	; 1
    3496:	81 70       	andi	r24, 0x01	; 1
    3498:	98 2f       	mov	r25, r24
    349a:	99 0f       	add	r25, r25
    349c:	8c 91       	ld	r24, X
    349e:	8d 7f       	andi	r24, 0xFD	; 253
    34a0:	89 2b       	or	r24, r25
    34a2:	8c 93       	st	X, r24
	TCCR1B_REG->bits.WGM12_BIT = (Config_Ptr->Mode >> 2);
    34a4:	ae e4       	ldi	r26, 0x4E	; 78
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e9 81       	ldd	r30, Y+1	; 0x01
    34aa:	fa 81       	ldd	r31, Y+2	; 0x02
    34ac:	84 81       	ldd	r24, Z+4	; 0x04
    34ae:	86 95       	lsr	r24
    34b0:	86 95       	lsr	r24
    34b2:	81 70       	andi	r24, 0x01	; 1
    34b4:	81 70       	andi	r24, 0x01	; 1
    34b6:	98 2f       	mov	r25, r24
    34b8:	99 0f       	add	r25, r25
    34ba:	99 0f       	add	r25, r25
    34bc:	99 0f       	add	r25, r25
    34be:	8c 91       	ld	r24, X
    34c0:	87 7f       	andi	r24, 0xF7	; 247
    34c2:	89 2b       	or	r24, r25
    34c4:	8c 93       	st	X, r24
	TCCR1B_REG->bits.WGM13_BIT = (Config_Ptr->Mode >> 3);
    34c6:	ae e4       	ldi	r26, 0x4E	; 78
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e9 81       	ldd	r30, Y+1	; 0x01
    34cc:	fa 81       	ldd	r31, Y+2	; 0x02
    34ce:	84 81       	ldd	r24, Z+4	; 0x04
    34d0:	86 95       	lsr	r24
    34d2:	86 95       	lsr	r24
    34d4:	86 95       	lsr	r24
    34d6:	81 70       	andi	r24, 0x01	; 1
    34d8:	81 70       	andi	r24, 0x01	; 1
    34da:	98 2f       	mov	r25, r24
    34dc:	92 95       	swap	r25
    34de:	90 7f       	andi	r25, 0xF0	; 240
    34e0:	8c 91       	ld	r24, X
    34e2:	8f 7e       	andi	r24, 0xEF	; 239
    34e4:	89 2b       	or	r24, r25
    34e6:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	08 95       	ret

000034f6 <TIMER1_Start>:
void TIMER1_Start(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <TIMER1_Start+0x6>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	9a 83       	std	Y+2, r25	; 0x02
    3502:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->FULL_REG = ((TCCR1B_REG->FULL_REG & CLOCK_SELECT_MASK) | ((Config_Ptr->Clock_Select & 0x07)));
    3504:	ae e4       	ldi	r26, 0x4E	; 78
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	ee e4       	ldi	r30, 0x4E	; 78
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	80 81       	ld	r24, Z
    350e:	98 2f       	mov	r25, r24
    3510:	98 7f       	andi	r25, 0xF8	; 248
    3512:	e9 81       	ldd	r30, Y+1	; 0x01
    3514:	fa 81       	ldd	r31, Y+2	; 0x02
    3516:	83 81       	ldd	r24, Z+3	; 0x03
    3518:	87 70       	andi	r24, 0x07	; 7
    351a:	89 2b       	or	r24, r25
    351c:	8c 93       	st	X, r24
}
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <TIMER1_Stop>:
void TIMER1_Stop(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	00 d0       	rcall	.+0      	; 0x352e <TIMER1_Stop+0x6>
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->FULL_REG = ((TCCR1B_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    3536:	ae e4       	ldi	r26, 0x4E	; 78
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	ee e4       	ldi	r30, 0x4E	; 78
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	88 7f       	andi	r24, 0xF8	; 248
    3542:	8c 93       	st	X, r24
}
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <TIMER1_GetCounts>:
u16 TIMER1_GetCounts(void)
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    3556:	ec e4       	ldi	r30, 0x4C	; 76
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
}
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <TIMER1_SetDelayTimeMilliSec>:
void TIMER1_SetDelayTimeMilliSec(const TIMER1_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	00 d0       	rcall	.+0      	; 0x356a <TIMER1_SetDelayTimeMilliSec+0x6>
    356a:	00 d0       	rcall	.+0      	; 0x356c <TIMER1_SetDelayTimeMilliSec+0x8>
    356c:	00 d0       	rcall	.+0      	; 0x356e <TIMER1_SetDelayTimeMilliSec+0xa>
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	4b 83       	std	Y+3, r20	; 0x03
    3578:	5c 83       	std	Y+4, r21	; 0x04
    357a:	6d 83       	std	Y+5, r22	; 0x05
    357c:	7e 83       	std	Y+6, r23	; 0x06
	switch(Config_Ptr->Mode)
    357e:	e9 81       	ldd	r30, Y+1	; 0x01
    3580:	fa 81       	ldd	r31, Y+2	; 0x02
    3582:	84 81       	ldd	r24, Z+4	; 0x04
    3584:	88 2f       	mov	r24, r24
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	09 f0       	breq	.+2      	; 0x358e <TIMER1_SetDelayTimeMilliSec+0x2a>
    358c:	4c c0       	rjmp	.+152    	; 0x3626 <TIMER1_SetDelayTimeMilliSec+0xc2>
	{
	case TIMER1_NORMAL_MODE:
		timer1OverFlowCounter = (((copy_u32TimeMS * 1000)/TICK_TIME) / TOP_VALUE);
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	ad 81       	ldd	r26, Y+5	; 0x05
    3594:	be 81       	ldd	r27, Y+6	; 0x06
    3596:	28 ee       	ldi	r18, 0xE8	; 232
    3598:	33 e0       	ldi	r19, 0x03	; 3
    359a:	40 e0       	ldi	r20, 0x00	; 0
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsi3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	2c ef       	ldi	r18, 0xFC	; 252
    35ac:	3f ef       	ldi	r19, 0xFF	; 255
    35ae:	43 e0       	ldi	r20, 0x03	; 3
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	bc 01       	movw	r22, r24
    35b4:	cd 01       	movw	r24, r26
    35b6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    35ba:	da 01       	movw	r26, r20
    35bc:	c9 01       	movw	r24, r18
    35be:	80 93 8e 00 	sts	0x008E, r24
    35c2:	90 93 8f 00 	sts	0x008F, r25
    35c6:	a0 93 90 00 	sts	0x0090, r26
    35ca:	b0 93 91 00 	sts	0x0091, r27
		timer1RemCounter = (u16)(((copy_u32TimeMS * 1000)/TICK_TIME) % TOP_VALUE);
    35ce:	8b 81       	ldd	r24, Y+3	; 0x03
    35d0:	9c 81       	ldd	r25, Y+4	; 0x04
    35d2:	ad 81       	ldd	r26, Y+5	; 0x05
    35d4:	be 81       	ldd	r27, Y+6	; 0x06
    35d6:	28 ee       	ldi	r18, 0xE8	; 232
    35d8:	33 e0       	ldi	r19, 0x03	; 3
    35da:	40 e0       	ldi	r20, 0x00	; 0
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	bc 01       	movw	r22, r24
    35e0:	cd 01       	movw	r24, r26
    35e2:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsi3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	b6 95       	lsr	r27
    35ec:	a7 95       	ror	r26
    35ee:	97 95       	ror	r25
    35f0:	87 95       	ror	r24
    35f2:	b6 95       	lsr	r27
    35f4:	a7 95       	ror	r26
    35f6:	97 95       	ror	r25
    35f8:	87 95       	ror	r24
    35fa:	2f ef       	ldi	r18, 0xFF	; 255
    35fc:	3f ef       	ldi	r19, 0xFF	; 255
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	90 93 93 00 	sts	0x0093, r25
    3612:	80 93 92 00 	sts	0x0092, r24
		TIMER1_IntEnable(Config_Ptr);
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	9a 81       	ldd	r25, Y+2	; 0x02
    361a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <TIMER1_IntEnable>
		TIMER1_Start(Config_Ptr);
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <TIMER1_Start>
		break;
	}
}
    3626:	26 96       	adiw	r28, 0x06	; 6
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <TIMER1_IntEnable>:
void TIMER1_IntEnable(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	00 d0       	rcall	.+0      	; 0x363e <TIMER1_IntEnable+0x6>
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
    3642:	9a 83       	std	Y+2, r25	; 0x02
    3644:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER1_NORMAL_MODE)
    3646:	e9 81       	ldd	r30, Y+1	; 0x01
    3648:	fa 81       	ldd	r31, Y+2	; 0x02
    364a:	84 81       	ldd	r24, Z+4	; 0x04
    364c:	88 23       	and	r24, r24
    364e:	29 f4       	brne	.+10     	; 0x365a <TIMER1_IntEnable+0x22>
	{
		TIMSK_REG->bits.TOIE1_BIT = LOGIC_HIGH;
    3650:	e9 e5       	ldi	r30, 0x59	; 89
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	80 81       	ld	r24, Z
    3656:	84 60       	ori	r24, 0x04	; 4
    3658:	80 83       	st	Z, r24
	else
	{
		//return error;
	}
	 */
}
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <TIMER1_IntDisable>:
void TIMER1_IntDisable(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	00 d0       	rcall	.+0      	; 0x366a <TIMER1_IntDisable+0x6>
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER1_NORMAL_MODE)
    3672:	e9 81       	ldd	r30, Y+1	; 0x01
    3674:	fa 81       	ldd	r31, Y+2	; 0x02
    3676:	84 81       	ldd	r24, Z+4	; 0x04
    3678:	88 23       	and	r24, r24
    367a:	29 f4       	brne	.+10     	; 0x3686 <TIMER1_IntDisable+0x22>
	{
		TIMSK_REG->bits.TOIE1_BIT = LOGIC_HIGH;
    367c:	e9 e5       	ldi	r30, 0x59	; 89
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	84 60       	ori	r24, 0x04	; 4
    3684:	80 83       	st	Z, r24
	else
	{
		//return error;
	}
	 */
}
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void(*ptrfn)(void))
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	00 d0       	rcall	.+0      	; 0x3696 <TIMER1_SetCallBack+0x6>
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	9a 83       	std	Y+2, r25	; 0x02
    369c:	89 83       	std	Y+1, r24	; 0x01
	timer1PtrCallBack = ptrfn;
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	90 93 95 00 	sts	0x0095, r25
    36a6:	80 93 94 00 	sts	0x0094, r24
}
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <TIMER1_SetFastPWM>:
void TIMER1_SetFastPWM(const TIMER1_INIT_CONFIG* Config_Ptr, u16 duty)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <TIMER1_SetFastPWM+0x6>
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <TIMER1_SetFastPWM+0x8>
    36bc:	00 d0       	rcall	.+0      	; 0x36be <TIMER1_SetFastPWM+0xa>
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	9c 83       	std	Y+4, r25	; 0x04
    36c4:	8b 83       	std	Y+3, r24	; 0x03
    36c6:	7e 83       	std	Y+6, r23	; 0x06
    36c8:	6d 83       	std	Y+5, r22	; 0x05
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	u16 dutyval = 0;
    36ca:	1a 82       	std	Y+2, r1	; 0x02
    36cc:	19 82       	std	Y+1, r1	; 0x01
	//	dutyval = (u16)((duty*TOP_VALUE)/100);
	dutyval = (u16)((duty*256)/100);
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	98 2f       	mov	r25, r24
    36d4:	88 27       	eor	r24, r24
    36d6:	24 e6       	ldi	r18, 0x64	; 100
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	b9 01       	movw	r22, r18
    36dc:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__udivmodhi4>
    36e0:	cb 01       	movw	r24, r22
    36e2:	9a 83       	std	Y+2, r25	; 0x02
    36e4:	89 83       	std	Y+1, r24	; 0x01

	OCR1A_REG = dutyval;
    36e6:	ea e4       	ldi	r30, 0x4A	; 74
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	91 83       	std	Z+1, r25	; 0x01
    36f0:	80 83       	st	Z, r24

	OCR1B_REG = dutyval;
    36f2:	e8 e4       	ldi	r30, 0x48	; 72
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	9a 81       	ldd	r25, Y+2	; 0x02
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24

}
    36fe:	26 96       	adiw	r28, 0x06	; 6
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <TIMER1_GetEventDuration>:
void TIMER1_SetPhaseCorrectPWM(const TIMER1_INIT_CONFIG* Config_Ptr, u16 duty);

void TIMER1_GetEventDuration(void)
{
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    3718:	e6 e4       	ldi	r30, 0x46	; 70
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	11 82       	std	Z+1, r1	; 0x01
    371e:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3720:	e9 e5       	ldi	r30, 0x59	; 89
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	80 62       	ori	r24, 0x20	; 32
    3728:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    372a:	ee e4       	ldi	r30, 0x4E	; 78
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	8f 77       	andi	r24, 0x7F	; 127
    3732:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    3734:	ee e4       	ldi	r30, 0x4E	; 78
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	80 64       	ori	r24, 0x40	; 64
    373c:	80 83       	st	Z, r24
}
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <TIMER1_GetSignalFrequency>:
void TIMER1_GetSignalFrequency(void)
{
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    374c:	e6 e4       	ldi	r30, 0x46	; 70
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	11 82       	std	Z+1, r1	; 0x01
    3752:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3754:	e9 e5       	ldi	r30, 0x59	; 89
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	80 62       	ori	r24, 0x20	; 32
    375c:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    375e:	ee e4       	ldi	r30, 0x4E	; 78
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	8f 77       	andi	r24, 0x7F	; 127
    3766:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    3768:	ee e4       	ldi	r30, 0x4E	; 78
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	80 64       	ori	r24, 0x40	; 64
    3770:	80 83       	st	Z, r24
}
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <TIMER1_GetSignalDutyCycle>:
void TIMER1_GetSignalDutyCycle(void)
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    3780:	e6 e4       	ldi	r30, 0x46	; 70
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	11 82       	std	Z+1, r1	; 0x01
    3786:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3788:	e9 e5       	ldi	r30, 0x59	; 89
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	80 62       	ori	r24, 0x20	; 32
    3790:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    3792:	ee e4       	ldi	r30, 0x4E	; 78
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	8f 77       	andi	r24, 0x7F	; 127
    379a:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    379c:	ee e4       	ldi	r30, 0x4E	; 78
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	80 64       	ori	r24, 0x40	; 64
    37a4:	80 83       	st	Z, r24
}
    37a6:	cf 91       	pop	r28
    37a8:	df 91       	pop	r29
    37aa:	08 95       	ret

000037ac <TIMER1_GetInputCaptureValue>:

u16 TIMER1_GetInputCaptureValue(void)
{
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    37b4:	e6 e4       	ldi	r30, 0x46	; 70
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	91 81       	ldd	r25, Z+1	; 0x01
}
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <TIMER1_SetInputCaptureEdgeDetection>:

void TIMER1_SetInputCaptureEdgeDetection(u8 trigger)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->bits.ICES1_BIT = trigger;
    37ce:	ee e4       	ldi	r30, 0x4E	; 78
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	81 70       	andi	r24, 0x01	; 1
    37d6:	81 70       	andi	r24, 0x01	; 1
    37d8:	98 2f       	mov	r25, r24
    37da:	92 95       	swap	r25
    37dc:	99 0f       	add	r25, r25
    37de:	99 0f       	add	r25, r25
    37e0:	90 7c       	andi	r25, 0xC0	; 192
    37e2:	80 81       	ld	r24, Z
    37e4:	8f 7b       	andi	r24, 0xBF	; 191
    37e6:	89 2b       	or	r24, r25
    37e8:	80 83       	st	Z, r24
}
    37ea:	0f 90       	pop	r0
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <TIMER1_ClearTimerValue>:

void TIMER1_ClearTimerValue(void)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = 0;
    37fa:	ec e4       	ldi	r30, 0x4C	; 76
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	11 82       	std	Z+1, r1	; 0x01
    3800:	10 82       	st	Z, r1
}
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <TIMER1_DisableICU>:

void TIMER1_DisableICU(void)
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG->bits.TICIE1_BIT = 0;
    3810:	e9 e5       	ldi	r30, 0x59	; 89
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	8f 7d       	andi	r24, 0xDF	; 223
    3818:	80 83       	st	Z, r24
}
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <TIMER1_EnableICU>:

void TIMER1_EnableICU(void)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG->bits.TICIE1_BIT = 1;
    3828:	e9 e5       	ldi	r30, 0x59	; 89
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	80 62       	ori	r24, 0x20	; 32
    3830:	80 83       	st	Z, r24
}
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	08 95       	ret

00003838 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    3838:	1f 92       	push	r1
    383a:	0f 92       	push	r0
    383c:	0f b6       	in	r0, 0x3f	; 63
    383e:	0f 92       	push	r0
    3840:	11 24       	eor	r1, r1
    3842:	2f 93       	push	r18
    3844:	3f 93       	push	r19
    3846:	4f 93       	push	r20
    3848:	5f 93       	push	r21
    384a:	6f 93       	push	r22
    384c:	7f 93       	push	r23
    384e:	8f 93       	push	r24
    3850:	9f 93       	push	r25
    3852:	af 93       	push	r26
    3854:	bf 93       	push	r27
    3856:	ef 93       	push	r30
    3858:	ff 93       	push	r31
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
	/* For the delay func */

	timer1OverFlowCounter--;
    3862:	80 91 8e 00 	lds	r24, 0x008E
    3866:	90 91 8f 00 	lds	r25, 0x008F
    386a:	a0 91 90 00 	lds	r26, 0x0090
    386e:	b0 91 91 00 	lds	r27, 0x0091
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	a1 09       	sbc	r26, r1
    3876:	b1 09       	sbc	r27, r1
    3878:	80 93 8e 00 	sts	0x008E, r24
    387c:	90 93 8f 00 	sts	0x008F, r25
    3880:	a0 93 90 00 	sts	0x0090, r26
    3884:	b0 93 91 00 	sts	0x0091, r27

	if(timer1OverFlowCounter == 0)
    3888:	80 91 8e 00 	lds	r24, 0x008E
    388c:	90 91 8f 00 	lds	r25, 0x008F
    3890:	a0 91 90 00 	lds	r26, 0x0090
    3894:	b0 91 91 00 	lds	r27, 0x0091
    3898:	00 97       	sbiw	r24, 0x00	; 0
    389a:	a1 05       	cpc	r26, r1
    389c:	b1 05       	cpc	r27, r1
    389e:	51 f4       	brne	.+20     	; 0x38b4 <__vector_9+0x7c>
	{
		TCNT1_REG = (TOP_VALUE - timer1RemCounter);
    38a0:	ec e4       	ldi	r30, 0x4C	; 76
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 91 92 00 	lds	r24, 0x0092
    38a8:	90 91 93 00 	lds	r25, 0x0093
    38ac:	80 95       	com	r24
    38ae:	90 95       	com	r25
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	80 83       	st	Z, r24
	}

	if((timer1PtrCallBack != NULL) && (timer1OverFlowCounter == -1))
    38b4:	80 91 94 00 	lds	r24, 0x0094
    38b8:	90 91 95 00 	lds	r25, 0x0095
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	a9 f0       	breq	.+42     	; 0x38ea <__vector_9+0xb2>
    38c0:	80 91 8e 00 	lds	r24, 0x008E
    38c4:	90 91 8f 00 	lds	r25, 0x008F
    38c8:	a0 91 90 00 	lds	r26, 0x0090
    38cc:	b0 91 91 00 	lds	r27, 0x0091
    38d0:	8f 3f       	cpi	r24, 0xFF	; 255
    38d2:	2f ef       	ldi	r18, 0xFF	; 255
    38d4:	92 07       	cpc	r25, r18
    38d6:	2f ef       	ldi	r18, 0xFF	; 255
    38d8:	a2 07       	cpc	r26, r18
    38da:	2f ef       	ldi	r18, 0xFF	; 255
    38dc:	b2 07       	cpc	r27, r18
    38de:	29 f4       	brne	.+10     	; 0x38ea <__vector_9+0xb2>
	{
		(*timer1PtrCallBack)();
    38e0:	e0 91 94 00 	lds	r30, 0x0094
    38e4:	f0 91 95 00 	lds	r31, 0x0095
    38e8:	09 95       	icall
	}
}
    38ea:	cf 91       	pop	r28
    38ec:	df 91       	pop	r29
    38ee:	ff 91       	pop	r31
    38f0:	ef 91       	pop	r30
    38f2:	bf 91       	pop	r27
    38f4:	af 91       	pop	r26
    38f6:	9f 91       	pop	r25
    38f8:	8f 91       	pop	r24
    38fa:	7f 91       	pop	r23
    38fc:	6f 91       	pop	r22
    38fe:	5f 91       	pop	r21
    3900:	4f 91       	pop	r20
    3902:	3f 91       	pop	r19
    3904:	2f 91       	pop	r18
    3906:	0f 90       	pop	r0
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	0f 90       	pop	r0
    390c:	1f 90       	pop	r1
    390e:	18 95       	reti

00003910 <__vector_6>:

ISR(TIMER1_ICU_vect)
{
    3910:	1f 92       	push	r1
    3912:	0f 92       	push	r0
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	0f 92       	push	r0
    3918:	11 24       	eor	r1, r1
    391a:	2f 93       	push	r18
    391c:	3f 93       	push	r19
    391e:	4f 93       	push	r20
    3920:	5f 93       	push	r21
    3922:	6f 93       	push	r22
    3924:	7f 93       	push	r23
    3926:	8f 93       	push	r24
    3928:	9f 93       	push	r25
    392a:	af 93       	push	r26
    392c:	bf 93       	push	r27
    392e:	ef 93       	push	r30
    3930:	ff 93       	push	r31
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL)
    393a:	80 91 94 00 	lds	r24, 0x0094
    393e:	90 91 95 00 	lds	r25, 0x0095
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	29 f0       	breq	.+10     	; 0x3950 <__vector_6+0x40>
	{
		(*timer1PtrCallBack)();
    3946:	e0 91 94 00 	lds	r30, 0x0094
    394a:	f0 91 95 00 	lds	r31, 0x0095
    394e:	09 95       	icall
	}
}
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	ff 91       	pop	r31
    3956:	ef 91       	pop	r30
    3958:	bf 91       	pop	r27
    395a:	af 91       	pop	r26
    395c:	9f 91       	pop	r25
    395e:	8f 91       	pop	r24
    3960:	7f 91       	pop	r23
    3962:	6f 91       	pop	r22
    3964:	5f 91       	pop	r21
    3966:	4f 91       	pop	r20
    3968:	3f 91       	pop	r19
    396a:	2f 91       	pop	r18
    396c:	0f 90       	pop	r0
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	0f 90       	pop	r0
    3972:	1f 90       	pop	r1
    3974:	18 95       	reti

00003976 <__vector_7>:

ISR(TIMER1_OCA_vect)
{
    3976:	1f 92       	push	r1
    3978:	0f 92       	push	r0
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	0f 92       	push	r0
    397e:	11 24       	eor	r1, r1
    3980:	2f 93       	push	r18
    3982:	3f 93       	push	r19
    3984:	4f 93       	push	r20
    3986:	5f 93       	push	r21
    3988:	6f 93       	push	r22
    398a:	7f 93       	push	r23
    398c:	8f 93       	push	r24
    398e:	9f 93       	push	r25
    3990:	af 93       	push	r26
    3992:	bf 93       	push	r27
    3994:	ef 93       	push	r30
    3996:	ff 93       	push	r31
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL)
    39a0:	80 91 94 00 	lds	r24, 0x0094
    39a4:	90 91 95 00 	lds	r25, 0x0095
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	29 f0       	breq	.+10     	; 0x39b6 <__vector_7+0x40>
	{
		(*timer1PtrCallBack)();
    39ac:	e0 91 94 00 	lds	r30, 0x0094
    39b0:	f0 91 95 00 	lds	r31, 0x0095
    39b4:	09 95       	icall
	}
}
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	ff 91       	pop	r31
    39bc:	ef 91       	pop	r30
    39be:	bf 91       	pop	r27
    39c0:	af 91       	pop	r26
    39c2:	9f 91       	pop	r25
    39c4:	8f 91       	pop	r24
    39c6:	7f 91       	pop	r23
    39c8:	6f 91       	pop	r22
    39ca:	5f 91       	pop	r21
    39cc:	4f 91       	pop	r20
    39ce:	3f 91       	pop	r19
    39d0:	2f 91       	pop	r18
    39d2:	0f 90       	pop	r0
    39d4:	0f be       	out	0x3f, r0	; 63
    39d6:	0f 90       	pop	r0
    39d8:	1f 90       	pop	r1
    39da:	18 95       	reti

000039dc <__vector_8>:


ISR(TIMER1_OCB_vect)
{
    39dc:	1f 92       	push	r1
    39de:	0f 92       	push	r0
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	0f 92       	push	r0
    39e4:	11 24       	eor	r1, r1
    39e6:	2f 93       	push	r18
    39e8:	3f 93       	push	r19
    39ea:	4f 93       	push	r20
    39ec:	5f 93       	push	r21
    39ee:	6f 93       	push	r22
    39f0:	7f 93       	push	r23
    39f2:	8f 93       	push	r24
    39f4:	9f 93       	push	r25
    39f6:	af 93       	push	r26
    39f8:	bf 93       	push	r27
    39fa:	ef 93       	push	r30
    39fc:	ff 93       	push	r31
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL)
    3a06:	80 91 94 00 	lds	r24, 0x0094
    3a0a:	90 91 95 00 	lds	r25, 0x0095
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	29 f0       	breq	.+10     	; 0x3a1c <__vector_8+0x40>
	{
		(*timer1PtrCallBack)();
    3a12:	e0 91 94 00 	lds	r30, 0x0094
    3a16:	f0 91 95 00 	lds	r31, 0x0095
    3a1a:	09 95       	icall
	}
}
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	ff 91       	pop	r31
    3a22:	ef 91       	pop	r30
    3a24:	bf 91       	pop	r27
    3a26:	af 91       	pop	r26
    3a28:	9f 91       	pop	r25
    3a2a:	8f 91       	pop	r24
    3a2c:	7f 91       	pop	r23
    3a2e:	6f 91       	pop	r22
    3a30:	5f 91       	pop	r21
    3a32:	4f 91       	pop	r20
    3a34:	3f 91       	pop	r19
    3a36:	2f 91       	pop	r18
    3a38:	0f 90       	pop	r0
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	0f 90       	pop	r0
    3a3e:	1f 90       	pop	r1
    3a40:	18 95       	reti

00003a42 <Timer0_Init>:
static u16 ovf_counts_for_delay_fn;
static u16 ovf_count;
static u8 ovf_counts_for_delay_fn_CTC;
void (*Timer0_callback_fns[2]) (void) = {NULL};
void Timer0_Init(Timer0_cfg* cfg)
{
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	00 d0       	rcall	.+0      	; 0x3a48 <Timer0_Init+0x6>
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	9a 83       	std	Y+2, r25	; 0x02
    3a4e:	89 83       	std	Y+1, r24	; 0x01
	/*CHOOSE MODE*/
	TIMER0_R_BASE->TCCR0.bits.bit6 = READBIT(cfg->mode, 0);
    3a50:	a2 e5       	ldi	r26, 0x52	; 82
    3a52:	b0 e0       	ldi	r27, 0x00	; 0
    3a54:	e9 81       	ldd	r30, Y+1	; 0x01
    3a56:	fa 81       	ldd	r31, Y+2	; 0x02
    3a58:	80 81       	ld	r24, Z
    3a5a:	81 70       	andi	r24, 0x01	; 1
    3a5c:	81 70       	andi	r24, 0x01	; 1
    3a5e:	81 70       	andi	r24, 0x01	; 1
    3a60:	81 70       	andi	r24, 0x01	; 1
    3a62:	98 2f       	mov	r25, r24
    3a64:	92 95       	swap	r25
    3a66:	99 0f       	add	r25, r25
    3a68:	99 0f       	add	r25, r25
    3a6a:	90 7c       	andi	r25, 0xC0	; 192
    3a6c:	11 96       	adiw	r26, 0x01	; 1
    3a6e:	8c 91       	ld	r24, X
    3a70:	11 97       	sbiw	r26, 0x01	; 1
    3a72:	8f 7b       	andi	r24, 0xBF	; 191
    3a74:	89 2b       	or	r24, r25
    3a76:	11 96       	adiw	r26, 0x01	; 1
    3a78:	8c 93       	st	X, r24
	TIMER0_R_BASE->TCCR0.bits.bit3 = READBIT(cfg->mode, 1);
    3a7a:	a2 e5       	ldi	r26, 0x52	; 82
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a80:	fa 81       	ldd	r31, Y+2	; 0x02
    3a82:	80 81       	ld	r24, Z
    3a84:	86 95       	lsr	r24
    3a86:	81 70       	andi	r24, 0x01	; 1
    3a88:	81 70       	andi	r24, 0x01	; 1
    3a8a:	81 70       	andi	r24, 0x01	; 1
    3a8c:	81 70       	andi	r24, 0x01	; 1
    3a8e:	98 2f       	mov	r25, r24
    3a90:	99 0f       	add	r25, r25
    3a92:	99 0f       	add	r25, r25
    3a94:	99 0f       	add	r25, r25
    3a96:	11 96       	adiw	r26, 0x01	; 1
    3a98:	8c 91       	ld	r24, X
    3a9a:	11 97       	sbiw	r26, 0x01	; 1
    3a9c:	87 7f       	andi	r24, 0xF7	; 247
    3a9e:	89 2b       	or	r24, r25
    3aa0:	11 96       	adiw	r26, 0x01	; 1
    3aa2:	8c 93       	st	X, r24
    3aa4:	11 97       	sbiw	r26, 0x01	; 1

	/*set  Force Output Compare*/
	if(cfg ->mode == T0_CTC || cfg->mode == Normal)
    3aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    3aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    3aaa:	80 81       	ld	r24, Z
    3aac:	82 30       	cpi	r24, 0x02	; 2
    3aae:	29 f0       	breq	.+10     	; 0x3aba <Timer0_Init+0x78>
    3ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab4:	80 81       	ld	r24, Z
    3ab6:	88 23       	and	r24, r24
    3ab8:	31 f4       	brne	.+12     	; 0x3ac6 <Timer0_Init+0x84>
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 1;
    3aba:	e2 e5       	ldi	r30, 0x52	; 82
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	81 81       	ldd	r24, Z+1	; 0x01
    3ac0:	80 68       	ori	r24, 0x80	; 128
    3ac2:	81 83       	std	Z+1, r24	; 0x01
    3ac4:	05 c0       	rjmp	.+10     	; 0x3ad0 <Timer0_Init+0x8e>
	}
	else
	{
		TIMER0_R_BASE ->TCCR0.bits.bit7 = 0;
    3ac6:	e2 e5       	ldi	r30, 0x52	; 82
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	81 81       	ldd	r24, Z+1	; 0x01
    3acc:	8f 77       	andi	r24, 0x7F	; 127
    3ace:	81 83       	std	Z+1, r24	; 0x01
	}

	/*Compare Match Output Mode*/
	TIMER0_R_BASE ->TCCR0.bits.bit4 = READBIT(cfg ->CMP_MODE, 0);
    3ad0:	a2 e5       	ldi	r26, 0x52	; 82
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad8:	82 81       	ldd	r24, Z+2	; 0x02
    3ada:	81 70       	andi	r24, 0x01	; 1
    3adc:	81 70       	andi	r24, 0x01	; 1
    3ade:	81 70       	andi	r24, 0x01	; 1
    3ae0:	81 70       	andi	r24, 0x01	; 1
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	92 95       	swap	r25
    3ae6:	90 7f       	andi	r25, 0xF0	; 240
    3ae8:	11 96       	adiw	r26, 0x01	; 1
    3aea:	8c 91       	ld	r24, X
    3aec:	11 97       	sbiw	r26, 0x01	; 1
    3aee:	8f 7e       	andi	r24, 0xEF	; 239
    3af0:	89 2b       	or	r24, r25
    3af2:	11 96       	adiw	r26, 0x01	; 1
    3af4:	8c 93       	st	X, r24
	TIMER0_R_BASE ->TCCR0.bits.bit5 = READBIT(cfg ->CMP_MODE, 1);
    3af6:	a2 e5       	ldi	r26, 0x52	; 82
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	e9 81       	ldd	r30, Y+1	; 0x01
    3afc:	fa 81       	ldd	r31, Y+2	; 0x02
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	86 95       	lsr	r24
    3b02:	81 70       	andi	r24, 0x01	; 1
    3b04:	81 70       	andi	r24, 0x01	; 1
    3b06:	81 70       	andi	r24, 0x01	; 1
    3b08:	81 70       	andi	r24, 0x01	; 1
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	92 95       	swap	r25
    3b0e:	99 0f       	add	r25, r25
    3b10:	90 7e       	andi	r25, 0xE0	; 224
    3b12:	11 96       	adiw	r26, 0x01	; 1
    3b14:	8c 91       	ld	r24, X
    3b16:	11 97       	sbiw	r26, 0x01	; 1
    3b18:	8f 7d       	andi	r24, 0xDF	; 223
    3b1a:	89 2b       	or	r24, r25
    3b1c:	11 96       	adiw	r26, 0x01	; 1
    3b1e:	8c 93       	st	X, r24


	/*select prescaler*/
	TIMER0_R_BASE->TCCR0.ALL_BITS |= (cfg ->pre & (111<<0));
    3b20:	a2 e5       	ldi	r26, 0x52	; 82
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	e2 e5       	ldi	r30, 0x52	; 82
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	81 81       	ldd	r24, Z+1	; 0x01
    3b2a:	98 2f       	mov	r25, r24
    3b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b30:	81 81       	ldd	r24, Z+1	; 0x01
    3b32:	8f 76       	andi	r24, 0x6F	; 111
    3b34:	89 2b       	or	r24, r25
    3b36:	11 96       	adiw	r26, 0x01	; 1
    3b38:	8c 93       	st	X, r24
    3b3a:	11 97       	sbiw	r26, 0x01	; 1

	ovf_count=0;
    3b3c:	10 92 a0 00 	sts	0x00A0, r1
    3b40:	10 92 9f 00 	sts	0x009F, r1
}
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <Timer_start>:

void Timer_start(TIMER0_PRESCALER pre)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	0f 92       	push	r0
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_R_BASE->TCCR0.ALL_BITS &= (pre & ~(111<<0));
    3b5a:	a2 e5       	ldi	r26, 0x52	; 82
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e2 e5       	ldi	r30, 0x52	; 82
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	81 81       	ldd	r24, Z+1	; 0x01
    3b64:	98 2f       	mov	r25, r24
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	80 79       	andi	r24, 0x90	; 144
    3b6a:	89 23       	and	r24, r25
    3b6c:	11 96       	adiw	r26, 0x01	; 1
    3b6e:	8c 93       	st	X, r24

	TIMER0_R_BASE->TCCR0.ALL_BITS |= (pre & (111<<0));
    3b70:	a2 e5       	ldi	r26, 0x52	; 82
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	e2 e5       	ldi	r30, 0x52	; 82
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	81 81       	ldd	r24, Z+1	; 0x01
    3b7a:	98 2f       	mov	r25, r24
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	8f 76       	andi	r24, 0x6F	; 111
    3b80:	89 2b       	or	r24, r25
    3b82:	11 96       	adiw	r26, 0x01	; 1
    3b84:	8c 93       	st	X, r24
    3b86:	11 97       	sbiw	r26, 0x01	; 1
	ovf_count=0;
    3b88:	10 92 a0 00 	sts	0x00A0, r1
    3b8c:	10 92 9f 00 	sts	0x009F, r1
}
    3b90:	0f 90       	pop	r0
    3b92:	cf 91       	pop	r28
    3b94:	df 91       	pop	r29
    3b96:	08 95       	ret

00003b98 <Timer_stop>:

void Timer_stop()
{
    3b98:	df 93       	push	r29
    3b9a:	cf 93       	push	r28
    3b9c:	cd b7       	in	r28, 0x3d	; 61
    3b9e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_R_BASE->TCCR0.ALL_BITS &= ~(111<<0);
    3ba0:	a2 e5       	ldi	r26, 0x52	; 82
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
    3ba4:	e2 e5       	ldi	r30, 0x52	; 82
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	81 81       	ldd	r24, Z+1	; 0x01
    3baa:	80 79       	andi	r24, 0x90	; 144
    3bac:	11 96       	adiw	r26, 0x01	; 1
    3bae:	8c 93       	st	X, r24
    3bb0:	11 97       	sbiw	r26, 0x01	; 1
}
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <Timer_GetCounts>:

u16 Timer_GetCounts()
{
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
	return ovf_count;
    3bc0:	80 91 9f 00 	lds	r24, 0x009F
    3bc4:	90 91 a0 00 	lds	r25, 0x00A0
}
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <Timer0_delay>:

u8 ov_flag=0;
void Timer0_delay(void)
{
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
	static u16 c=0;
	c++;
    3bd6:	80 91 9b 00 	lds	r24, 0x009B
    3bda:	90 91 9c 00 	lds	r25, 0x009C
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	90 93 9c 00 	sts	0x009C, r25
    3be4:	80 93 9b 00 	sts	0x009B, r24
	if (c==ovf_counts_for_delay_fn)
    3be8:	20 91 9b 00 	lds	r18, 0x009B
    3bec:	30 91 9c 00 	lds	r19, 0x009C
    3bf0:	80 91 9d 00 	lds	r24, 0x009D
    3bf4:	90 91 9e 00 	lds	r25, 0x009E
    3bf8:	28 17       	cp	r18, r24
    3bfa:	39 07       	cpc	r19, r25
    3bfc:	39 f4       	brne	.+14     	; 0x3c0c <Timer0_delay+0x3e>
	{
		ov_flag=1;
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	80 93 9a 00 	sts	0x009A, r24
		c=0;
    3c04:	10 92 9c 00 	sts	0x009C, r1
    3c08:	10 92 9b 00 	sts	0x009B, r1
	}
}
    3c0c:	cf 91       	pop	r28
    3c0e:	df 91       	pop	r29
    3c10:	08 95       	ret

00003c12 <Timer_setDelayTimeMilliSec>:
void Timer_setDelayTimeMilliSec(u32 delay_in_ms, Timer0_Mode mode)
{
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	63 97       	sbiw	r28, 0x13	; 19
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	6d 87       	std	Y+13, r22	; 0x0d
    3c28:	7e 87       	std	Y+14, r23	; 0x0e
    3c2a:	8f 87       	std	Y+15, r24	; 0x0f
    3c2c:	98 8b       	std	Y+16, r25	; 0x10
    3c2e:	49 8b       	std	Y+17, r20	; 0x11
	/*too-much-delay*/
	Timer_start(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0));
    3c30:	e2 e5       	ldi	r30, 0x52	; 82
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	81 81       	ldd	r24, Z+1	; 0x01
    3c36:	8f 76       	andi	r24, 0x6F	; 111
    3c38:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <Timer_start>
	u32 tick=(TIMER0_R_BASE->TCCR0.ALL_BITS &(111<<0))/FCPU;
    3c3c:	e2 e5       	ldi	r30, 0x52	; 82
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	81 81       	ldd	r24, Z+1	; 0x01
    3c42:	88 2f       	mov	r24, r24
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	8f 76       	andi	r24, 0x6F	; 111
    3c48:	90 70       	andi	r25, 0x00	; 0
    3c4a:	9b 8b       	std	Y+19, r25	; 0x13
    3c4c:	8a 8b       	std	Y+18, r24	; 0x12
    3c4e:	8a 89       	ldd	r24, Y+18	; 0x12
    3c50:	9b 89       	ldd	r25, Y+19	; 0x13
    3c52:	99 23       	and	r25, r25
    3c54:	2c f4       	brge	.+10     	; 0x3c60 <Timer_setDelayTimeMilliSec+0x4e>
    3c56:	8a 89       	ldd	r24, Y+18	; 0x12
    3c58:	9b 89       	ldd	r25, Y+19	; 0x13
    3c5a:	0f 96       	adiw	r24, 0x0f	; 15
    3c5c:	9b 8b       	std	Y+19, r25	; 0x13
    3c5e:	8a 8b       	std	Y+18, r24	; 0x12
    3c60:	8a 89       	ldd	r24, Y+18	; 0x12
    3c62:	9b 89       	ldd	r25, Y+19	; 0x13
    3c64:	95 95       	asr	r25
    3c66:	87 95       	ror	r24
    3c68:	95 95       	asr	r25
    3c6a:	87 95       	ror	r24
    3c6c:	95 95       	asr	r25
    3c6e:	87 95       	ror	r24
    3c70:	95 95       	asr	r25
    3c72:	87 95       	ror	r24
    3c74:	aa 27       	eor	r26, r26
    3c76:	97 fd       	sbrc	r25, 7
    3c78:	a0 95       	com	r26
    3c7a:	ba 2f       	mov	r27, r26
    3c7c:	89 87       	std	Y+9, r24	; 0x09
    3c7e:	9a 87       	std	Y+10, r25	; 0x0a
    3c80:	ab 87       	std	Y+11, r26	; 0x0b
    3c82:	bc 87       	std	Y+12, r27	; 0x0c
	u32 needded_ticks=(u32)(delay_in_ms *1000)/tick;
    3c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c88:	af 85       	ldd	r26, Y+15	; 0x0f
    3c8a:	b8 89       	ldd	r27, Y+16	; 0x10
    3c8c:	28 ee       	ldi	r18, 0xE8	; 232
    3c8e:	33 e0       	ldi	r19, 0x03	; 3
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsi3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	29 85       	ldd	r18, Y+9	; 0x09
    3ca2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ca4:	4b 85       	ldd	r20, Y+11	; 0x0b
    3ca6:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ca8:	bc 01       	movw	r22, r24
    3caa:	cd 01       	movw	r24, r26
    3cac:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    3cb0:	da 01       	movw	r26, r20
    3cb2:	c9 01       	movw	r24, r18
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	9e 83       	std	Y+6, r25	; 0x06
    3cb8:	af 83       	std	Y+7, r26	; 0x07
    3cba:	b8 87       	std	Y+8, r27	; 0x08

	ovf_counts_for_delay_fn=needded_ticks/256;
    3cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc0:	af 81       	ldd	r26, Y+7	; 0x07
    3cc2:	b8 85       	ldd	r27, Y+8	; 0x08
    3cc4:	89 2f       	mov	r24, r25
    3cc6:	9a 2f       	mov	r25, r26
    3cc8:	ab 2f       	mov	r26, r27
    3cca:	bb 27       	eor	r27, r27
    3ccc:	90 93 9e 00 	sts	0x009E, r25
    3cd0:	80 93 9d 00 	sts	0x009D, r24
	u32 OVF_Rem=needded_ticks%256;
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	af 81       	ldd	r26, Y+7	; 0x07
    3cda:	b8 85       	ldd	r27, Y+8	; 0x08
    3cdc:	90 70       	andi	r25, 0x00	; 0
    3cde:	a0 70       	andi	r26, 0x00	; 0
    3ce0:	b0 70       	andi	r27, 0x00	; 0
    3ce2:	89 83       	std	Y+1, r24	; 0x01
    3ce4:	9a 83       	std	Y+2, r25	; 0x02
    3ce6:	ab 83       	std	Y+3, r26	; 0x03
    3ce8:	bc 83       	std	Y+4, r27	; 0x04
	if (OVF_Rem !=0)
    3cea:	89 81       	ldd	r24, Y+1	; 0x01
    3cec:	9a 81       	ldd	r25, Y+2	; 0x02
    3cee:	ab 81       	ldd	r26, Y+3	; 0x03
    3cf0:	bc 81       	ldd	r27, Y+4	; 0x04
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	a1 05       	cpc	r26, r1
    3cf6:	b1 05       	cpc	r27, r1
    3cf8:	71 f0       	breq	.+28     	; 0x3d16 <Timer_setDelayTimeMilliSec+0x104>
	{
		ovf_counts_for_delay_fn++;
    3cfa:	80 91 9d 00 	lds	r24, 0x009D
    3cfe:	90 91 9e 00 	lds	r25, 0x009E
    3d02:	01 96       	adiw	r24, 0x01	; 1
    3d04:	90 93 9e 00 	sts	0x009E, r25
    3d08:	80 93 9d 00 	sts	0x009D, r24
		TIMER0_R_BASE->TCNT0.ALL_BITS =256-OVF_Rem;
    3d0c:	e2 e5       	ldi	r30, 0x52	; 82
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	89 81       	ldd	r24, Y+1	; 0x01
    3d12:	81 95       	neg	r24
    3d14:	80 83       	st	Z, r24
	}
	setCallBack(Timer0_delay, Normal);
    3d16:	87 ee       	ldi	r24, 0xE7	; 231
    3d18:	9d e1       	ldi	r25, 0x1D	; 29
    3d1a:	60 e0       	ldi	r22, 0x00	; 0
    3d1c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <setCallBack>
	while(ov_flag==0);
    3d20:	80 91 9a 00 	lds	r24, 0x009A
    3d24:	88 23       	and	r24, r24
    3d26:	e1 f3       	breq	.-8      	; 0x3d20 <Timer_setDelayTimeMilliSec+0x10e>
	ov_flag=0;
    3d28:	10 92 9a 00 	sts	0x009A, r1
}
    3d2c:	63 96       	adiw	r28, 0x13	; 19
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <setCallBack>:
	else if(mode == T0_CTC)
		TIMER0_R_BASE->TIMSK.ALL_BITS &= ~(1<<1);
}
*/
void setCallBack(void (*ptr_to_callback)(void), modes_IDs mode_id)
{
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <setCallBack+0x6>
    3d44:	0f 92       	push	r0
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	9a 83       	std	Y+2, r25	; 0x02
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	6b 83       	std	Y+3, r22	; 0x03
	Timer0_callback_fns[mode_id] = ptr_to_callback;
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	88 2f       	mov	r24, r24
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	ea 56       	subi	r30, 0x6A	; 106
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
}
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	cf 91       	pop	r28
    3d70:	df 91       	pop	r29
    3d72:	08 95       	ret

00003d74 <setFastPWM>:

void setFastPWM(u8 Duty)
{
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	0f 92       	push	r0
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	89 83       	std	Y+1, r24	; 0x01
	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == NON_INVERTING)
    3d80:	e2 e5       	ldi	r30, 0x52	; 82
    3d82:	f0 e0       	ldi	r31, 0x00	; 0
    3d84:	81 81       	ldd	r24, Z+1	; 0x01
    3d86:	88 2f       	mov	r24, r24
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	80 7b       	andi	r24, 0xB0	; 176
    3d8c:	90 70       	andi	r25, 0x00	; 0
    3d8e:	95 95       	asr	r25
    3d90:	87 95       	ror	r24
    3d92:	95 95       	asr	r25
    3d94:	87 95       	ror	r24
    3d96:	95 95       	asr	r25
    3d98:	87 95       	ror	r24
    3d9a:	95 95       	asr	r25
    3d9c:	87 95       	ror	r24
    3d9e:	82 30       	cpi	r24, 0x02	; 2
    3da0:	91 05       	cpc	r25, r1
    3da2:	e9 f4       	brne	.+58     	; 0x3dde <setFastPWM+0x6a>
	{
		if (Duty <=100)
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	85 36       	cpi	r24, 0x65	; 101
    3da8:	d0 f4       	brcc	.+52     	; 0x3dde <setFastPWM+0x6a>
		{
			TIMER0_R_BASE ->OCR0.ALL_BITS = ((Duty * 255)/100);
    3daa:	e2 e5       	ldi	r30, 0x52	; 82
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	48 2f       	mov	r20, r24
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	ca 01       	movw	r24, r20
    3db6:	9c 01       	movw	r18, r24
    3db8:	22 0f       	add	r18, r18
    3dba:	33 1f       	adc	r19, r19
    3dbc:	c9 01       	movw	r24, r18
    3dbe:	96 95       	lsr	r25
    3dc0:	98 2f       	mov	r25, r24
    3dc2:	88 27       	eor	r24, r24
    3dc4:	97 95       	ror	r25
    3dc6:	87 95       	ror	r24
    3dc8:	82 1b       	sub	r24, r18
    3dca:	93 0b       	sbc	r25, r19
    3dcc:	84 0f       	add	r24, r20
    3dce:	95 1f       	adc	r25, r21
    3dd0:	24 e6       	ldi	r18, 0x64	; 100
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	b9 01       	movw	r22, r18
    3dd6:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__divmodhi4>
    3dda:	cb 01       	movw	r24, r22
    3ddc:	82 87       	std	Z+10, r24	; 0x0a
		}
	}

	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == INVERTING)
    3dde:	e2 e5       	ldi	r30, 0x52	; 82
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	81 81       	ldd	r24, Z+1	; 0x01
    3de4:	88 2f       	mov	r24, r24
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	80 7b       	andi	r24, 0xB0	; 176
    3dea:	90 70       	andi	r25, 0x00	; 0
    3dec:	95 95       	asr	r25
    3dee:	87 95       	ror	r24
    3df0:	95 95       	asr	r25
    3df2:	87 95       	ror	r24
    3df4:	95 95       	asr	r25
    3df6:	87 95       	ror	r24
    3df8:	95 95       	asr	r25
    3dfa:	87 95       	ror	r24
    3dfc:	83 30       	cpi	r24, 0x03	; 3
    3dfe:	91 05       	cpc	r25, r1
    3e00:	f1 f4       	brne	.+60     	; 0x3e3e <setFastPWM+0xca>
	{
		if (Duty <=100){
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	85 36       	cpi	r24, 0x65	; 101
    3e06:	d8 f4       	brcc	.+54     	; 0x3e3e <setFastPWM+0xca>
			TIMER0_R_BASE ->OCR0.ALL_BITS = 255 - (((Duty * 255)/100 ));
    3e08:	e2 e5       	ldi	r30, 0x52	; 82
    3e0a:	f0 e0       	ldi	r31, 0x00	; 0
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	48 2f       	mov	r20, r24
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	ca 01       	movw	r24, r20
    3e14:	9c 01       	movw	r18, r24
    3e16:	22 0f       	add	r18, r18
    3e18:	33 1f       	adc	r19, r19
    3e1a:	c9 01       	movw	r24, r18
    3e1c:	96 95       	lsr	r25
    3e1e:	98 2f       	mov	r25, r24
    3e20:	88 27       	eor	r24, r24
    3e22:	97 95       	ror	r25
    3e24:	87 95       	ror	r24
    3e26:	82 1b       	sub	r24, r18
    3e28:	93 0b       	sbc	r25, r19
    3e2a:	84 0f       	add	r24, r20
    3e2c:	95 1f       	adc	r25, r21
    3e2e:	24 e6       	ldi	r18, 0x64	; 100
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	b9 01       	movw	r22, r18
    3e34:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__divmodhi4>
    3e38:	cb 01       	movw	r24, r22
    3e3a:	80 95       	com	r24
    3e3c:	82 87       	std	Z+10, r24	; 0x0a
		}
	}

}
    3e3e:	0f 90       	pop	r0
    3e40:	cf 91       	pop	r28
    3e42:	df 91       	pop	r29
    3e44:	08 95       	ret

00003e46 <setphaseCorrectPWM>:
void setphaseCorrectPWM(u8 duty)
{
    3e46:	0f 93       	push	r16
    3e48:	1f 93       	push	r17
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	0f 92       	push	r0
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62
    3e54:	89 83       	std	Y+1, r24	; 0x01
	if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == NON_INVERTING)
    3e56:	e2 e5       	ldi	r30, 0x52	; 82
    3e58:	f0 e0       	ldi	r31, 0x00	; 0
    3e5a:	81 81       	ldd	r24, Z+1	; 0x01
    3e5c:	88 2f       	mov	r24, r24
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	80 7b       	andi	r24, 0xB0	; 176
    3e62:	90 70       	andi	r25, 0x00	; 0
    3e64:	95 95       	asr	r25
    3e66:	87 95       	ror	r24
    3e68:	95 95       	asr	r25
    3e6a:	87 95       	ror	r24
    3e6c:	95 95       	asr	r25
    3e6e:	87 95       	ror	r24
    3e70:	95 95       	asr	r25
    3e72:	87 95       	ror	r24
    3e74:	82 30       	cpi	r24, 0x02	; 2
    3e76:	91 05       	cpc	r25, r1
    3e78:	f1 f4       	brne	.+60     	; 0x3eb6 <setphaseCorrectPWM+0x70>
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = (u8)(((u32)duty*MAX_OCR0)/100);
    3e7a:	02 e5       	ldi	r16, 0x52	; 82
    3e7c:	10 e0       	ldi	r17, 0x00	; 0
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	88 2f       	mov	r24, r24
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	a0 e0       	ldi	r26, 0x00	; 0
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	2f ef       	ldi	r18, 0xFF	; 255
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e0       	ldi	r20, 0x00	; 0
    3e8e:	50 e0       	ldi	r21, 0x00	; 0
    3e90:	bc 01       	movw	r22, r24
    3e92:	cd 01       	movw	r24, r26
    3e94:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsi3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	24 e6       	ldi	r18, 0x64	; 100
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e0       	ldi	r20, 0x00	; 0
    3ea2:	50 e0       	ldi	r21, 0x00	; 0
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	cd 01       	movw	r24, r26
    3ea8:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    3eac:	da 01       	movw	r26, r20
    3eae:	c9 01       	movw	r24, r18
    3eb0:	f8 01       	movw	r30, r16
    3eb2:	82 87       	std	Z+10, r24	; 0x0a
    3eb4:	30 c0       	rjmp	.+96     	; 0x3f16 <setphaseCorrectPWM+0xd0>
	}
	else if((TIMER0_R_BASE->TCCR0.ALL_BITS & (11<<4))>>4 == INVERTING)
    3eb6:	e2 e5       	ldi	r30, 0x52	; 82
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	81 81       	ldd	r24, Z+1	; 0x01
    3ebc:	88 2f       	mov	r24, r24
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	80 7b       	andi	r24, 0xB0	; 176
    3ec2:	90 70       	andi	r25, 0x00	; 0
    3ec4:	95 95       	asr	r25
    3ec6:	87 95       	ror	r24
    3ec8:	95 95       	asr	r25
    3eca:	87 95       	ror	r24
    3ecc:	95 95       	asr	r25
    3ece:	87 95       	ror	r24
    3ed0:	95 95       	asr	r25
    3ed2:	87 95       	ror	r24
    3ed4:	83 30       	cpi	r24, 0x03	; 3
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	f1 f4       	brne	.+60     	; 0x3f16 <setphaseCorrectPWM+0xd0>
	{
		TIMER0_R_BASE ->OCR0.ALL_BITS = (u8)(MAX_OCR0-(((u32)duty*MAX_OCR0)/100));
    3eda:	02 e5       	ldi	r16, 0x52	; 82
    3edc:	10 e0       	ldi	r17, 0x00	; 0
    3ede:	89 81       	ldd	r24, Y+1	; 0x01
    3ee0:	88 2f       	mov	r24, r24
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	a0 e0       	ldi	r26, 0x00	; 0
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	2f ef       	ldi	r18, 0xFF	; 255
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	cd 01       	movw	r24, r26
    3ef4:	0e 94 b6 21 	call	0x436c	; 0x436c <__mulsi3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	24 e6       	ldi	r18, 0x64	; 100
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e0       	ldi	r20, 0x00	; 0
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <__udivmodsi4>
    3f0c:	da 01       	movw	r26, r20
    3f0e:	c9 01       	movw	r24, r18
    3f10:	80 95       	com	r24
    3f12:	f8 01       	movw	r30, r16
    3f14:	82 87       	std	Z+10, r24	; 0x0a
	}
}
    3f16:	0f 90       	pop	r0
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	1f 91       	pop	r17
    3f1e:	0f 91       	pop	r16
    3f20:	08 95       	ret

00003f22 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    3f22:	1f 92       	push	r1
    3f24:	0f 92       	push	r0
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	0f 92       	push	r0
    3f2a:	11 24       	eor	r1, r1
    3f2c:	2f 93       	push	r18
    3f2e:	3f 93       	push	r19
    3f30:	4f 93       	push	r20
    3f32:	5f 93       	push	r21
    3f34:	6f 93       	push	r22
    3f36:	7f 93       	push	r23
    3f38:	8f 93       	push	r24
    3f3a:	9f 93       	push	r25
    3f3c:	af 93       	push	r26
    3f3e:	bf 93       	push	r27
    3f40:	ef 93       	push	r30
    3f42:	ff 93       	push	r31
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62

	ovf_count++; //for get_count fn
    3f4c:	80 91 9f 00 	lds	r24, 0x009F
    3f50:	90 91 a0 00 	lds	r25, 0x00A0
    3f54:	01 96       	adiw	r24, 0x01	; 1
    3f56:	90 93 a0 00 	sts	0x00A0, r25
    3f5a:	80 93 9f 00 	sts	0x009F, r24

	if(Timer0_callback_fns[Normal_ID] != NULL)
    3f5e:	80 91 96 00 	lds	r24, 0x0096
    3f62:	90 91 97 00 	lds	r25, 0x0097
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	29 f0       	breq	.+10     	; 0x3f74 <__vector_11+0x52>
		Timer0_callback_fns[Normal_ID]();
    3f6a:	e0 91 96 00 	lds	r30, 0x0096
    3f6e:	f0 91 97 00 	lds	r31, 0x0097
    3f72:	09 95       	icall

}
    3f74:	cf 91       	pop	r28
    3f76:	df 91       	pop	r29
    3f78:	ff 91       	pop	r31
    3f7a:	ef 91       	pop	r30
    3f7c:	bf 91       	pop	r27
    3f7e:	af 91       	pop	r26
    3f80:	9f 91       	pop	r25
    3f82:	8f 91       	pop	r24
    3f84:	7f 91       	pop	r23
    3f86:	6f 91       	pop	r22
    3f88:	5f 91       	pop	r21
    3f8a:	4f 91       	pop	r20
    3f8c:	3f 91       	pop	r19
    3f8e:	2f 91       	pop	r18
    3f90:	0f 90       	pop	r0
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	0f 90       	pop	r0
    3f96:	1f 90       	pop	r1
    3f98:	18 95       	reti

00003f9a <__vector_10>:

ISR(TIMER0_OC_vect)
{
    3f9a:	1f 92       	push	r1
    3f9c:	0f 92       	push	r0
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	0f 92       	push	r0
    3fa2:	11 24       	eor	r1, r1
    3fa4:	2f 93       	push	r18
    3fa6:	3f 93       	push	r19
    3fa8:	4f 93       	push	r20
    3faa:	5f 93       	push	r21
    3fac:	6f 93       	push	r22
    3fae:	7f 93       	push	r23
    3fb0:	8f 93       	push	r24
    3fb2:	9f 93       	push	r25
    3fb4:	af 93       	push	r26
    3fb6:	bf 93       	push	r27
    3fb8:	ef 93       	push	r30
    3fba:	ff 93       	push	r31
    3fbc:	df 93       	push	r29
    3fbe:	cf 93       	push	r28
    3fc0:	cd b7       	in	r28, 0x3d	; 61
    3fc2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callback_fns[CTC_ID] != NULL)
    3fc4:	80 91 98 00 	lds	r24, 0x0098
    3fc8:	90 91 99 00 	lds	r25, 0x0099
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	29 f0       	breq	.+10     	; 0x3fda <__vector_10+0x40>
		Timer0_callback_fns[CTC_ID]();
    3fd0:	e0 91 98 00 	lds	r30, 0x0098
    3fd4:	f0 91 99 00 	lds	r31, 0x0099
    3fd8:	09 95       	icall


}
    3fda:	cf 91       	pop	r28
    3fdc:	df 91       	pop	r29
    3fde:	ff 91       	pop	r31
    3fe0:	ef 91       	pop	r30
    3fe2:	bf 91       	pop	r27
    3fe4:	af 91       	pop	r26
    3fe6:	9f 91       	pop	r25
    3fe8:	8f 91       	pop	r24
    3fea:	7f 91       	pop	r23
    3fec:	6f 91       	pop	r22
    3fee:	5f 91       	pop	r21
    3ff0:	4f 91       	pop	r20
    3ff2:	3f 91       	pop	r19
    3ff4:	2f 91       	pop	r18
    3ff6:	0f 90       	pop	r0
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	0f 90       	pop	r0
    3ffc:	1f 90       	pop	r1
    3ffe:	18 95       	reti

00004000 <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    4008:	80 91 a2 00 	lds	r24, 0x00A2
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	80 93 a2 00 	sts	0x00A2, r24
	if(g_edgeCount == 1)
    4012:	80 91 a2 00 	lds	r24, 0x00A2
    4016:	81 30       	cpi	r24, 0x01	; 1
    4018:	d1 f4       	brne	.+52     	; 0x404e <Ultrasonic_edgeProcessing+0x4e>
	{
		LCD_void_sendIntNum(ICR1_REG);
    401a:	e6 e4       	ldi	r30, 0x46	; 70
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	80 81       	ld	r24, Z
    4020:	91 81       	ldd	r25, Z+1	; 0x01
    4022:	cc 01       	movw	r24, r24
    4024:	a0 e0       	ldi	r26, 0x00	; 0
    4026:	b0 e0       	ldi	r27, 0x00	; 0
    4028:	bc 01       	movw	r22, r24
    402a:	cd 01       	movw	r24, r26
    402c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_void_sendIntNum>

		LCD_void_sendIntNum(TIMER1_GetInputCaptureValue());
    4030:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <TIMER1_GetInputCaptureValue>
    4034:	cc 01       	movw	r24, r24
    4036:	a0 e0       	ldi	r26, 0x00	; 0
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_void_sendIntNum>
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		TIMER1_ClearTimerValue();
    4042:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <TIMER1_ClearTimerValue>
		/* Detect falling edge */
		TIMER1_SetInputCaptureEdgeDetection(FALLING_EDGE);
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <TIMER1_SetInputCaptureEdgeDetection>
    404c:	0d c0       	rjmp	.+26     	; 0x4068 <Ultrasonic_edgeProcessing+0x68>
	}
	else if(g_edgeCount == 2)
    404e:	80 91 a2 00 	lds	r24, 0x00A2
    4052:	82 30       	cpi	r24, 0x02	; 2
    4054:	49 f4       	brne	.+18     	; 0x4068 <Ultrasonic_edgeProcessing+0x68>
	{
		/* Store the High time value */
		g_timeHigh = TIMER1_GetInputCaptureValue();
    4056:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <TIMER1_GetInputCaptureValue>
    405a:	90 93 a4 00 	sts	0x00A4, r25
    405e:	80 93 a3 00 	sts	0x00A3, r24

		/* Detect rising edge */
		TIMER1_SetInputCaptureEdgeDetection(RISING_EDGE);
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <TIMER1_SetInputCaptureEdgeDetection>
	}
}
    4068:	cf 91       	pop	r28
    406a:	df 91       	pop	r29
    406c:	08 95       	ret

0000406e <Ultrasonic_init>:

void Ultrasonic_init(void)
{
    406e:	df 93       	push	r29
    4070:	cf 93       	push	r28
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62

	/*enable ICU interrupt*/
	//TIMER1_ICU_IntEnable();

	/*set ICU callback fn*/
		TIMER1_SetCallBack(Ultrasonic_edgeProcessing);
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e2       	ldi	r25, 0x20	; 32
    407a:	0e 94 48 1b 	call	0x3690	; 0x3690 <TIMER1_SetCallBack>

	/* Detect rising edge */
	TIMER1_SetInputCaptureEdgeDetection(RISING_EDGE);
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <TIMER1_SetInputCaptureEdgeDetection>

	/*setup trigger pin as output*/
	DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, OUTPUT);
    4084:	80 e3       	ldi	r24, 0x30	; 48
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	65 e0       	ldi	r22, 0x05	; 5
    408a:	41 e0       	ldi	r20, 0x01	; 1
    408c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>

	/*setup icp pin as input*/
	DIO_voidSetPinDirection(PERIPHRAL_D, 6, INPUT);
    4090:	80 e3       	ldi	r24, 0x30	; 48
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	66 e0       	ldi	r22, 0x06	; 6
    4096:	40 e0       	ldi	r20, 0x00	; 0
    4098:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>

	/*enable ICU interrupt*/
	TIMER1_EnableICU();
    409c:	0e 94 10 1c 	call	0x3820	; 0x3820 <TIMER1_EnableICU>
}
    40a0:	cf 91       	pop	r28
    40a2:	df 91       	pop	r29
    40a4:	08 95       	ret

000040a6 <Ultrasonic_Trigger>:
/*
 * Description :
 * send the trigger pulse to the ultrasonic.
 */
void Ultrasonic_Trigger(void)
{
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
    40ae:	68 97       	sbiw	r28, 0x18	; 24
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	f8 94       	cli
    40b4:	de bf       	out	0x3e, r29	; 62
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_HIGH);
    40ba:	80 e3       	ldi	r24, 0x30	; 48
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	65 e0       	ldi	r22, 0x05	; 5
    40c0:	41 e0       	ldi	r20, 0x01	; 1
    40c2:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	a0 e2       	ldi	r26, 0x20	; 32
    40cc:	b1 e4       	ldi	r27, 0x41	; 65
    40ce:	8d 8b       	std	Y+21, r24	; 0x15
    40d0:	9e 8b       	std	Y+22, r25	; 0x16
    40d2:	af 8b       	std	Y+23, r26	; 0x17
    40d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40d6:	6d 89       	ldd	r22, Y+21	; 0x15
    40d8:	7e 89       	ldd	r23, Y+22	; 0x16
    40da:	8f 89       	ldd	r24, Y+23	; 0x17
    40dc:	98 8d       	ldd	r25, Y+24	; 0x18
    40de:	2b ea       	ldi	r18, 0xAB	; 171
    40e0:	3a ea       	ldi	r19, 0xAA	; 170
    40e2:	4a ea       	ldi	r20, 0xAA	; 170
    40e4:	5e e3       	ldi	r21, 0x3E	; 62
    40e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	89 8b       	std	Y+17, r24	; 0x11
    40f0:	9a 8b       	std	Y+18, r25	; 0x12
    40f2:	ab 8b       	std	Y+19, r26	; 0x13
    40f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    40f6:	69 89       	ldd	r22, Y+17	; 0x11
    40f8:	7a 89       	ldd	r23, Y+18	; 0x12
    40fa:	8b 89       	ldd	r24, Y+19	; 0x13
    40fc:	9c 89       	ldd	r25, Y+20	; 0x14
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e8       	ldi	r20, 0x80	; 128
    4104:	5f e3       	ldi	r21, 0x3F	; 63
    4106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    410a:	88 23       	and	r24, r24
    410c:	1c f4       	brge	.+6      	; 0x4114 <Ultrasonic_Trigger+0x6e>
		__ticks = 1;
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	88 8b       	std	Y+16, r24	; 0x10
    4112:	91 c0       	rjmp	.+290    	; 0x4236 <Ultrasonic_Trigger+0x190>
	else if (__tmp > 255)
    4114:	69 89       	ldd	r22, Y+17	; 0x11
    4116:	7a 89       	ldd	r23, Y+18	; 0x12
    4118:	8b 89       	ldd	r24, Y+19	; 0x13
    411a:	9c 89       	ldd	r25, Y+20	; 0x14
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4f e7       	ldi	r20, 0x7F	; 127
    4122:	53 e4       	ldi	r21, 0x43	; 67
    4124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4128:	18 16       	cp	r1, r24
    412a:	0c f0       	brlt	.+2      	; 0x412e <Ultrasonic_Trigger+0x88>
    412c:	7b c0       	rjmp	.+246    	; 0x4224 <Ultrasonic_Trigger+0x17e>
	{
		_delay_ms(__us / 1000.0);
    412e:	6d 89       	ldd	r22, Y+21	; 0x15
    4130:	7e 89       	ldd	r23, Y+22	; 0x16
    4132:	8f 89       	ldd	r24, Y+23	; 0x17
    4134:	98 8d       	ldd	r25, Y+24	; 0x18
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	4a e7       	ldi	r20, 0x7A	; 122
    413c:	54 e4       	ldi	r21, 0x44	; 68
    413e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	8c 87       	std	Y+12, r24	; 0x0c
    4148:	9d 87       	std	Y+13, r25	; 0x0d
    414a:	ae 87       	std	Y+14, r26	; 0x0e
    414c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    414e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4150:	7d 85       	ldd	r23, Y+13	; 0x0d
    4152:	8e 85       	ldd	r24, Y+14	; 0x0e
    4154:	9f 85       	ldd	r25, Y+15	; 0x0f
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	4a e7       	ldi	r20, 0x7A	; 122
    415c:	53 e4       	ldi	r21, 0x43	; 67
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	88 87       	std	Y+8, r24	; 0x08
    4168:	99 87       	std	Y+9, r25	; 0x09
    416a:	aa 87       	std	Y+10, r26	; 0x0a
    416c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    416e:	68 85       	ldd	r22, Y+8	; 0x08
    4170:	79 85       	ldd	r23, Y+9	; 0x09
    4172:	8a 85       	ldd	r24, Y+10	; 0x0a
    4174:	9b 85       	ldd	r25, Y+11	; 0x0b
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e8       	ldi	r20, 0x80	; 128
    417c:	5f e3       	ldi	r21, 0x3F	; 63
    417e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4182:	88 23       	and	r24, r24
    4184:	2c f4       	brge	.+10     	; 0x4190 <Ultrasonic_Trigger+0xea>
		__ticks = 1;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	9f 83       	std	Y+7, r25	; 0x07
    418c:	8e 83       	std	Y+6, r24	; 0x06
    418e:	3f c0       	rjmp	.+126    	; 0x420e <Ultrasonic_Trigger+0x168>
	else if (__tmp > 65535)
    4190:	68 85       	ldd	r22, Y+8	; 0x08
    4192:	79 85       	ldd	r23, Y+9	; 0x09
    4194:	8a 85       	ldd	r24, Y+10	; 0x0a
    4196:	9b 85       	ldd	r25, Y+11	; 0x0b
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	3f ef       	ldi	r19, 0xFF	; 255
    419c:	4f e7       	ldi	r20, 0x7F	; 127
    419e:	57 e4       	ldi	r21, 0x47	; 71
    41a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41a4:	18 16       	cp	r1, r24
    41a6:	4c f5       	brge	.+82     	; 0x41fa <Ultrasonic_Trigger+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    41aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    41ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    41ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e2       	ldi	r20, 0x20	; 32
    41b6:	51 e4       	ldi	r21, 0x41	; 65
    41b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41bc:	dc 01       	movw	r26, r24
    41be:	cb 01       	movw	r24, r22
    41c0:	bc 01       	movw	r22, r24
    41c2:	cd 01       	movw	r24, r26
    41c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	9f 83       	std	Y+7, r25	; 0x07
    41ce:	8e 83       	std	Y+6, r24	; 0x06
    41d0:	0f c0       	rjmp	.+30     	; 0x41f0 <Ultrasonic_Trigger+0x14a>
    41d2:	89 e1       	ldi	r24, 0x19	; 25
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	9d 83       	std	Y+5, r25	; 0x05
    41d8:	8c 83       	std	Y+4, r24	; 0x04
    41da:	8c 81       	ldd	r24, Y+4	; 0x04
    41dc:	9d 81       	ldd	r25, Y+5	; 0x05
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	f1 f7       	brne	.-4      	; 0x41de <Ultrasonic_Trigger+0x138>
    41e2:	9d 83       	std	Y+5, r25	; 0x05
    41e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e6:	8e 81       	ldd	r24, Y+6	; 0x06
    41e8:	9f 81       	ldd	r25, Y+7	; 0x07
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	9f 83       	std	Y+7, r25	; 0x07
    41ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f0:	8e 81       	ldd	r24, Y+6	; 0x06
    41f2:	9f 81       	ldd	r25, Y+7	; 0x07
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	69 f7       	brne	.-38     	; 0x41d2 <Ultrasonic_Trigger+0x12c>
    41f8:	24 c0       	rjmp	.+72     	; 0x4242 <Ultrasonic_Trigger+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fa:	68 85       	ldd	r22, Y+8	; 0x08
    41fc:	79 85       	ldd	r23, Y+9	; 0x09
    41fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    4200:	9b 85       	ldd	r25, Y+11	; 0x0b
    4202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	9f 83       	std	Y+7, r25	; 0x07
    420c:	8e 83       	std	Y+6, r24	; 0x06
    420e:	8e 81       	ldd	r24, Y+6	; 0x06
    4210:	9f 81       	ldd	r25, Y+7	; 0x07
    4212:	9b 83       	std	Y+3, r25	; 0x03
    4214:	8a 83       	std	Y+2, r24	; 0x02
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	9b 81       	ldd	r25, Y+3	; 0x03
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <Ultrasonic_Trigger+0x174>
    421e:	9b 83       	std	Y+3, r25	; 0x03
    4220:	8a 83       	std	Y+2, r24	; 0x02
    4222:	0f c0       	rjmp	.+30     	; 0x4242 <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4224:	69 89       	ldd	r22, Y+17	; 0x11
    4226:	7a 89       	ldd	r23, Y+18	; 0x12
    4228:	8b 89       	ldd	r24, Y+19	; 0x13
    422a:	9c 89       	ldd	r25, Y+20	; 0x14
    422c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	88 8b       	std	Y+16, r24	; 0x10
    4236:	88 89       	ldd	r24, Y+16	; 0x10
    4238:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	8a 95       	dec	r24
    423e:	f1 f7       	brne	.-4      	; 0x423c <Ultrasonic_Trigger+0x196>
    4240:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    4242:	80 e3       	ldi	r24, 0x30	; 48
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	65 e0       	ldi	r22, 0x05	; 5
    4248:	40 e0       	ldi	r20, 0x00	; 0
    424a:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
}
    424e:	68 96       	adiw	r28, 0x18	; 24
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	f8 94       	cli
    4254:	de bf       	out	0x3e, r29	; 62
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <Ultrasonic_readDistance>:
 * Description :
 * Send the trigger pulse by using Ultrasonic_Trigger function.
 * Start the measurements by the ICU from this moment.
 */
u16 Ultrasonic_readDistance(void)
{
    4260:	df 93       	push	r29
    4262:	cf 93       	push	r28
    4264:	00 d0       	rcall	.+0      	; 0x4266 <Ultrasonic_readDistance+0x6>
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
	u16 g_distance=0;
    426a:	1a 82       	std	Y+2, r1	; 0x02
    426c:	19 82       	std	Y+1, r1	; 0x01
	//TIMER1_ClearTimerValue();

	Ultrasonic_Trigger();
    426e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Ultrasonic_Trigger>
	LCD_void_sendIntNum(6);
    4272:	66 e0       	ldi	r22, 0x06	; 6
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_void_sendIntNum>

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount < 2);
    427e:	80 91 a2 00 	lds	r24, 0x00A2
    4282:	82 30       	cpi	r24, 0x02	; 2
    4284:	e0 f3       	brcs	.-8      	; 0x427e <Ultrasonic_readDistance+0x1e>
	g_edgeCount = 0;
    4286:	10 92 a2 00 	sts	0x00A2, r1
	/* Calculate the distance in Centimeter value */
	//LCD_void_sendIntNum((s32)g_timeHigh);
	return g_distance = g_timeHigh/58;
    428a:	80 91 a3 00 	lds	r24, 0x00A3
    428e:	90 91 a4 00 	lds	r25, 0x00A4
    4292:	2a e3       	ldi	r18, 0x3A	; 58
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	b9 01       	movw	r22, r18
    4298:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__udivmodhi4>
    429c:	cb 01       	movw	r24, r22
    429e:	9a 83       	std	Y+2, r25	; 0x02
    42a0:	89 83       	std	Y+1, r24	; 0x01
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <led>:
#include"TIMER1_int.h"
#include"TIMER1_priv.h"
#include"GIE_R.h"
#include"GPIO.h"
void led()
{
    42b0:	df 93       	push	r29
    42b2:	cf 93       	push	r28
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PERIPHRAL_C, 0, 1);
    42b8:	83 e3       	ldi	r24, 0x33	; 51
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	60 e0       	ldi	r22, 0x00	; 0
    42be:	41 e0       	ldi	r20, 0x01	; 1
    42c0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PERIPHRAL_C, 0, 1);
    42c4:	83 e3       	ldi	r24, 0x33	; 51
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	60 e0       	ldi	r22, 0x00	; 0
    42ca:	41 e0       	ldi	r20, 0x01	; 1
    42cc:	0e 94 b2 07 	call	0xf64	; 0xf64 <DIO_voidSetPinValue>
}
    42d0:	cf 91       	pop	r28
    42d2:	df 91       	pop	r29
    42d4:	08 95       	ret

000042d6 <TEST>:

void TEST()
{
    42d6:	df 93       	push	r29
    42d8:	cf 93       	push	r28
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
	LCD_void_sendIntNum(TIMER1_GetInputCaptureValue());
    42de:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <TIMER1_GetInputCaptureValue>
    42e2:	cc 01       	movw	r24, r24
    42e4:	a0 e0       	ldi	r26, 0x00	; 0
    42e6:	b0 e0       	ldi	r27, 0x00	; 0
    42e8:	bc 01       	movw	r22, r24
    42ea:	cd 01       	movw	r24, r26
    42ec:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_void_sendIntNum>

	LCD_void_sendIntNum(TCNT1_REG);
    42f0:	ec e4       	ldi	r30, 0x4C	; 76
    42f2:	f0 e0       	ldi	r31, 0x00	; 0
    42f4:	80 81       	ld	r24, Z
    42f6:	91 81       	ldd	r25, Z+1	; 0x01
    42f8:	cc 01       	movw	r24, r24
    42fa:	a0 e0       	ldi	r26, 0x00	; 0
    42fc:	b0 e0       	ldi	r27, 0x00	; 0
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_void_sendIntNum>

}
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	08 95       	ret

0000430c <main>:
int main()
{
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	2b 97       	sbiw	r28, 0x0b	; 11
    4316:	0f b6       	in	r0, 0x3f	; 63
    4318:	f8 94       	cli
    431a:	de bf       	out	0x3e, r29	; 62
    431c:	0f be       	out	0x3f, r0	; 63
    431e:	cd bf       	out	0x3d, r28	; 61


	//RELAY_init();
	LCD_void_Init();
    4320:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_void_Init>

	//Timer1_EnableInt(T1_OVF);
	//Icu_ConfigType cfg={T1_PRE1024, RISING_EDGE_TRIGGER};
	//ICU_init(&cfg);

	TIMER1_INIT_CONFIG cfg = { TIMER1_COMPARE_OUTPUT_NON_PWM_MODE_OC1A_OC1B_DISCONNECTED, TIMER1_COMPARE_OUTPUT_FAST_PWM_MODE_OC1A_OC1B_DISCONNECTED, FCPU_DIVIDED_BY_1024, TIMER1_NORMAL_MODE,0, 0};
    4324:	89 e0       	ldi	r24, 0x09	; 9
    4326:	fe 01       	movw	r30, r28
    4328:	33 96       	adiw	r30, 0x03	; 3
    432a:	df 01       	movw	r26, r30
    432c:	98 2f       	mov	r25, r24
    432e:	1d 92       	st	X+, r1
    4330:	9a 95       	dec	r25
    4332:	e9 f7       	brne	.-6      	; 0x432e <main+0x22>
    4334:	85 e0       	ldi	r24, 0x05	; 5
    4336:	8d 83       	std	Y+5, r24	; 0x05

	TIMER1_Init(&cfg);
    4338:	ce 01       	movw	r24, r28
    433a:	03 96       	adiw	r24, 0x03	; 3
    433c:	0e 94 8e 14 	call	0x291c	; 0x291c <TIMER1_Init>
	/*setup icp pin as input*/
		DIO_voidSetPinDirection(PERIPHRAL_D, 6, INPUT);
    4340:	80 e3       	ldi	r24, 0x30	; 48
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	66 e0       	ldi	r22, 0x06	; 6
    4346:	40 e0       	ldi	r20, 0x00	; 0
    4348:	0e 94 fe 06 	call	0xdfc	; 0xdfc <DIO_voidSetPinDirection>

	TIMER1_SetInputCaptureEdgeDetection(FALLING_EDGE);
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <TIMER1_SetInputCaptureEdgeDetection>

	TIMER1_SetCallBack(TEST);
    4352:	8b e6       	ldi	r24, 0x6B	; 107
    4354:	91 e2       	ldi	r25, 0x21	; 33
    4356:	0e 94 48 1b 	call	0x3690	; 0x3690 <TIMER1_SetCallBack>
	TIMER1_IntEnable(&cfg);
    435a:	ce 01       	movw	r24, r28
    435c:	03 96       	adiw	r24, 0x03	; 3
    435e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <TIMER1_IntEnable>
	TIMER1_EnableICU();
    4362:	0e 94 10 1c 	call	0x3820	; 0x3820 <TIMER1_EnableICU>

	//Ultrasonic_init();
	GIE_enableGlobalInterrupt();
    4366:	0e 94 ee 06 	call	0xddc	; 0xddc <GIE_enableGlobalInterrupt>
    436a:	ff cf       	rjmp	.-2      	; 0x436a <main+0x5e>

0000436c <__mulsi3>:
    436c:	62 9f       	mul	r22, r18
    436e:	d0 01       	movw	r26, r0
    4370:	73 9f       	mul	r23, r19
    4372:	f0 01       	movw	r30, r0
    4374:	82 9f       	mul	r24, r18
    4376:	e0 0d       	add	r30, r0
    4378:	f1 1d       	adc	r31, r1
    437a:	64 9f       	mul	r22, r20
    437c:	e0 0d       	add	r30, r0
    437e:	f1 1d       	adc	r31, r1
    4380:	92 9f       	mul	r25, r18
    4382:	f0 0d       	add	r31, r0
    4384:	83 9f       	mul	r24, r19
    4386:	f0 0d       	add	r31, r0
    4388:	74 9f       	mul	r23, r20
    438a:	f0 0d       	add	r31, r0
    438c:	65 9f       	mul	r22, r21
    438e:	f0 0d       	add	r31, r0
    4390:	99 27       	eor	r25, r25
    4392:	72 9f       	mul	r23, r18
    4394:	b0 0d       	add	r27, r0
    4396:	e1 1d       	adc	r30, r1
    4398:	f9 1f       	adc	r31, r25
    439a:	63 9f       	mul	r22, r19
    439c:	b0 0d       	add	r27, r0
    439e:	e1 1d       	adc	r30, r1
    43a0:	f9 1f       	adc	r31, r25
    43a2:	bd 01       	movw	r22, r26
    43a4:	cf 01       	movw	r24, r30
    43a6:	11 24       	eor	r1, r1
    43a8:	08 95       	ret

000043aa <__udivmodhi4>:
    43aa:	aa 1b       	sub	r26, r26
    43ac:	bb 1b       	sub	r27, r27
    43ae:	51 e1       	ldi	r21, 0x11	; 17
    43b0:	07 c0       	rjmp	.+14     	; 0x43c0 <__udivmodhi4_ep>

000043b2 <__udivmodhi4_loop>:
    43b2:	aa 1f       	adc	r26, r26
    43b4:	bb 1f       	adc	r27, r27
    43b6:	a6 17       	cp	r26, r22
    43b8:	b7 07       	cpc	r27, r23
    43ba:	10 f0       	brcs	.+4      	; 0x43c0 <__udivmodhi4_ep>
    43bc:	a6 1b       	sub	r26, r22
    43be:	b7 0b       	sbc	r27, r23

000043c0 <__udivmodhi4_ep>:
    43c0:	88 1f       	adc	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	5a 95       	dec	r21
    43c6:	a9 f7       	brne	.-22     	; 0x43b2 <__udivmodhi4_loop>
    43c8:	80 95       	com	r24
    43ca:	90 95       	com	r25
    43cc:	bc 01       	movw	r22, r24
    43ce:	cd 01       	movw	r24, r26
    43d0:	08 95       	ret

000043d2 <__divmodhi4>:
    43d2:	97 fb       	bst	r25, 7
    43d4:	09 2e       	mov	r0, r25
    43d6:	07 26       	eor	r0, r23
    43d8:	0a d0       	rcall	.+20     	; 0x43ee <__divmodhi4_neg1>
    43da:	77 fd       	sbrc	r23, 7
    43dc:	04 d0       	rcall	.+8      	; 0x43e6 <__divmodhi4_neg2>
    43de:	e5 df       	rcall	.-54     	; 0x43aa <__udivmodhi4>
    43e0:	06 d0       	rcall	.+12     	; 0x43ee <__divmodhi4_neg1>
    43e2:	00 20       	and	r0, r0
    43e4:	1a f4       	brpl	.+6      	; 0x43ec <__divmodhi4_exit>

000043e6 <__divmodhi4_neg2>:
    43e6:	70 95       	com	r23
    43e8:	61 95       	neg	r22
    43ea:	7f 4f       	sbci	r23, 0xFF	; 255

000043ec <__divmodhi4_exit>:
    43ec:	08 95       	ret

000043ee <__divmodhi4_neg1>:
    43ee:	f6 f7       	brtc	.-4      	; 0x43ec <__divmodhi4_exit>
    43f0:	90 95       	com	r25
    43f2:	81 95       	neg	r24
    43f4:	9f 4f       	sbci	r25, 0xFF	; 255
    43f6:	08 95       	ret

000043f8 <__udivmodsi4>:
    43f8:	a1 e2       	ldi	r26, 0x21	; 33
    43fa:	1a 2e       	mov	r1, r26
    43fc:	aa 1b       	sub	r26, r26
    43fe:	bb 1b       	sub	r27, r27
    4400:	fd 01       	movw	r30, r26
    4402:	0d c0       	rjmp	.+26     	; 0x441e <__udivmodsi4_ep>

00004404 <__udivmodsi4_loop>:
    4404:	aa 1f       	adc	r26, r26
    4406:	bb 1f       	adc	r27, r27
    4408:	ee 1f       	adc	r30, r30
    440a:	ff 1f       	adc	r31, r31
    440c:	a2 17       	cp	r26, r18
    440e:	b3 07       	cpc	r27, r19
    4410:	e4 07       	cpc	r30, r20
    4412:	f5 07       	cpc	r31, r21
    4414:	20 f0       	brcs	.+8      	; 0x441e <__udivmodsi4_ep>
    4416:	a2 1b       	sub	r26, r18
    4418:	b3 0b       	sbc	r27, r19
    441a:	e4 0b       	sbc	r30, r20
    441c:	f5 0b       	sbc	r31, r21

0000441e <__udivmodsi4_ep>:
    441e:	66 1f       	adc	r22, r22
    4420:	77 1f       	adc	r23, r23
    4422:	88 1f       	adc	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	1a 94       	dec	r1
    4428:	69 f7       	brne	.-38     	; 0x4404 <__udivmodsi4_loop>
    442a:	60 95       	com	r22
    442c:	70 95       	com	r23
    442e:	80 95       	com	r24
    4430:	90 95       	com	r25
    4432:	9b 01       	movw	r18, r22
    4434:	ac 01       	movw	r20, r24
    4436:	bd 01       	movw	r22, r26
    4438:	cf 01       	movw	r24, r30
    443a:	08 95       	ret

0000443c <__divmodsi4>:
    443c:	97 fb       	bst	r25, 7
    443e:	09 2e       	mov	r0, r25
    4440:	05 26       	eor	r0, r21
    4442:	0e d0       	rcall	.+28     	; 0x4460 <__divmodsi4_neg1>
    4444:	57 fd       	sbrc	r21, 7
    4446:	04 d0       	rcall	.+8      	; 0x4450 <__divmodsi4_neg2>
    4448:	d7 df       	rcall	.-82     	; 0x43f8 <__udivmodsi4>
    444a:	0a d0       	rcall	.+20     	; 0x4460 <__divmodsi4_neg1>
    444c:	00 1c       	adc	r0, r0
    444e:	38 f4       	brcc	.+14     	; 0x445e <__divmodsi4_exit>

00004450 <__divmodsi4_neg2>:
    4450:	50 95       	com	r21
    4452:	40 95       	com	r20
    4454:	30 95       	com	r19
    4456:	21 95       	neg	r18
    4458:	3f 4f       	sbci	r19, 0xFF	; 255
    445a:	4f 4f       	sbci	r20, 0xFF	; 255
    445c:	5f 4f       	sbci	r21, 0xFF	; 255

0000445e <__divmodsi4_exit>:
    445e:	08 95       	ret

00004460 <__divmodsi4_neg1>:
    4460:	f6 f7       	brtc	.-4      	; 0x445e <__divmodsi4_exit>
    4462:	90 95       	com	r25
    4464:	80 95       	com	r24
    4466:	70 95       	com	r23
    4468:	61 95       	neg	r22
    446a:	7f 4f       	sbci	r23, 0xFF	; 255
    446c:	8f 4f       	sbci	r24, 0xFF	; 255
    446e:	9f 4f       	sbci	r25, 0xFF	; 255
    4470:	08 95       	ret

00004472 <__prologue_saves__>:
    4472:	2f 92       	push	r2
    4474:	3f 92       	push	r3
    4476:	4f 92       	push	r4
    4478:	5f 92       	push	r5
    447a:	6f 92       	push	r6
    447c:	7f 92       	push	r7
    447e:	8f 92       	push	r8
    4480:	9f 92       	push	r9
    4482:	af 92       	push	r10
    4484:	bf 92       	push	r11
    4486:	cf 92       	push	r12
    4488:	df 92       	push	r13
    448a:	ef 92       	push	r14
    448c:	ff 92       	push	r15
    448e:	0f 93       	push	r16
    4490:	1f 93       	push	r17
    4492:	cf 93       	push	r28
    4494:	df 93       	push	r29
    4496:	cd b7       	in	r28, 0x3d	; 61
    4498:	de b7       	in	r29, 0x3e	; 62
    449a:	ca 1b       	sub	r28, r26
    449c:	db 0b       	sbc	r29, r27
    449e:	0f b6       	in	r0, 0x3f	; 63
    44a0:	f8 94       	cli
    44a2:	de bf       	out	0x3e, r29	; 62
    44a4:	0f be       	out	0x3f, r0	; 63
    44a6:	cd bf       	out	0x3d, r28	; 61
    44a8:	09 94       	ijmp

000044aa <__epilogue_restores__>:
    44aa:	2a 88       	ldd	r2, Y+18	; 0x12
    44ac:	39 88       	ldd	r3, Y+17	; 0x11
    44ae:	48 88       	ldd	r4, Y+16	; 0x10
    44b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    44b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    44b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    44b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    44b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    44ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    44bc:	b9 84       	ldd	r11, Y+9	; 0x09
    44be:	c8 84       	ldd	r12, Y+8	; 0x08
    44c0:	df 80       	ldd	r13, Y+7	; 0x07
    44c2:	ee 80       	ldd	r14, Y+6	; 0x06
    44c4:	fd 80       	ldd	r15, Y+5	; 0x05
    44c6:	0c 81       	ldd	r16, Y+4	; 0x04
    44c8:	1b 81       	ldd	r17, Y+3	; 0x03
    44ca:	aa 81       	ldd	r26, Y+2	; 0x02
    44cc:	b9 81       	ldd	r27, Y+1	; 0x01
    44ce:	ce 0f       	add	r28, r30
    44d0:	d1 1d       	adc	r29, r1
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
    44dc:	ed 01       	movw	r28, r26
    44de:	08 95       	ret

000044e0 <_exit>:
    44e0:	f8 94       	cli

000044e2 <__stop_program>:
    44e2:	ff cf       	rjmp	.-2      	; 0x44e2 <__stop_program>
